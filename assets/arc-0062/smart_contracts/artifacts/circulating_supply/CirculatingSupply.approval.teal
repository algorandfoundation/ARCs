#pragma version 10

smart_contracts.circulating_supply.contract.CirculatingSupply.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    callsub __puya_arc4_router__
    return


// smart_contracts.circulating_supply.contract.CirculatingSupply.__puya_arc4_router__() -> uint64:
__puya_arc4_router__:
    // smart_contracts/circulating_supply/contract.py:20
    // class CirculatingSupply(ARC4Contract):
    proto 0 1
    txn NumAppArgs
    bz __puya_arc4_router___bare_routing@7
    method "set_asset(uint64)void"
    method "set_not_circulating_address(address,string)void"
    method "arc62_get_circulating_supply(uint64)uint64"
    txna ApplicationArgs 0
    match __puya_arc4_router___set_asset_route@2 __puya_arc4_router___set_not_circulating_address_route@3 __puya_arc4_router___arc62_get_circulating_supply_route@4
    int 0
    retsub

__puya_arc4_router___set_asset_route@2:
    // smart_contracts/circulating_supply/contract.py:36
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/circulating_supply/contract.py:20
    // class CirculatingSupply(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/circulating_supply/contract.py:36
    // @abimethod()
    callsub set_asset
    int 1
    retsub

__puya_arc4_router___set_not_circulating_address_route@3:
    // smart_contracts/circulating_supply/contract.py:50
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/circulating_supply/contract.py:20
    // class CirculatingSupply(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    extract 2 0
    // smart_contracts/circulating_supply/contract.py:50
    // @abimethod()
    callsub set_not_circulating_address
    int 1
    retsub

__puya_arc4_router___arc62_get_circulating_supply_route@4:
    // smart_contracts/circulating_supply/contract.py:74
    // @abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/circulating_supply/contract.py:20
    // class CirculatingSupply(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    // smart_contracts/circulating_supply/contract.py:74
    // @abimethod(readonly=True)
    callsub arc62_get_circulating_supply
    itob
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    retsub

__puya_arc4_router___bare_routing@7:
    // smart_contracts/circulating_supply/contract.py:20
    // class CirculatingSupply(ARC4Contract):
    txn OnCompletion
    bnz __puya_arc4_router___after_if_else@11
    txn ApplicationID
    !
    assert // is creating
    int 1
    retsub

__puya_arc4_router___after_if_else@11:
    // smart_contracts/circulating_supply/contract.py:20
    // class CirculatingSupply(ARC4Contract):
    int 0
    retsub


// smart_contracts.circulating_supply.contract.CirculatingSupply.set_asset(asset_id: uint64) -> void:
set_asset:
    // smart_contracts/circulating_supply/contract.py:36-37
    // @abimethod()
    // def set_asset(self, asset_id: UInt64) -> None:
    proto 1 0
    // smart_contracts/circulating_supply/contract.py:45-46
    // # Preconditions
    // assert Txn.sender == asset.manager and not self.asset_id, err.UNAUTHORIZED
    txn Sender
    frame_dig -1
    asset_params_get AssetManager
    assert // asset exists
    ==
    bz set_asset_bool_false@3
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check self.asset_id exists
    bnz set_asset_bool_false@3
    int 1
    b set_asset_bool_merge@4

set_asset_bool_false@3:
    int 0

set_asset_bool_merge@4:
    // smart_contracts/circulating_supply/contract.py:45-46
    // # Preconditions
    // assert Txn.sender == asset.manager and not self.asset_id, err.UNAUTHORIZED
    assert // Unauthorized
    // smart_contracts/circulating_supply/contract.py:47-48
    // # Effects
    // self.asset_id = asset_id
    byte "asset_id"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.circulating_supply.contract.CirculatingSupply.set_not_circulating_address(address: bytes, label: bytes) -> void:
set_not_circulating_address:
    // smart_contracts/circulating_supply/contract.py:50-51
    // @abimethod()
    // def set_not_circulating_address(self, address: Address, label: String) -> None:
    proto 2 0
    // smart_contracts/circulating_supply/contract.py:59
    // asset = Asset(self.asset_id)
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check self.asset_id exists
    // smart_contracts/circulating_supply/contract.py:60-61
    // # Preconditions
    // assert Txn.sender == asset.manager, err.UNAUTHORIZED
    txn Sender
    swap
    dup
    asset_params_get AssetManager
    assert // asset exists
    uncover 2
    ==
    assert // Unauthorized
    // smart_contracts/circulating_supply/contract.py:62
    // assert Account(address.bytes).is_opted_in(asset), err.NOT_OPTED_IN
    frame_dig -2
    len
    int 32
    ==
    assert // Address length is 32 bytes
    frame_dig -2
    swap
    asset_holding_get AssetBalance
    bury 1
    assert // Not Opted-In
    // smart_contracts/circulating_supply/contract.py:65
    // case cfg.NOT_CIRCULATING_LABEL_1:
    byte "burned"
    // smart_contracts/circulating_supply/contract.py:67
    // case cfg.NOT_CIRCULATING_LABEL_2:
    byte "locked"
    // smart_contracts/circulating_supply/contract.py:69
    // case cfg.NOT_CIRCULATING_LABEL_3:
    byte "generic"
    // smart_contracts/circulating_supply/contract.py:63-72
    // # Effects
    // match label:
    //     case cfg.NOT_CIRCULATING_LABEL_1:
    //         self.not_circulating_label_1.value = address
    //     case cfg.NOT_CIRCULATING_LABEL_2:
    //         self.not_circulating_label_2.value = address
    //     case cfg.NOT_CIRCULATING_LABEL_3:
    //         self.not_circulating_label_3.value = address
    //     case _:
    //         assert False, err.INVALID_LABEL
    frame_dig -1
    match set_not_circulating_address_switch_case_0@1 set_not_circulating_address_switch_case_1@2 set_not_circulating_address_switch_case_2@3
    // smart_contracts/circulating_supply/contract.py:72
    // assert False, err.INVALID_LABEL
    err // Invalid Label

set_not_circulating_address_switch_case_0@1:
    // smart_contracts/circulating_supply/contract.py:66
    // self.not_circulating_label_1.value = address
    byte "burned"
    frame_dig -2
    app_global_put
    b set_not_circulating_address_switch_case_next@5

set_not_circulating_address_switch_case_1@2:
    // smart_contracts/circulating_supply/contract.py:68
    // self.not_circulating_label_2.value = address
    byte "locked"
    frame_dig -2
    app_global_put
    b set_not_circulating_address_switch_case_next@5

set_not_circulating_address_switch_case_2@3:
    // smart_contracts/circulating_supply/contract.py:70
    // self.not_circulating_label_3.value = address
    byte "generic"
    frame_dig -2
    app_global_put

set_not_circulating_address_switch_case_next@5:
    retsub


// smart_contracts.circulating_supply.contract.CirculatingSupply.arc62_get_circulating_supply(asset_id: uint64) -> uint64:
arc62_get_circulating_supply:
    // smart_contracts/circulating_supply/contract.py:74-75
    // @abimethod(readonly=True)
    // def arc62_get_circulating_supply(self, asset_id: UInt64) -> UInt64:
    proto 1 1
    byte ""
    dupn 2
    // smart_contracts/circulating_supply/contract.py:86
    // not_circulating_1 = Account(self.not_circulating_label_1.value.bytes)
    int 0
    byte "burned"
    app_global_get_ex
    swap
    dup
    uncover 2
    assert // check self.not_circulating_label_1 exists
    len
    int 32
    ==
    assert // Address length is 32 bytes
    // smart_contracts/circulating_supply/contract.py:87
    // not_circulating_2 = Account(self.not_circulating_label_2.value.bytes)
    int 0
    byte "locked"
    app_global_get_ex
    swap
    dup
    uncover 2
    assert // check self.not_circulating_label_2 exists
    len
    int 32
    ==
    assert // Address length is 32 bytes
    // smart_contracts/circulating_supply/contract.py:88
    // not_circulating_3 = Account(self.not_circulating_label_3.value.bytes)
    int 0
    byte "generic"
    app_global_get_ex
    swap
    dup
    uncover 2
    assert // check self.not_circulating_label_3 exists
    len
    int 32
    ==
    assert // Address length is 32 bytes
    // smart_contracts/circulating_supply/contract.py:89-90
    // # Preconditions
    // assert asset_id == self.asset_id, err.INVALID_ASSET_ID
    int 0
    byte "asset_id"
    app_global_get_ex
    assert // check self.asset_id exists
    frame_dig -1
    ==
    assert // Invalid ASA ID
    // smart_contracts/circulating_supply/contract.py:94
    // if asset.reserve == Global.zero_address
    frame_dig -1
    asset_params_get AssetReserve
    assert // asset exists
    global ZeroAddress
    ==
    // smart_contracts/circulating_supply/contract.py:94-95
    // if asset.reserve == Global.zero_address
    // or not asset.reserve.is_opted_in(asset)
    bnz arc62_get_circulating_supply_ternary_true@2
    // smart_contracts/circulating_supply/contract.py:95
    // or not asset.reserve.is_opted_in(asset)
    frame_dig -1
    asset_params_get AssetReserve
    assert // asset exists
    frame_dig -1
    asset_holding_get AssetBalance
    bury 1
    bnz arc62_get_circulating_supply_ternary_false@3

arc62_get_circulating_supply_ternary_true@2:
    // smart_contracts/circulating_supply/contract.py:93
    // UInt64(0)
    int 0
    frame_bury 2
    b arc62_get_circulating_supply_ternary_merge@4

arc62_get_circulating_supply_ternary_false@3:
    // smart_contracts/circulating_supply/contract.py:96
    // else asset.balance(asset.reserve)
    frame_dig -1
    asset_params_get AssetReserve
    assert // asset exists
    frame_dig -1
    asset_holding_get AssetBalance
    assert // account opted into asset
    frame_bury 2

arc62_get_circulating_supply_ternary_merge@4:
    // smart_contracts/circulating_supply/contract.py:100
    // if not_circulating_1 == Global.zero_address
    frame_dig 3
    global ZeroAddress
    ==
    // smart_contracts/circulating_supply/contract.py:100-101
    // if not_circulating_1 == Global.zero_address
    // or not not_circulating_1.is_opted_in(asset)
    bnz arc62_get_circulating_supply_ternary_true@6
    // smart_contracts/circulating_supply/contract.py:101
    // or not not_circulating_1.is_opted_in(asset)
    frame_dig 3
    frame_dig -1
    asset_holding_get AssetBalance
    bury 1
    bnz arc62_get_circulating_supply_ternary_false@7

arc62_get_circulating_supply_ternary_true@6:
    // smart_contracts/circulating_supply/contract.py:99
    // UInt64(0)
    int 0
    frame_bury 0
    b arc62_get_circulating_supply_ternary_merge@8

arc62_get_circulating_supply_ternary_false@7:
    // smart_contracts/circulating_supply/contract.py:102
    // else asset.balance(not_circulating_1)
    frame_dig 3
    frame_dig -1
    asset_holding_get AssetBalance
    assert // account opted into asset
    frame_bury 0

arc62_get_circulating_supply_ternary_merge@8:
    // smart_contracts/circulating_supply/contract.py:106
    // if not_circulating_2 == Global.zero_address
    frame_dig 4
    global ZeroAddress
    ==
    // smart_contracts/circulating_supply/contract.py:106-107
    // if not_circulating_2 == Global.zero_address
    // or not not_circulating_2.is_opted_in(asset)
    bnz arc62_get_circulating_supply_ternary_true@10
    // smart_contracts/circulating_supply/contract.py:107
    // or not not_circulating_2.is_opted_in(asset)
    frame_dig 4
    frame_dig -1
    asset_holding_get AssetBalance
    bury 1
    bnz arc62_get_circulating_supply_ternary_false@11

arc62_get_circulating_supply_ternary_true@10:
    // smart_contracts/circulating_supply/contract.py:105
    // UInt64(0)
    int 0
    frame_bury 1
    b arc62_get_circulating_supply_ternary_merge@12

arc62_get_circulating_supply_ternary_false@11:
    // smart_contracts/circulating_supply/contract.py:108
    // else asset.balance(not_circulating_2)
    frame_dig 4
    frame_dig -1
    asset_holding_get AssetBalance
    assert // account opted into asset
    frame_bury 1

arc62_get_circulating_supply_ternary_merge@12:
    // smart_contracts/circulating_supply/contract.py:112
    // if not_circulating_3 == Global.zero_address
    frame_dig 5
    global ZeroAddress
    ==
    // smart_contracts/circulating_supply/contract.py:112-113
    // if not_circulating_3 == Global.zero_address
    // or not not_circulating_3.is_opted_in(asset)
    bnz arc62_get_circulating_supply_ternary_true@14
    // smart_contracts/circulating_supply/contract.py:113
    // or not not_circulating_3.is_opted_in(asset)
    frame_dig 5
    frame_dig -1
    asset_holding_get AssetBalance
    bury 1
    bnz arc62_get_circulating_supply_ternary_false@15

arc62_get_circulating_supply_ternary_true@14:
    // smart_contracts/circulating_supply/contract.py:111
    // UInt64(0)
    int 0
    b arc62_get_circulating_supply_ternary_merge@16

arc62_get_circulating_supply_ternary_false@15:
    // smart_contracts/circulating_supply/contract.py:114
    // else asset.balance(not_circulating_3)
    frame_dig 5
    frame_dig -1
    asset_holding_get AssetBalance
    assert // account opted into asset

arc62_get_circulating_supply_ternary_merge@16:
    // smart_contracts/circulating_supply/contract.py:117
    // asset.total
    frame_dig -1
    asset_params_get AssetTotal
    assert // asset exists
    // smart_contracts/circulating_supply/contract.py:117-118
    // asset.total
    // - reserve_balance
    frame_dig 2
    -
    // smart_contracts/circulating_supply/contract.py:117-119
    // asset.total
    // - reserve_balance
    // - not_circulating_balance_1
    frame_dig 0
    -
    // smart_contracts/circulating_supply/contract.py:117-120
    // asset.total
    // - reserve_balance
    // - not_circulating_balance_1
    // - not_circulating_balance_2
    frame_dig 1
    -
    // smart_contracts/circulating_supply/contract.py:117-121
    // asset.total
    // - reserve_balance
    // - not_circulating_balance_1
    // - not_circulating_balance_2
    // - not_circulating_balance_3
    swap
    -
    // smart_contracts/circulating_supply/contract.py:116-122
    // return (
    //     asset.total
    //     - reserve_balance
    //     - not_circulating_balance_1
    //     - not_circulating_balance_2
    //     - not_circulating_balance_3
    // )
    frame_bury 0
    retsub


// smart_contracts.circulating_supply.contract.CirculatingSupply.__init__() -> void:
__init__:
    // smart_contracts/circulating_supply/contract.py:23
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/circulating_supply/contract.py:24-25
    // # Global State
    // self.asset_id = UInt64()
    byte "asset_id"
    int 0
    app_global_put
    // smart_contracts/circulating_supply/contract.py:27
    // Address(), key=cfg.NOT_CIRCULATING_LABEL_1
    byte "burned"
    global ZeroAddress
    // smart_contracts/circulating_supply/contract.py:26-28
    // self.not_circulating_label_1 = GlobalState(
    //     Address(), key=cfg.NOT_CIRCULATING_LABEL_1
    // )
    app_global_put
    // smart_contracts/circulating_supply/contract.py:30
    // Address(), key=cfg.NOT_CIRCULATING_LABEL_2
    byte "locked"
    global ZeroAddress
    // smart_contracts/circulating_supply/contract.py:29-31
    // self.not_circulating_label_2 = GlobalState(
    //     Address(), key=cfg.NOT_CIRCULATING_LABEL_2
    // )
    app_global_put
    // smart_contracts/circulating_supply/contract.py:33
    // Address(), key=cfg.NOT_CIRCULATING_LABEL_3
    byte "generic"
    global ZeroAddress
    // smart_contracts/circulating_supply/contract.py:32-34
    // self.not_circulating_label_3 = GlobalState(
    //     Address(), key=cfg.NOT_CIRCULATING_LABEL_3
    // )
    app_global_put
    retsub
