{
  "version": 3,
  "sources": [
    "../../smart_asa/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCe;;AAA6B;;AAA7B;AAAP;AACO;;AAAuB;;AAAvB;AAAP;AACO;;AAAA;AAAP;AACO;;AAAsB;AAAtB;AAAP;AAIA;;AAAa;AAAb;AACA;;AAAgB;AAAhB;AACA;;AAAsB;AAAtB;AACA;;AAAiB;;AAAjB;AACA;;AAAY;;AAAZ;AACA;;AAAW;;AAAX;AACA;;AAAqB;;AAArB;AACA;;AAAoB;;AAApB;AACA;AAAoB;;AAApB;AACA;;AAAmB;;AAAnB;AACA;AAAqB;;AAArB;AAEA;AAAoB;AAApB;AACA;;AAAqB;AAArB;AAnCR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAkjBK;;AAAA;AAAA;AAAA;;AAAA;AAljBL;;;AAAA;AAAA;;AAkjBK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AA9hBL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AA8hBK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AA7gBL;;;AAAA;AAAA;;AA6gBK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA7BA;;AAAA;AAAA;AAAA;;AAAA;AAhfL;;;AAAA;AAAA;;AAgfK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AApdL;;;AAAA;AAAA;;AAodK;;;AAAA;;AA9BA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAtbL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAsbK;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAhaL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAgaK;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAhZL;;;AAAA;AAAA;;AAAA;;;AAgZK;;;AAAA;;AA1CA;;AAAA;AAAA;AAAA;;AAAA;AAtWL;;;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAsWK;;;AAAA;;AAzDA;;AAAA;AAAA;AAAA;;AAAA;AA7SL;;;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA6SK;;;AAAA;;AAxCA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AArQL;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqQK;;;AAAA;;AArDA;;AAAA;AAAA;AAAA;;AAAA;AAhNL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAgNK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAhNL;;AAAA;;;;;;;;;AAmDA;;;AAE8C;;AAAnB;;AAAA;;AAAA;AAAZ;;AAAA;AAAA;AAAP;AAER;;;AAEe;AAAA;AAAA;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;;AA4HR;;;AASQ;AAMW;;;;;;;;;;;;;;;;;;;;AANX;;;AACQ;;;AADR;;AAiBR;;;AAmCe;;AAAc;;AAAd;AAAP;AACW;AAAA;AAAA;AAAA;AAAJ;AAAP;AA/EI;AAOoC;;AA/HlC;;AACd;;AAAA;;;AACyB;;AAAA;AAAI;;AAAJ;AAHR;;;;;;;;;;;;AAGC;AAAA;AAAA;AAAN;;AAAM;AAAN;;AACM;;AAAN;AAAA;;;;;AACG;;AAAA;AAAA;AAAO;;;AAAP;;AAAA;AA2HK;;;;;;;;;;;;;;;;;AAAA;AAAA;AACI;;AACA;;;;;;;;;;;;AAHG;;;;;;;;;;;;;;;;;;;;AADD;;;;;;;;;;AADK;;;AADN;;;AADH;;;;AAFV;;;;AACQ;;;AADR;AAkFJ;AAlFI;;AAkFJ;AACa;;AAAA;AAAb;;AAAA;AAAA;AACgB;;AAAA;AAAhB;;AAAA;AAAA;AACsB;;;AAAA;AAAtB;;AAAA;AAAA;AACiB;;AAAA;;;AAAjB;;AAAA;AAAA;AACY;;AAAA;;;AAAZ;;AAAA;AAAA;AACW;;AAAA;;;AAAX;;AAAA;AAAA;AACqB;;AAAA;;;AAArB;;AAAA;AAAA;AACA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AACmB;AAAA;AAAA;AAAA;AAAZ;AAAP;;AAAA;AAER;;;AAYQ;;AAAA;;;AAEI;;AAAA;;AAAwB;AAAxB;AADJ;AAGO;;AAAA;;AAAiC;AAAA;AAAA;AAAA;AAAjC;AAAP;AACO;;AAAA;;AAA0B;;AAA1B;AAAP;AACO;;AAAA;;AAAkC;;AAAlC;AAAP;AAEI;;AAAA;;AAAA;AADJ;AAII;;AAAA;;AAAkC;;AAAlC;AADJ;AAGO;;AAAqB;AAArB;AAAP;AACO;;AAAA;;AAAA;;AAAA;;AAAP;AAKwC;AAAA;AAAA;AAAA;AAAd;;AAA1B;AAAA;;AAAA;AACoB;;AAApB;;AAAkC;AAAlC;AAII;AAAA;;AAAA;AAAA;AAAA;;;AAAqC;;AAAd;;AAAA;;AAAA;AAAvB;;;AAEoB;;AAApB;;AAAkC;AAAlC;;AAEZ;;;AAkCQ;;AAAA;;;AACO;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AACmB;AAAA;AAAA;AAAA;AAAhB;;AAAA;AAAX;;;AACmB;AAAA;AAAA;AAAA;AAAqB;;AAArB;AAAP;AACc;AAAA;;AAAA;AAAA;AAAf;;AAAA;AAAX;;;AACmB;AAAA;;AAAA;AAAA;AAAoB;;AAApB;AAAP;AACgB;AAAA;AAAA;AAAA;AAAjB;;AAAA;AAAX;;;AACmB;AAAA;AAAA;AAAA;AAAsB;;AAAtB;AAAP;AACY;;AAAA;;;AAAT;AAAA;;AAAA;AAAP;AAGa;;AAAA;AAAb;;AAAA;AAAA;AACgB;;AAAA;AAAhB;;AAAA;AAAA;AACsB;;;AAAA;AAAtB;;AAAA;AAAA;AACiB;;AAAA;;;AAAjB;;AAAA;AAAA;AACY;;AAAA;;;AAAZ;;AAAA;AAAA;AACW;;AAAA;;;AAAX;;AAAA;AAAA;AACqB;;AAAA;;;AAArB;;AAAA;AAAA;AACA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;AAAA;;AAAA;;AAER;;;AAkBQ;;AAAA;;;AACG;;AAAgB;;AAAhB;AAAX;;;AAE4D;;AAAA;AA1T7C;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAEO;;AAAkB;;AAAlB;AAAP;AAEiD;AAAA;AAAA;AAAA;AAA9B;;;AAAf;AACG;AAAA;;AAAA;AAAA;AADH;AADJ;AAMI;;AAAA;AAAA;AAAA;AAAA;AAA6C;AAAA;AAAA;AAAA;AAA7C;AADJ;AAGW;AAAA;;AAAA;AAAA;AAAJ;AAAP;AACG;AAAA;AAAA;AAAA;AAAqB;AAAA;AAAA;AAAA;AAArB;AAAX;;;AACuB;;AAAA;AAAA;;AAAA;AAAA;AAAJ;AAAP;AA6Ta;;AAAA;AAFjB;;AAAA;AAAA;;AAAA;;AAAA;;;;AAZK;;AAAkB;;AAAlB;AAAb;;;AA1Se;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAGI;;AAAA;AAAA;AAAA;AAAA;AAA2C;AAAA;AAAA;AAAA;AAA3C;AADJ;AAGW;AAAA;;AAAA;AAAA;AAAJ;AAAP;AACG;AAAA;AAAA;AAAA;AAAqB;AAAA;AAAA;AAAA;AAArB;AAAX;;;AACuB;;AAAA;AAAA;;AAAA;AAAA;AAAJ;AAAP;AAEuB;AAAA;AAAA;AAAA;AAAhB;;AAAA;AAAP;;;;AAmSC;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAb;;;AA3RY;;AAAA;AAAA;AAAA;AAAA;AAA2C;AAAA;AAAA;AAAA;AAA3C;AADJ;AAII;;AAAA;AAAA;AAAA;AAAA;AAA6C;AAAA;AAAA;AAAA;AAA7C;AADJ;;;;AAQO;;AAAA;;AAAA;AAAP;AAGI;;AAAA;AAAA;AAAA;AAAA;AAA2C;AAAA;AAAA;AAAA;AAA3C;AADJ;AAII;;AAAA;AAAA;AAAA;AAAA;AAA6C;AAAA;AAAA;AAAA;AAA7C;AADJ;AAGW;AAAA;;AAAA;AAAA;AAAJ;AAAP;AACW;;AAAA;AAAA;;AAAA;AAAA;AAAJ;AAAP;AACW;;AAAA;AAAA;;AAAA;AAAA;AAAJ;AAAP;;;;AAwRR;;;AAUQ;;AAAA;;;AACO;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AAGqB;;;AAAA;AAArB;;AAAA;AAAA;;AAER;;;AAaQ;;AAAA;;;AAEI;;AAAA;AAAA;AAAA;AAAA;AAA6C;AAAA;AAAA;AAAA;AAA7C;AADJ;AAGO;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AAGsC;;;AAAA;AAAtC;;AAAA;;AAAA;;AAAA;;AAER;;;AA1TqC;;AAAkB;AAAlB;AACT;AAAA;;AAAA;AAAA;AAAA;AACb;;AAAqB;AAArB;AAAP;AAE8B;;AAA1B;AAAA;AAAA;AAAA;AAAA;;AAAA;AADJ;AAII;;AAAA;;AAAA;AADJ;AAOI;AAAA;;AAAA;;AAAA;AADJ;AAGO;AAAA;;AAA4B;;AAA5B;AAAP;AACO;AAAA;;AAAA;AAAP;AAEI;;AAAoC;;AAApC;AADJ;AAoToB;;AAAA;;AAC5B;;;AA7SqC;;AAAkB;AAAlB;AACT;AAAA;;AAAA;AAAA;AAAA;AAEhB;;AAAA;;AAAA;AAAA;;AAAA;AADJ;AAGyB;AAAA;AAAA;AAAA;AAAlB;;AAAA;AAAP;AA2SQ;;AAAA;AADhB;;;AAIoB;;AAAA;AAAA;AAAA;AAAA;AAAuC;AAAA;AAAA;AAAA;AAAvC;AADJ;AAzSG;AAAA;;AAAA;AAAA;AAAJ;AAAP;AAC+B;;AAApB;AAAA;;AAAA;AAAA;AAAJ;AAAP;AACW;;AAAA;AAAA;;AAAA;AAAA;AAAJ;AAAP;AA+SyC;;AAApB;;AAAA;;AAAA;AACA;;AAHjB;;AAAA;;AAAA;;AAAA;;;;AAOZ;;;AASQ;;AAAA;;;AACO;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AApRA;AAGW;;;;;;;;AAHX;;;;AACQ;;;AADR;AAwRA;;AAAa;AAAb;AACA;;AAAgB;AAAhB;AACA;;AAAsB;AAAtB;AACA;;AAAiB;;AAAjB;AACA;;AAAY;;AAAZ;AACA;;AAAW;;AAAX;AACA;;AAAqB;;AAArB;AACA;;AAAoB;;AAApB;AACA;AAAoB;;AAApB;AACA;;AAAmB;;AAAnB;AACA;AAAqB;;AAArB;AACA;AAAoB;AAApB;AACA;;AAAqB;AAArB;;AAER;;;AAYQ;;AAAA;;;AAIsB;AAAA;;AAAA;AAAA;AAAZ;AACe;AAAA;;AAAA;AAAA;AAAZ;AAAA;;;AACgB;AAAA;;AAAA;AAAA;AAAV;;AAAA;AAAA;;AAAA;AACO;AAAA;;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACO;AAAA;;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACW;AAAA;;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAC4B;AAAA;;AAAA;AAAA;AAAlB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACY;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACD;AAAA;;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;AAXxB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;AAcR;;;AAYQ;;AAAA;;;AAGiB;AAAA;;AAAA;AAAA;AAAV;;AAAA;AAAA;;AAAA;AAAP;AAER;;;AAeQ;;AAAA;;;AAGiB;;AAAA;AAAA;;AAAA;AAAA;AAAV;;AAAA;AAAA;;AAAA;AAAP;AAER;;;AAYQ;;AAAA;;;AAGmB;;AAAA;;;AAAZ;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 2 18446744073709551615"
    },
    "17": {
      "op": "bytecblock \"smart_asa_id\" \"reserve_addr\" \"clawback_addr\" \"account_smart_asa_id\" \"account_frozen\" \"freeze_addr\" \"global_frozen\" \"manager_addr\" \"total\" \"default_frozen\" \"decimals\" \"unit_name\" \"name\" \"url\" \"metadata_hash\" 0x151f7c75 0x00"
    },
    "204": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "206": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "209": {
      "op": "txn GlobalNumByteSlice",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "211": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "8"
      ]
    },
    "213": {
      "op": "==",
      "defined_out": [
        "tmp%1#1"
      ],
      "stack_out": [
        "tmp%1#1"
      ]
    },
    "214": {
      "error": "Wrong Global Bytes allocation",
      "op": "assert // Wrong Global Bytes allocation",
      "stack_out": []
    },
    "215": {
      "op": "txn GlobalNumUint",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "217": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "5"
      ]
    },
    "219": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "220": {
      "error": "Wrong Global UInts allocation",
      "op": "assert // Wrong Global UInts allocation",
      "stack_out": []
    },
    "221": {
      "op": "txn LocalNumByteSlice",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "223": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "224": {
      "error": "Wrong Local Bytes allocation",
      "op": "assert // Wrong Local Bytes allocation",
      "stack_out": []
    },
    "225": {
      "op": "txn LocalNumUint",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "227": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "2"
      ]
    },
    "228": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "229": {
      "error": "Wrong Local UInts allocation",
      "op": "assert // Wrong Local UInts allocation",
      "stack_out": []
    },
    "230": {
      "op": "bytec 8 // \"total\"",
      "defined_out": [
        "\"total\""
      ],
      "stack_out": [
        "\"total\""
      ]
    },
    "232": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"total\"",
        "0"
      ],
      "stack_out": [
        "\"total\"",
        "0"
      ]
    },
    "233": {
      "op": "app_global_put",
      "stack_out": []
    },
    "234": {
      "op": "bytec 10 // \"decimals\"",
      "defined_out": [
        "\"decimals\""
      ],
      "stack_out": [
        "\"decimals\""
      ]
    },
    "236": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"decimals\"",
        "0"
      ]
    },
    "237": {
      "op": "app_global_put",
      "stack_out": []
    },
    "238": {
      "op": "bytec 9 // \"default_frozen\"",
      "defined_out": [
        "\"default_frozen\""
      ],
      "stack_out": [
        "\"default_frozen\""
      ]
    },
    "240": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"default_frozen\"",
        "0"
      ]
    },
    "241": {
      "op": "app_global_put",
      "stack_out": []
    },
    "242": {
      "op": "bytec 11 // \"unit_name\"",
      "defined_out": [
        "\"unit_name\""
      ],
      "stack_out": [
        "\"unit_name\""
      ]
    },
    "244": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "\"unit_name\""
      ],
      "stack_out": [
        "\"unit_name\"",
        "\"\""
      ]
    },
    "246": {
      "op": "app_global_put",
      "stack_out": []
    },
    "247": {
      "op": "bytec 12 // \"name\"",
      "defined_out": [
        "\"name\""
      ],
      "stack_out": [
        "\"name\""
      ]
    },
    "249": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "\"name\"",
        "\"\""
      ]
    },
    "251": {
      "op": "app_global_put",
      "stack_out": []
    },
    "252": {
      "op": "bytec 13 // \"url\"",
      "defined_out": [
        "\"url\""
      ],
      "stack_out": [
        "\"url\""
      ]
    },
    "254": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "\"url\"",
        "\"\""
      ]
    },
    "256": {
      "op": "app_global_put",
      "stack_out": []
    },
    "257": {
      "op": "bytec 14 // \"metadata_hash\"",
      "defined_out": [
        "\"metadata_hash\""
      ],
      "stack_out": [
        "\"metadata_hash\""
      ]
    },
    "259": {
      "op": "pushbytes 0x",
      "defined_out": [
        "\"metadata_hash\"",
        "0x"
      ],
      "stack_out": [
        "\"metadata_hash\"",
        "0x"
      ]
    },
    "261": {
      "op": "app_global_put",
      "stack_out": []
    },
    "262": {
      "op": "bytec 7 // \"manager_addr\"",
      "defined_out": [
        "\"manager_addr\""
      ],
      "stack_out": [
        "\"manager_addr\""
      ]
    },
    "264": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"manager_addr\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"manager_addr\"",
        "new_state_value%0#0"
      ]
    },
    "266": {
      "op": "app_global_put",
      "stack_out": []
    },
    "267": {
      "op": "bytec_1 // \"reserve_addr\"",
      "defined_out": [
        "\"reserve_addr\""
      ],
      "stack_out": [
        "\"reserve_addr\""
      ]
    },
    "268": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"reserve_addr\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"reserve_addr\"",
        "new_state_value%1#0"
      ]
    },
    "270": {
      "op": "app_global_put",
      "stack_out": []
    },
    "271": {
      "op": "bytec 5 // \"freeze_addr\"",
      "defined_out": [
        "\"freeze_addr\""
      ],
      "stack_out": [
        "\"freeze_addr\""
      ]
    },
    "273": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"freeze_addr\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "\"freeze_addr\"",
        "new_state_value%2#0"
      ]
    },
    "275": {
      "op": "app_global_put",
      "stack_out": []
    },
    "276": {
      "op": "bytec_2 // \"clawback_addr\"",
      "defined_out": [
        "\"clawback_addr\""
      ],
      "stack_out": [
        "\"clawback_addr\""
      ]
    },
    "277": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"clawback_addr\"",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "\"clawback_addr\"",
        "new_state_value%3#0"
      ]
    },
    "279": {
      "op": "app_global_put",
      "stack_out": []
    },
    "280": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\""
      ],
      "stack_out": [
        "\"smart_asa_id\""
      ]
    },
    "281": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"smart_asa_id\"",
        "0"
      ]
    },
    "282": {
      "op": "app_global_put",
      "stack_out": []
    },
    "283": {
      "op": "bytec 6 // \"global_frozen\"",
      "defined_out": [
        "\"global_frozen\""
      ],
      "stack_out": [
        "\"global_frozen\""
      ]
    },
    "285": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"global_frozen\"",
        "0"
      ]
    },
    "286": {
      "op": "app_global_put",
      "stack_out": []
    },
    "287": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "289": {
      "op": "bz main_bare_routing@17",
      "stack_out": []
    },
    "292": {
      "op": "pushbytess 0xe7ecd5a8 0x6431365e 0xee6a84aa 0x2fc743a8 0x15cf2ba3 0x7b351ce5 0xe6802826 0x4b17bf20 0xce2f05f3 0x127fb717 0x026f8a9d 0xe97483bf // method \"asset_create(uint64,uint32,bool,string,string,string,byte[],address,address,address,address)uint64\", method \"asset_opt_in(asset,axfer)void\", method \"asset_config(asset,uint64,uint32,bool,string,string,string,byte[],address,address,address,address)void\", method \"asset_transfer(asset,uint64,account,account)void\", method \"asset_freeze(asset,bool)void\", method \"account_freeze(asset,account,bool)void\", method \"asset_close_out(asset,account)void\", method \"asset_destroy(asset)void\", method \"get_asset_config(asset)(uint64,uint32,bool,string,string,string,byte[],address,address,address,address)\", method \"get_asset_is_frozen(asset)bool\", method \"get_account_is_frozen(asset,account)bool\", method \"get_circulating_supply(asset)uint64\"",
      "defined_out": [
        "Method(account_freeze(asset,account,bool)void)",
        "Method(asset_close_out(asset,account)void)",
        "Method(asset_config(asset,uint64,uint32,bool,string,string,string,byte[],address,address,address,address)void)",
        "Method(asset_create(uint64,uint32,bool,string,string,string,byte[],address,address,address,address)uint64)",
        "Method(asset_destroy(asset)void)",
        "Method(asset_freeze(asset,bool)void)",
        "Method(asset_opt_in(asset,axfer)void)",
        "Method(asset_transfer(asset,uint64,account,account)void)",
        "Method(get_account_is_frozen(asset,account)bool)",
        "Method(get_asset_config(asset)(uint64,uint32,bool,string,string,string,byte[],address,address,address,address))",
        "Method(get_asset_is_frozen(asset)bool)",
        "Method(get_circulating_supply(asset)uint64)"
      ],
      "stack_out": [
        "Method(asset_create(uint64,uint32,bool,string,string,string,byte[],address,address,address,address)uint64)",
        "Method(asset_opt_in(asset,axfer)void)",
        "Method(asset_config(asset,uint64,uint32,bool,string,string,string,byte[],address,address,address,address)void)",
        "Method(asset_transfer(asset,uint64,account,account)void)",
        "Method(asset_freeze(asset,bool)void)",
        "Method(account_freeze(asset,account,bool)void)",
        "Method(asset_close_out(asset,account)void)",
        "Method(asset_destroy(asset)void)",
        "Method(get_asset_config(asset)(uint64,uint32,bool,string,string,string,byte[],address,address,address,address))",
        "Method(get_asset_is_frozen(asset)bool)",
        "Method(get_account_is_frozen(asset,account)bool)",
        "Method(get_circulating_supply(asset)uint64)"
      ]
    },
    "354": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(account_freeze(asset,account,bool)void)",
        "Method(asset_close_out(asset,account)void)",
        "Method(asset_config(asset,uint64,uint32,bool,string,string,string,byte[],address,address,address,address)void)",
        "Method(asset_create(uint64,uint32,bool,string,string,string,byte[],address,address,address,address)uint64)",
        "Method(asset_destroy(asset)void)",
        "Method(asset_freeze(asset,bool)void)",
        "Method(asset_opt_in(asset,axfer)void)",
        "Method(asset_transfer(asset,uint64,account,account)void)",
        "Method(get_account_is_frozen(asset,account)bool)",
        "Method(get_asset_config(asset)(uint64,uint32,bool,string,string,string,byte[],address,address,address,address))",
        "Method(get_asset_is_frozen(asset)bool)",
        "Method(get_circulating_supply(asset)uint64)",
        "tmp%2#1"
      ],
      "stack_out": [
        "Method(asset_create(uint64,uint32,bool,string,string,string,byte[],address,address,address,address)uint64)",
        "Method(asset_opt_in(asset,axfer)void)",
        "Method(asset_config(asset,uint64,uint32,bool,string,string,string,byte[],address,address,address,address)void)",
        "Method(asset_transfer(asset,uint64,account,account)void)",
        "Method(asset_freeze(asset,bool)void)",
        "Method(account_freeze(asset,account,bool)void)",
        "Method(asset_close_out(asset,account)void)",
        "Method(asset_destroy(asset)void)",
        "Method(get_asset_config(asset)(uint64,uint32,bool,string,string,string,byte[],address,address,address,address))",
        "Method(get_asset_is_frozen(asset)bool)",
        "Method(get_account_is_frozen(asset,account)bool)",
        "Method(get_circulating_supply(asset)uint64)",
        "tmp%2#1"
      ]
    },
    "357": {
      "op": "match main_asset_create_route@5 main_asset_opt_in_route@6 main_asset_config_route@7 main_asset_transfer_route@8 main_asset_freeze_route@9 main_account_freeze_route@10 main_asset_close_out_route@11 main_asset_destroy_route@12 main_get_asset_config_route@13 main_get_asset_is_frozen_route@14 main_get_account_is_frozen_route@15 main_get_circulating_supply_route@16",
      "stack_out": []
    },
    "383": {
      "block": "main_after_if_else@19",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "384": {
      "op": "return",
      "stack_out": []
    },
    "385": {
      "block": "main_get_circulating_supply_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "387": {
      "op": "!",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "388": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "389": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "391": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "392": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%19#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%19#0"
      ]
    },
    "395": {
      "op": "btoi",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "396": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "398": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.get_circulating_supply",
      "op": "callsub get_circulating_supply",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "401": {
      "op": "bytec 15 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0",
        "0x151f7c75"
      ]
    },
    "403": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%100#0"
      ]
    },
    "404": {
      "op": "concat",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "405": {
      "op": "log",
      "stack_out": []
    },
    "406": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "407": {
      "op": "return",
      "stack_out": []
    },
    "408": {
      "block": "main_get_account_is_frozen_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "410": {
      "op": "!",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "411": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "412": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "414": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "415": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%17#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%17#0"
      ]
    },
    "418": {
      "op": "btoi",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "419": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "421": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%18#0",
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0",
        "reinterpret_bytes[1]%18#0"
      ]
    },
    "424": {
      "op": "btoi",
      "defined_out": [
        "tmp%89#0",
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%89#0",
        "tmp%90#0"
      ]
    },
    "425": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%89#0",
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%89#0",
        "tmp%91#0"
      ]
    },
    "427": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.get_account_is_frozen",
      "op": "callsub get_account_is_frozen",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "430": {
      "op": "bytec 15 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0",
        "0x151f7c75"
      ]
    },
    "432": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%92#0"
      ]
    },
    "433": {
      "op": "concat",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "434": {
      "op": "log",
      "stack_out": []
    },
    "435": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "436": {
      "op": "return",
      "stack_out": []
    },
    "437": {
      "block": "main_get_asset_is_frozen_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "439": {
      "op": "!",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "440": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "441": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "443": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "444": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%16#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%16#0"
      ]
    },
    "447": {
      "op": "btoi",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "448": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "450": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.get_asset_is_frozen",
      "op": "callsub get_asset_is_frozen",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "453": {
      "op": "bytec 15 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0",
        "0x151f7c75"
      ]
    },
    "455": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%82#0"
      ]
    },
    "456": {
      "op": "concat",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "457": {
      "op": "log",
      "stack_out": []
    },
    "458": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "459": {
      "op": "return",
      "stack_out": []
    },
    "460": {
      "block": "main_get_asset_config_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "462": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "463": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "464": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "466": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "467": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%15#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%15#0"
      ]
    },
    "470": {
      "op": "btoi",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "471": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "473": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.get_asset_config",
      "op": "callsub get_asset_config",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "476": {
      "op": "bytec 15 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0",
        "0x151f7c75"
      ]
    },
    "478": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%74#0"
      ]
    },
    "479": {
      "op": "concat",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "480": {
      "op": "log",
      "stack_out": []
    },
    "481": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "482": {
      "op": "return",
      "stack_out": []
    },
    "483": {
      "block": "main_asset_destroy_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "485": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "486": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "487": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "489": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "490": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%14#0"
      ]
    },
    "493": {
      "op": "btoi",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "494": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "496": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.asset_destroy",
      "op": "callsub asset_destroy",
      "stack_out": []
    },
    "499": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "500": {
      "op": "return",
      "stack_out": []
    },
    "501": {
      "block": "main_asset_close_out_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "503": {
      "op": "intc_3 // CloseOut",
      "defined_out": [
        "CloseOut",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0",
        "CloseOut"
      ]
    },
    "504": {
      "op": "==",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "505": {
      "error": "OnCompletion is not CloseOut",
      "op": "assert // OnCompletion is not CloseOut",
      "stack_out": []
    },
    "506": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "508": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "509": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%12#0"
      ]
    },
    "512": {
      "op": "btoi",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "513": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "515": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%13#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "reinterpret_bytes[1]%13#0"
      ]
    },
    "518": {
      "op": "btoi",
      "defined_out": [
        "tmp%59#0",
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%60#0"
      ]
    },
    "519": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%59#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%59#0",
        "tmp%61#0"
      ]
    },
    "521": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.asset_close_out",
      "op": "callsub asset_close_out",
      "stack_out": []
    },
    "524": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "525": {
      "op": "return",
      "stack_out": []
    },
    "526": {
      "block": "main_account_freeze_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "528": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "529": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "530": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "532": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "533": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%9#0"
      ]
    },
    "536": {
      "op": "btoi",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "537": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "539": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%10#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "reinterpret_bytes[1]%10#0"
      ]
    },
    "542": {
      "op": "btoi",
      "defined_out": [
        "tmp%51#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "tmp%52#0"
      ]
    },
    "543": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%51#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "tmp%53#0"
      ]
    },
    "545": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%11#0",
        "tmp%51#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%51#0",
        "tmp%53#0",
        "reinterpret_bytes[1]%11#0"
      ]
    },
    "548": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.account_freeze",
      "op": "callsub account_freeze",
      "stack_out": []
    },
    "551": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "552": {
      "op": "return",
      "stack_out": []
    },
    "553": {
      "block": "main_asset_freeze_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "555": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "556": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "557": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "559": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "560": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "563": {
      "op": "btoi",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "564": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "566": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%8#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0",
        "reinterpret_bytes[1]%8#0"
      ]
    },
    "569": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.asset_freeze",
      "op": "callsub asset_freeze",
      "stack_out": []
    },
    "572": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "573": {
      "op": "return",
      "stack_out": []
    },
    "574": {
      "block": "main_asset_transfer_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "576": {
      "op": "!",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "577": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "578": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "580": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "581": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "584": {
      "op": "btoi",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "585": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "587": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "590": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%5#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "reinterpret_bytes[8]%2#0",
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "593": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%36#0"
      ]
    },
    "594": {
      "op": "txnas Accounts",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%35#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%37#0"
      ]
    },
    "596": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[1]%6#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%35#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%37#0",
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "599": {
      "op": "btoi",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "600": {
      "op": "txnas Accounts",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%35#0",
        "reinterpret_bytes[8]%2#0",
        "tmp%37#0",
        "tmp%39#0"
      ]
    },
    "602": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.asset_transfer",
      "op": "callsub asset_transfer",
      "stack_out": []
    },
    "605": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "606": {
      "op": "return",
      "stack_out": []
    },
    "607": {
      "block": "main_asset_config_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "609": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "610": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "611": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "613": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "614": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "617": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "618": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "620": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "623": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[8]%1#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[4]%1#0"
      ]
    },
    "626": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[8]%1#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "629": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[8]%1#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[1]%3#0",
        "tmp%26#0"
      ]
    },
    "632": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[8]%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[1]%3#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "635": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[8]%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[1]%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "638": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[8]%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[1]%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "641": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[8]%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[1]%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "reinterpret_bytes[32]%4#0"
      ]
    },
    "644": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[8]%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[1]%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0"
      ]
    },
    "647": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[8]%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[1]%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0"
      ]
    },
    "650": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[8]%1#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "reinterpret_bytes[8]%1#0",
        "reinterpret_bytes[4]%1#0",
        "reinterpret_bytes[1]%3#0",
        "tmp%26#0",
        "tmp%27#0",
        "tmp%28#0",
        "tmp%29#0",
        "reinterpret_bytes[32]%4#0",
        "reinterpret_bytes[32]%5#0",
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0"
      ]
    },
    "653": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.asset_config",
      "op": "callsub asset_config",
      "stack_out": []
    },
    "656": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "657": {
      "op": "return",
      "stack_out": []
    },
    "658": {
      "block": "main_asset_opt_in_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "660": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "OptIn"
      ]
    },
    "661": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "662": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "663": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "665": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "666": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "669": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "670": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "672": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "674": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0",
        "1"
      ]
    },
    "675": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "gtxn_idx%0#0"
      ]
    },
    "676": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "677": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "679": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "680": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "681": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%18#0",
        "gtxn_idx%0#0"
      ]
    },
    "682": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.asset_opt_in",
      "op": "callsub asset_opt_in",
      "stack_out": []
    },
    "685": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "686": {
      "op": "return",
      "stack_out": []
    },
    "687": {
      "block": "main_asset_create_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "689": {
      "op": "!",
      "defined_out": [
        "tmp%4#1"
      ],
      "stack_out": [
        "tmp%4#1"
      ]
    },
    "690": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "691": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#1"
      ],
      "stack_out": [
        "tmp%5#1"
      ]
    },
    "693": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "694": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "697": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[4]%0#0"
      ]
    },
    "700": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "703": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%7#1"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[1]%0#0",
        "tmp%7#1"
      ]
    },
    "706": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%7#1",
        "tmp%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[1]%0#0",
        "tmp%7#1",
        "tmp%8#0"
      ]
    },
    "709": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%7#1",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[1]%0#0",
        "tmp%7#1",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "712": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%10#0",
        "tmp%7#1",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[1]%0#0",
        "tmp%7#1",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "715": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%10#0",
        "tmp%7#1",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[1]%0#0",
        "tmp%7#1",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "718": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%10#0",
        "tmp%7#1",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[1]%0#0",
        "tmp%7#1",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "721": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%10#0",
        "tmp%7#1",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[1]%0#0",
        "tmp%7#1",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "724": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%10#0",
        "tmp%7#1",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0",
        "reinterpret_bytes[4]%0#0",
        "reinterpret_bytes[1]%0#0",
        "tmp%7#1",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "727": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.asset_create",
      "op": "callsub asset_create",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "730": {
      "op": "bytec 15 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "0x151f7c75"
      ]
    },
    "732": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%11#0"
      ]
    },
    "733": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "734": {
      "op": "log",
      "stack_out": []
    },
    "735": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "736": {
      "op": "return",
      "stack_out": []
    },
    "737": {
      "block": "main_bare_routing@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "739": {
      "op": "bnz main_after_if_else@19",
      "stack_out": []
    },
    "742": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "744": {
      "op": "!",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "745": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "746": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "747": {
      "op": "return",
      "stack_out": []
    },
    "748": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.circulating_supply",
      "params": {
        "ctrl_asset#0": "uint64"
      },
      "block": "circulating_supply",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "751": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "753": {
      "op": "frame_dig -1",
      "defined_out": [
        "ctrl_asset#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "ctrl_asset#0 (copy)"
      ]
    },
    "755": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "757": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "758": {
      "op": "intc 4 // 18446744073709551615",
      "defined_out": [
        "18446744073709551615",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "18446744073709551615"
      ]
    },
    "760": {
      "op": "swap",
      "stack_out": [
        "18446744073709551615",
        "value%0#0"
      ]
    },
    "761": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "762": {
      "retsub": true,
      "op": "retsub"
    },
    "763": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "params": {
        "asset_id#0": "uint64"
      },
      "block": "assert_common_preconditions",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "766": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "767": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"smart_asa_id\""
      ]
    },
    "768": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "769": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "770": {
      "error": "Missing Controlled ASA",
      "op": "assert // Missing Controlled ASA",
      "stack_out": []
    },
    "771": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "772": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "stack_out": [
        "0",
        "\"smart_asa_id\""
      ]
    },
    "773": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "774": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "775": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_id#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "asset_id#0 (copy)"
      ]
    },
    "777": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "778": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": []
    },
    "779": {
      "retsub": true,
      "op": "retsub"
    },
    "780": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.inner_asset_transfer",
      "params": {
        "xfer_asset#0": "uint64",
        "asset_amount#0": "uint64",
        "asset_sender#0": "bytes",
        "asset_receiver#0": "bytes"
      },
      "block": "inner_asset_transfer",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "783": {
      "op": "itxn_begin"
    },
    "784": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "786": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "788": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_receiver#0 (copy)"
      ],
      "stack_out": [
        "asset_receiver#0 (copy)"
      ]
    },
    "790": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "792": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)"
      ]
    },
    "794": {
      "op": "itxn_field AssetSender",
      "stack_out": []
    },
    "796": {
      "op": "frame_dig -3",
      "defined_out": [
        "asset_amount#0 (copy)"
      ],
      "stack_out": [
        "asset_amount#0 (copy)"
      ]
    },
    "798": {
      "op": "itxn_field AssetAmount",
      "stack_out": []
    },
    "800": {
      "op": "frame_dig -4",
      "defined_out": [
        "xfer_asset#0 (copy)"
      ],
      "stack_out": [
        "xfer_asset#0 (copy)"
      ]
    },
    "802": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "804": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "805": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "807": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "808": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "810": {
      "op": "itxn_submit"
    },
    "811": {
      "retsub": true,
      "op": "retsub"
    },
    "812": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.asset_create",
      "params": {
        "total#0": "bytes",
        "decimals#0": "bytes",
        "default_frozen#0": "bytes",
        "unit_name#0": "bytes",
        "name#0": "bytes",
        "url#0": "bytes",
        "metadata_hash#0": "bytes",
        "manager_addr#0": "bytes",
        "reserve_addr#0": "bytes",
        "freeze_addr#0": "bytes",
        "clawback_addr#0": "bytes"
      },
      "block": "asset_create",
      "stack_in": [],
      "op": "proto 11 1"
    },
    "815": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "817": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "819": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "820": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "821": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "822": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"smart_asa_id\""
      ]
    },
    "823": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "824": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "825": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "826": {
      "error": "Controlled ASA already created",
      "op": "assert // Controlled ASA already created",
      "stack_out": []
    },
    "827": {
      "op": "itxn_begin"
    },
    "828": {
      "op": "global CurrentApplicationID"
    },
    "830": {
      "op": "pushbytes 0x",
      "defined_out": [
        "acc#0",
        "n#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "832": {
      "block": "asset_create_while_top@2",
      "stack_in": [
        "n#0",
        "acc#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "n#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "n#0"
      ]
    },
    "834": {
      "op": "bz asset_create_after_while@4",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "837": {
      "op": "frame_dig 0",
      "stack_out": [
        "n#0",
        "acc#0",
        "n#0"
      ]
    },
    "839": {
      "op": "dup",
      "defined_out": [
        "n#0",
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "n#0",
        "n#0 (copy)"
      ]
    },
    "840": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "n#0",
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "n#0",
        "n#0 (copy)",
        "10"
      ]
    },
    "842": {
      "op": "%",
      "defined_out": [
        "n#0",
        "tmp%1#2"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "n#0",
        "tmp%1#2"
      ]
    },
    "843": {
      "op": "pushbytes 0x30313233343536373839",
      "defined_out": [
        "0x30313233343536373839",
        "n#0",
        "tmp%1#2"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "n#0",
        "tmp%1#2",
        "0x30313233343536373839"
      ]
    },
    "855": {
      "op": "swap",
      "stack_out": [
        "n#0",
        "acc#0",
        "n#0",
        "0x30313233343536373839",
        "tmp%1#2"
      ]
    },
    "856": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0x30313233343536373839",
        "1",
        "n#0",
        "tmp%1#2"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "n#0",
        "0x30313233343536373839",
        "tmp%1#2",
        "1"
      ]
    },
    "857": {
      "op": "extract3",
      "defined_out": [
        "n#0",
        "tmp%2#2"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "n#0",
        "tmp%2#2"
      ]
    },
    "858": {
      "op": "frame_dig 1",
      "defined_out": [
        "acc#0",
        "n#0",
        "tmp%2#2"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "n#0",
        "tmp%2#2",
        "acc#0"
      ]
    },
    "860": {
      "op": "concat",
      "stack_out": [
        "n#0",
        "acc#0",
        "n#0",
        "acc#0"
      ]
    },
    "861": {
      "op": "frame_bury 1",
      "defined_out": [
        "acc#0",
        "n#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "n#0"
      ]
    },
    "863": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "n#0",
        "acc#0",
        "n#0",
        "10"
      ]
    },
    "865": {
      "op": "/",
      "stack_out": [
        "n#0",
        "acc#0",
        "n#0"
      ]
    },
    "866": {
      "op": "frame_bury 0",
      "defined_out": [
        "acc#0",
        "n#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "868": {
      "op": "b asset_create_while_top@2"
    },
    "871": {
      "block": "asset_create_after_while@4",
      "stack_in": [
        "n#0",
        "acc#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "acc#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "acc#0"
      ]
    },
    "873": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "acc#0 (copy)"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "acc#0",
        "acc#0 (copy)"
      ]
    },
    "874": {
      "op": "len",
      "defined_out": [
        "acc#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "acc#0",
        "tmp%3#1"
      ]
    },
    "875": {
      "op": "pushbytes 0x30",
      "defined_out": [
        "0x30",
        "acc#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "acc#0",
        "tmp%3#1",
        "0x30"
      ]
    },
    "878": {
      "op": "cover 2",
      "stack_out": [
        "n#0",
        "acc#0",
        "0x30",
        "acc#0",
        "tmp%3#1"
      ]
    },
    "880": {
      "op": "select",
      "defined_out": [
        "acc#0",
        "select%0#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "select%0#0"
      ]
    },
    "881": {
      "op": "pushbytes 0x616c676f72616e643a2f2f6170702f",
      "defined_out": [
        "0x616c676f72616e643a2f2f6170702f",
        "acc#0",
        "select%0#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "select%0#0",
        "0x616c676f72616e643a2f2f6170702f"
      ]
    },
    "898": {
      "op": "swap",
      "stack_out": [
        "n#0",
        "acc#0",
        "0x616c676f72616e643a2f2f6170702f",
        "select%0#0"
      ]
    },
    "899": {
      "op": "concat",
      "defined_out": [
        "acc#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0"
      ]
    },
    "900": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "acc#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "902": {
      "op": "dupn 3",
      "defined_out": [
        "acc#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "904": {
      "op": "itxn_field ConfigAssetClawback",
      "stack_out": [
        "n#0",
        "acc#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0"
      ]
    },
    "906": {
      "op": "itxn_field ConfigAssetFreeze",
      "stack_out": [
        "n#0",
        "acc#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "908": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "n#0",
        "acc#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "910": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "n#0",
        "acc#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0"
      ]
    },
    "912": {
      "op": "itxn_field ConfigAssetURL",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "914": {
      "op": "pushbytes \"ARC-20 Smart ASA\"",
      "defined_out": [
        "\"ARC-20 Smart ASA\"",
        "acc#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "\"ARC-20 Smart ASA\""
      ]
    },
    "932": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "934": {
      "op": "pushbytes \"ARC-20\"",
      "defined_out": [
        "\"ARC-20\"",
        "acc#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "\"ARC-20\""
      ]
    },
    "942": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "944": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "acc#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "1"
      ]
    },
    "945": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "947": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "acc#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "0"
      ]
    },
    "948": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "950": {
      "op": "intc 4 // 18446744073709551615",
      "defined_out": [
        "18446744073709551615",
        "acc#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "18446744073709551615"
      ]
    },
    "952": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "954": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acc#0",
        "acfg"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "acfg"
      ]
    },
    "956": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "958": {
      "op": "intc_0 // 0",
      "stack_out": [
        "n#0",
        "acc#0",
        "0"
      ]
    },
    "959": {
      "op": "itxn_field Fee",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "961": {
      "op": "itxn_submit"
    },
    "962": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "acc#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "\"smart_asa_id\""
      ]
    },
    "963": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "\"smart_asa_id\"",
        "acc#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "\"smart_asa_id\"",
        "tmp%2#1"
      ]
    },
    "965": {
      "op": "app_global_put",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "966": {
      "op": "frame_dig -11",
      "defined_out": [
        "acc#0",
        "total#0 (copy)"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "total#0 (copy)"
      ]
    },
    "968": {
      "op": "btoi",
      "defined_out": [
        "acc#0",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "new_state_value%1#0"
      ]
    },
    "969": {
      "op": "bytec 8 // \"total\"",
      "defined_out": [
        "\"total\"",
        "acc#0",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "new_state_value%1#0",
        "\"total\""
      ]
    },
    "971": {
      "op": "swap",
      "stack_out": [
        "n#0",
        "acc#0",
        "\"total\"",
        "new_state_value%1#0"
      ]
    },
    "972": {
      "op": "app_global_put",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "973": {
      "op": "frame_dig -10",
      "defined_out": [
        "acc#0",
        "decimals#0 (copy)"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "decimals#0 (copy)"
      ]
    },
    "975": {
      "op": "btoi",
      "defined_out": [
        "acc#0",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "new_state_value%2#0"
      ]
    },
    "976": {
      "op": "bytec 10 // \"decimals\"",
      "defined_out": [
        "\"decimals\"",
        "acc#0",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "new_state_value%2#0",
        "\"decimals\""
      ]
    },
    "978": {
      "op": "swap",
      "stack_out": [
        "n#0",
        "acc#0",
        "\"decimals\"",
        "new_state_value%2#0"
      ]
    },
    "979": {
      "op": "app_global_put",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "980": {
      "op": "frame_dig -9",
      "defined_out": [
        "acc#0",
        "default_frozen#0 (copy)"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "default_frozen#0 (copy)"
      ]
    },
    "982": {
      "op": "intc_0 // 0",
      "stack_out": [
        "n#0",
        "acc#0",
        "default_frozen#0 (copy)",
        "0"
      ]
    },
    "983": {
      "op": "getbit",
      "defined_out": [
        "acc#0",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "new_state_value%3#0"
      ]
    },
    "984": {
      "op": "bytec 9 // \"default_frozen\"",
      "defined_out": [
        "\"default_frozen\"",
        "acc#0",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "new_state_value%3#0",
        "\"default_frozen\""
      ]
    },
    "986": {
      "op": "swap",
      "stack_out": [
        "n#0",
        "acc#0",
        "\"default_frozen\"",
        "new_state_value%3#0"
      ]
    },
    "987": {
      "op": "app_global_put",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "988": {
      "op": "frame_dig -8",
      "defined_out": [
        "acc#0",
        "unit_name#0 (copy)"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "unit_name#0 (copy)"
      ]
    },
    "990": {
      "op": "extract 2 0",
      "defined_out": [
        "acc#0",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "new_state_value%4#0"
      ]
    },
    "993": {
      "op": "bytec 11 // \"unit_name\"",
      "defined_out": [
        "\"unit_name\"",
        "acc#0",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "new_state_value%4#0",
        "\"unit_name\""
      ]
    },
    "995": {
      "op": "swap",
      "stack_out": [
        "n#0",
        "acc#0",
        "\"unit_name\"",
        "new_state_value%4#0"
      ]
    },
    "996": {
      "op": "app_global_put",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "997": {
      "op": "frame_dig -7",
      "defined_out": [
        "acc#0",
        "name#0 (copy)"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "name#0 (copy)"
      ]
    },
    "999": {
      "op": "extract 2 0",
      "defined_out": [
        "acc#0",
        "new_state_value%5#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "new_state_value%5#0"
      ]
    },
    "1002": {
      "op": "bytec 12 // \"name\"",
      "defined_out": [
        "\"name\"",
        "acc#0",
        "new_state_value%5#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "new_state_value%5#0",
        "\"name\""
      ]
    },
    "1004": {
      "op": "swap",
      "stack_out": [
        "n#0",
        "acc#0",
        "\"name\"",
        "new_state_value%5#0"
      ]
    },
    "1005": {
      "op": "app_global_put",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "1006": {
      "op": "frame_dig -6",
      "defined_out": [
        "acc#0",
        "url#0 (copy)"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "url#0 (copy)"
      ]
    },
    "1008": {
      "op": "extract 2 0",
      "defined_out": [
        "acc#0",
        "new_state_value%6#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "new_state_value%6#0"
      ]
    },
    "1011": {
      "op": "bytec 13 // \"url\"",
      "defined_out": [
        "\"url\"",
        "acc#0",
        "new_state_value%6#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "new_state_value%6#0",
        "\"url\""
      ]
    },
    "1013": {
      "op": "swap",
      "stack_out": [
        "n#0",
        "acc#0",
        "\"url\"",
        "new_state_value%6#0"
      ]
    },
    "1014": {
      "op": "app_global_put",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "1015": {
      "op": "frame_dig -5",
      "defined_out": [
        "acc#0",
        "metadata_hash#0 (copy)"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "metadata_hash#0 (copy)"
      ]
    },
    "1017": {
      "op": "extract 2 0",
      "defined_out": [
        "acc#0",
        "new_state_value%7#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "new_state_value%7#0"
      ]
    },
    "1020": {
      "op": "bytec 14 // \"metadata_hash\"",
      "defined_out": [
        "\"metadata_hash\"",
        "acc#0",
        "new_state_value%7#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "new_state_value%7#0",
        "\"metadata_hash\""
      ]
    },
    "1022": {
      "op": "swap",
      "stack_out": [
        "n#0",
        "acc#0",
        "\"metadata_hash\"",
        "new_state_value%7#0"
      ]
    },
    "1023": {
      "op": "app_global_put",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "1024": {
      "op": "bytec 7 // \"manager_addr\"",
      "defined_out": [
        "\"manager_addr\"",
        "acc#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "\"manager_addr\""
      ]
    },
    "1026": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"manager_addr\"",
        "acc#0",
        "manager_addr#0 (copy)"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "\"manager_addr\"",
        "manager_addr#0 (copy)"
      ]
    },
    "1028": {
      "op": "app_global_put",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "1029": {
      "op": "bytec_1 // \"reserve_addr\"",
      "defined_out": [
        "\"reserve_addr\"",
        "acc#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "\"reserve_addr\""
      ]
    },
    "1030": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"reserve_addr\"",
        "acc#0",
        "reserve_addr#0 (copy)"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "\"reserve_addr\"",
        "reserve_addr#0 (copy)"
      ]
    },
    "1032": {
      "op": "app_global_put",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "1033": {
      "op": "bytec 5 // \"freeze_addr\"",
      "defined_out": [
        "\"freeze_addr\"",
        "acc#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "\"freeze_addr\""
      ]
    },
    "1035": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"freeze_addr\"",
        "acc#0",
        "freeze_addr#0 (copy)"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "\"freeze_addr\"",
        "freeze_addr#0 (copy)"
      ]
    },
    "1037": {
      "op": "app_global_put",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "1038": {
      "op": "bytec_2 // \"clawback_addr\"",
      "defined_out": [
        "\"clawback_addr\"",
        "acc#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "\"clawback_addr\""
      ]
    },
    "1039": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"clawback_addr\"",
        "acc#0",
        "clawback_addr#0 (copy)"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "\"clawback_addr\"",
        "clawback_addr#0 (copy)"
      ]
    },
    "1041": {
      "op": "app_global_put",
      "stack_out": [
        "n#0",
        "acc#0"
      ]
    },
    "1042": {
      "op": "intc_0 // 0",
      "stack_out": [
        "n#0",
        "acc#0",
        "0"
      ]
    },
    "1043": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "stack_out": [
        "n#0",
        "acc#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1044": {
      "op": "app_global_get_ex",
      "defined_out": [
        "acc#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1045": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "n#0",
        "acc#0",
        "maybe_value%1#0"
      ]
    },
    "1046": {
      "op": "itob",
      "defined_out": [
        "acc#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "n#0",
        "acc#0",
        "val_as_bytes%0#0"
      ]
    },
    "1047": {
      "op": "frame_bury 0"
    },
    "1049": {
      "retsub": true,
      "op": "retsub"
    },
    "1050": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.asset_opt_in",
      "params": {
        "asset#0": "uint64",
        "ctrl_asa_opt_in#0": "uint64"
      },
      "block": "asset_opt_in",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1053": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "1055": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "1058": {
      "op": "frame_dig -1",
      "defined_out": [
        "ctrl_asa_opt_in#0 (copy)"
      ],
      "stack_out": [
        "ctrl_asa_opt_in#0 (copy)"
      ]
    },
    "1060": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1062": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "axfer"
      ]
    },
    "1063": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1064": {
      "error": "Wrong ASA Opt In txn type",
      "op": "assert // Wrong ASA Opt In txn type",
      "stack_out": []
    },
    "1065": {
      "op": "frame_dig -1",
      "stack_out": [
        "ctrl_asa_opt_in#0 (copy)"
      ]
    },
    "1067": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1069": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "1070": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1071": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1072": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "1073": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1074": {
      "error": "Wrong ASA Opt In ID",
      "op": "assert // Wrong ASA Opt In ID",
      "stack_out": []
    },
    "1075": {
      "op": "frame_dig -1",
      "stack_out": [
        "ctrl_asa_opt_in#0 (copy)"
      ]
    },
    "1077": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1079": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1081": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1082": {
      "error": "Wrong ASA Opt In Sender",
      "op": "assert // Wrong ASA Opt In Sender",
      "stack_out": []
    },
    "1083": {
      "op": "frame_dig -1",
      "stack_out": [
        "ctrl_asa_opt_in#0 (copy)"
      ]
    },
    "1085": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1087": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1089": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1090": {
      "error": "Wrong ASA Opt In Receiver",
      "op": "assert // Wrong ASA Opt In Receiver",
      "stack_out": []
    },
    "1091": {
      "op": "frame_dig -1",
      "stack_out": [
        "ctrl_asa_opt_in#0 (copy)"
      ]
    },
    "1093": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1095": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1096": {
      "error": "Wrong ASA Opt In Amount",
      "op": "assert // Wrong ASA Opt In Amount",
      "stack_out": []
    },
    "1097": {
      "op": "frame_dig -1",
      "stack_out": [
        "ctrl_asa_opt_in#0 (copy)"
      ]
    },
    "1099": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1101": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "1103": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1104": {
      "error": "Forbidden Close Out on Opt In",
      "op": "assert // Forbidden Close Out on Opt In",
      "stack_out": []
    },
    "1105": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1107": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "OptIn"
      ]
    },
    "1108": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1109": {
      "error": "Wrong On Complete Action",
      "op": "assert // Wrong On Complete Action",
      "stack_out": []
    },
    "1110": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1112": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%17#0",
        "asset#0 (copy)"
      ]
    },
    "1114": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1116": {
      "op": "bury 1",
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1118": {
      "error": "Missing Controlled ASA",
      "op": "assert // Missing Controlled ASA",
      "stack_out": []
    },
    "1119": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1120": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "stack_out": [
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1121": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1122": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1123": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%20#0"
      ]
    },
    "1125": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "defined_out": [
        "\"account_smart_asa_id\"",
        "maybe_value%1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%20#0",
        "\"account_smart_asa_id\""
      ]
    },
    "1126": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%20#0",
        "\"account_smart_asa_id\"",
        "maybe_value%1#0"
      ]
    },
    "1128": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1129": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1131": {
      "op": "bytec 4 // \"account_frozen\"",
      "defined_out": [
        "\"account_frozen\"",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "\"account_frozen\""
      ]
    },
    "1133": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%21#0",
        "\"account_frozen\"",
        "0"
      ]
    },
    "1134": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1135": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1136": {
      "op": "bytec 9 // \"default_frozen\"",
      "defined_out": [
        "\"default_frozen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"default_frozen\""
      ]
    },
    "1138": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1139": {
      "error": "check self.default_frozen exists",
      "op": "assert // check self.default_frozen exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1140": {
      "op": "bnz asset_opt_in_if_body@2",
      "stack_out": []
    },
    "1143": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1145": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%22#0",
        "asset#0 (copy)"
      ]
    },
    "1147": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1149": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1150": {
      "op": "bz asset_opt_in_after_if_else@3",
      "stack_out": []
    },
    "1153": {
      "block": "asset_opt_in_if_body@2",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1155": {
      "op": "bytec 4 // \"account_frozen\"",
      "defined_out": [
        "\"account_frozen\"",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "\"account_frozen\""
      ]
    },
    "1157": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"account_frozen\"",
        "1",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "\"account_frozen\"",
        "1"
      ]
    },
    "1158": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1159": {
      "block": "asset_opt_in_after_if_else@3",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "1160": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.asset_config",
      "params": {
        "config_asset#0": "uint64",
        "total#0": "bytes",
        "decimals#0": "bytes",
        "default_frozen#0": "bytes",
        "unit_name#0": "bytes",
        "name#0": "bytes",
        "url#0": "bytes",
        "metadata_hash#0": "bytes",
        "manager_addr#0": "bytes",
        "reserve_addr#0": "bytes",
        "freeze_addr#0": "bytes",
        "clawback_addr#0": "bytes"
      },
      "block": "asset_config",
      "stack_in": [],
      "op": "proto 12 0"
    },
    "1163": {
      "op": "frame_dig -12",
      "defined_out": [
        "config_asset#0 (copy)"
      ],
      "stack_out": [
        "config_asset#0 (copy)"
      ]
    },
    "1165": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "1168": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1170": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1171": {
      "op": "bytec 7 // \"manager_addr\"",
      "defined_out": [
        "\"manager_addr\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"manager_addr\""
      ]
    },
    "1173": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1174": {
      "error": "check self.manager_addr exists",
      "op": "assert // check self.manager_addr exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1175": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1176": {
      "error": "Unauthorized Manager",
      "op": "assert // Unauthorized Manager",
      "stack_out": []
    },
    "1177": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1178": {
      "op": "bytec_1 // \"reserve_addr\"",
      "defined_out": [
        "\"reserve_addr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"reserve_addr\""
      ]
    },
    "1179": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1180": {
      "error": "check self.reserve_addr exists",
      "op": "assert // check self.reserve_addr exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1181": {
      "op": "frame_dig -3",
      "defined_out": [
        "maybe_value%1#0",
        "reserve_addr#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "reserve_addr#0 (copy)"
      ]
    },
    "1183": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1184": {
      "op": "bz asset_config_after_if_else@2",
      "stack_out": []
    },
    "1187": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1188": {
      "op": "bytec_1 // \"reserve_addr\"",
      "stack_out": [
        "0",
        "\"reserve_addr\""
      ]
    },
    "1189": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1190": {
      "error": "check self.reserve_addr exists",
      "op": "assert // check self.reserve_addr exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1191": {
      "op": "global ZeroAddress",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "tmp%3#0"
      ]
    },
    "1193": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1194": {
      "error": "Reserve Address has been deleted",
      "op": "assert // Reserve Address has been deleted",
      "stack_out": []
    },
    "1195": {
      "block": "asset_config_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1196": {
      "op": "bytec 5 // \"freeze_addr\"",
      "defined_out": [
        "\"freeze_addr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"freeze_addr\""
      ]
    },
    "1198": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1199": {
      "error": "check self.freeze_addr exists",
      "op": "assert // check self.freeze_addr exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1200": {
      "op": "frame_dig -2",
      "defined_out": [
        "freeze_addr#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "freeze_addr#0 (copy)"
      ]
    },
    "1202": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1203": {
      "op": "bz asset_config_after_if_else@4",
      "stack_out": []
    },
    "1206": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1207": {
      "op": "bytec 5 // \"freeze_addr\"",
      "stack_out": [
        "0",
        "\"freeze_addr\""
      ]
    },
    "1209": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1210": {
      "error": "check self.freeze_addr exists",
      "op": "assert // check self.freeze_addr exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "1211": {
      "op": "global ZeroAddress",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "tmp%6#0"
      ]
    },
    "1213": {
      "op": "!=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1214": {
      "error": "Freeze Address has been deleted",
      "op": "assert // Freeze Address has been deleted",
      "stack_out": []
    },
    "1215": {
      "block": "asset_config_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1216": {
      "op": "bytec_2 // \"clawback_addr\"",
      "defined_out": [
        "\"clawback_addr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"clawback_addr\""
      ]
    },
    "1217": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1218": {
      "error": "check self.clawback_addr exists",
      "op": "assert // check self.clawback_addr exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "1219": {
      "op": "frame_dig -1",
      "defined_out": [
        "clawback_addr#0 (copy)",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "clawback_addr#0 (copy)"
      ]
    },
    "1221": {
      "op": "!=",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1222": {
      "op": "bz asset_config_after_if_else@6",
      "stack_out": []
    },
    "1225": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1226": {
      "op": "bytec_2 // \"clawback_addr\"",
      "stack_out": [
        "0",
        "\"clawback_addr\""
      ]
    },
    "1227": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1228": {
      "error": "check self.clawback_addr exists",
      "op": "assert // check self.clawback_addr exists",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "1229": {
      "op": "global ZeroAddress",
      "defined_out": [
        "maybe_value%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "tmp%9#0"
      ]
    },
    "1231": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1232": {
      "error": "Clawback Address has been deleted",
      "op": "assert // Clawback Address has been deleted",
      "stack_out": []
    },
    "1233": {
      "block": "asset_config_after_if_else@6",
      "stack_in": [],
      "op": "frame_dig -12",
      "defined_out": [
        "config_asset#0 (copy)"
      ],
      "stack_out": [
        "config_asset#0 (copy)"
      ]
    },
    "1235": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.circulating_supply",
      "op": "callsub circulating_supply",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1238": {
      "op": "itob",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1239": {
      "op": "frame_dig -11",
      "defined_out": [
        "tmp%12#0",
        "total#0 (copy)"
      ],
      "stack_out": [
        "tmp%12#0",
        "total#0 (copy)"
      ]
    },
    "1241": {
      "op": "b<=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1242": {
      "error": "Invalid Total, must be >= circulating supply",
      "op": "assert // Invalid Total, must be >= circulating supply",
      "stack_out": []
    },
    "1243": {
      "op": "frame_dig -11",
      "stack_out": [
        "total#0 (copy)"
      ]
    },
    "1245": {
      "op": "btoi",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1246": {
      "op": "bytec 8 // \"total\"",
      "defined_out": [
        "\"total\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"total\""
      ]
    },
    "1248": {
      "op": "swap",
      "stack_out": [
        "\"total\"",
        "new_state_value%0#0"
      ]
    },
    "1249": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1250": {
      "op": "frame_dig -10",
      "defined_out": [
        "decimals#0 (copy)"
      ],
      "stack_out": [
        "decimals#0 (copy)"
      ]
    },
    "1252": {
      "op": "btoi",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "1253": {
      "op": "bytec 10 // \"decimals\"",
      "defined_out": [
        "\"decimals\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"decimals\""
      ]
    },
    "1255": {
      "op": "swap",
      "stack_out": [
        "\"decimals\"",
        "new_state_value%1#0"
      ]
    },
    "1256": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1257": {
      "op": "frame_dig -9",
      "defined_out": [
        "default_frozen#0 (copy)"
      ],
      "stack_out": [
        "default_frozen#0 (copy)"
      ]
    },
    "1259": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "default_frozen#0 (copy)"
      ],
      "stack_out": [
        "default_frozen#0 (copy)",
        "0"
      ]
    },
    "1260": {
      "op": "getbit",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "1261": {
      "op": "bytec 9 // \"default_frozen\"",
      "defined_out": [
        "\"default_frozen\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0",
        "\"default_frozen\""
      ]
    },
    "1263": {
      "op": "swap",
      "stack_out": [
        "\"default_frozen\"",
        "new_state_value%2#0"
      ]
    },
    "1264": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1265": {
      "op": "frame_dig -8",
      "defined_out": [
        "unit_name#0 (copy)"
      ],
      "stack_out": [
        "unit_name#0 (copy)"
      ]
    },
    "1267": {
      "op": "extract 2 0",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0"
      ]
    },
    "1270": {
      "op": "bytec 11 // \"unit_name\"",
      "defined_out": [
        "\"unit_name\"",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0",
        "\"unit_name\""
      ]
    },
    "1272": {
      "op": "swap",
      "stack_out": [
        "\"unit_name\"",
        "new_state_value%3#0"
      ]
    },
    "1273": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1274": {
      "op": "frame_dig -7",
      "defined_out": [
        "name#0 (copy)"
      ],
      "stack_out": [
        "name#0 (copy)"
      ]
    },
    "1276": {
      "op": "extract 2 0",
      "defined_out": [
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0"
      ]
    },
    "1279": {
      "op": "bytec 12 // \"name\"",
      "defined_out": [
        "\"name\"",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0",
        "\"name\""
      ]
    },
    "1281": {
      "op": "swap",
      "stack_out": [
        "\"name\"",
        "new_state_value%4#0"
      ]
    },
    "1282": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1283": {
      "op": "frame_dig -6",
      "defined_out": [
        "url#0 (copy)"
      ],
      "stack_out": [
        "url#0 (copy)"
      ]
    },
    "1285": {
      "op": "extract 2 0",
      "defined_out": [
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0"
      ]
    },
    "1288": {
      "op": "bytec 13 // \"url\"",
      "defined_out": [
        "\"url\"",
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0",
        "\"url\""
      ]
    },
    "1290": {
      "op": "swap",
      "stack_out": [
        "\"url\"",
        "new_state_value%5#0"
      ]
    },
    "1291": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1292": {
      "op": "frame_dig -5",
      "defined_out": [
        "metadata_hash#0 (copy)"
      ],
      "stack_out": [
        "metadata_hash#0 (copy)"
      ]
    },
    "1294": {
      "op": "extract 2 0",
      "defined_out": [
        "new_state_value%6#0"
      ],
      "stack_out": [
        "new_state_value%6#0"
      ]
    },
    "1297": {
      "op": "bytec 14 // \"metadata_hash\"",
      "defined_out": [
        "\"metadata_hash\"",
        "new_state_value%6#0"
      ],
      "stack_out": [
        "new_state_value%6#0",
        "\"metadata_hash\""
      ]
    },
    "1299": {
      "op": "swap",
      "stack_out": [
        "\"metadata_hash\"",
        "new_state_value%6#0"
      ]
    },
    "1300": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1301": {
      "op": "bytec 7 // \"manager_addr\"",
      "defined_out": [
        "\"manager_addr\""
      ],
      "stack_out": [
        "\"manager_addr\""
      ]
    },
    "1303": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"manager_addr\"",
        "manager_addr#0 (copy)"
      ],
      "stack_out": [
        "\"manager_addr\"",
        "manager_addr#0 (copy)"
      ]
    },
    "1305": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1306": {
      "op": "bytec_1 // \"reserve_addr\"",
      "defined_out": [
        "\"reserve_addr\""
      ],
      "stack_out": [
        "\"reserve_addr\""
      ]
    },
    "1307": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"reserve_addr\"",
        "reserve_addr#0 (copy)"
      ],
      "stack_out": [
        "\"reserve_addr\"",
        "reserve_addr#0 (copy)"
      ]
    },
    "1309": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1310": {
      "op": "bytec 5 // \"freeze_addr\"",
      "defined_out": [
        "\"freeze_addr\""
      ],
      "stack_out": [
        "\"freeze_addr\""
      ]
    },
    "1312": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"freeze_addr\"",
        "freeze_addr#0 (copy)"
      ],
      "stack_out": [
        "\"freeze_addr\"",
        "freeze_addr#0 (copy)"
      ]
    },
    "1314": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1315": {
      "op": "bytec_2 // \"clawback_addr\"",
      "defined_out": [
        "\"clawback_addr\""
      ],
      "stack_out": [
        "\"clawback_addr\""
      ]
    },
    "1316": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"clawback_addr\"",
        "clawback_addr#0 (copy)"
      ],
      "stack_out": [
        "\"clawback_addr\"",
        "clawback_addr#0 (copy)"
      ]
    },
    "1318": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1319": {
      "retsub": true,
      "op": "retsub"
    },
    "1320": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.asset_transfer",
      "params": {
        "xfer_asset#0": "uint64",
        "asset_amount#0": "bytes",
        "asset_sender#0": "bytes",
        "asset_receiver#0": "bytes"
      },
      "block": "asset_transfer",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "1323": {
      "op": "frame_dig -4",
      "defined_out": [
        "xfer_asset#0 (copy)"
      ],
      "stack_out": [
        "xfer_asset#0 (copy)"
      ]
    },
    "1325": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "1328": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)"
      ]
    },
    "1330": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset_sender#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "asset_sender#0 (copy)",
        "tmp%0#0"
      ]
    },
    "1332": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1333": {
      "op": "bz asset_transfer_else_body@2",
      "stack_out": []
    },
    "1336": {
      "op": "frame_dig -3",
      "defined_out": [
        "asset_amount#0 (copy)"
      ],
      "stack_out": [
        "asset_amount#0 (copy)"
      ]
    },
    "1338": {
      "op": "btoi",
      "defined_out": [
        "asset_amount#1"
      ],
      "stack_out": [
        "asset_amount#1"
      ]
    },
    "1339": {
      "op": "txn Sender",
      "stack_out": [
        "asset_amount#1",
        "tmp%0#0"
      ]
    },
    "1341": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset_amount#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "asset_amount#1",
        "tmp%0#0",
        "0"
      ]
    },
    "1342": {
      "op": "bytec_1 // \"reserve_addr\"",
      "defined_out": [
        "\"reserve_addr\"",
        "0",
        "asset_amount#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "asset_amount#1",
        "tmp%0#0",
        "0",
        "\"reserve_addr\""
      ]
    },
    "1343": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset_amount#1",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "asset_amount#1",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1344": {
      "error": "check self.reserve_addr exists",
      "op": "assert // check self.reserve_addr exists",
      "stack_out": [
        "asset_amount#1",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1345": {
      "op": "==",
      "stack_out": [
        "asset_amount#1",
        "tmp%1#0"
      ]
    },
    "1346": {
      "error": "Unauthorized Reserve",
      "op": "assert // Unauthorized Reserve",
      "stack_out": [
        "asset_amount#1"
      ]
    },
    "1347": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_amount#1",
        "asset_receiver#0 (copy)"
      ],
      "stack_out": [
        "asset_amount#1",
        "asset_receiver#0 (copy)"
      ]
    },
    "1349": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset_amount#1",
        "asset_receiver#0 (copy)",
        "tmp%2#3"
      ],
      "stack_out": [
        "asset_amount#1",
        "asset_receiver#0 (copy)",
        "tmp%2#3"
      ]
    },
    "1351": {
      "op": "!=",
      "defined_out": [
        "asset_amount#1",
        "tmp%3#1"
      ],
      "stack_out": [
        "asset_amount#1",
        "tmp%3#1"
      ]
    },
    "1352": {
      "error": "Forbidden self minting",
      "op": "assert // Forbidden self minting",
      "stack_out": [
        "asset_amount#1"
      ]
    },
    "1353": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_amount#1",
        "0"
      ]
    },
    "1354": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0",
        "asset_amount#1"
      ],
      "stack_out": [
        "asset_amount#1",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1355": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset_amount#1",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "asset_amount#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1356": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "asset_amount#1",
        "maybe_value%1#0"
      ]
    },
    "1357": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.circulating_supply",
      "op": "callsub circulating_supply",
      "defined_out": [
        "asset_amount#1",
        "tmp%4#3"
      ],
      "stack_out": [
        "asset_amount#1",
        "tmp%4#3"
      ]
    },
    "1360": {
      "op": "+",
      "defined_out": [
        "tmp%5#3"
      ],
      "stack_out": [
        "tmp%5#3"
      ]
    },
    "1361": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#3",
        "0"
      ]
    },
    "1362": {
      "op": "bytec 8 // \"total\"",
      "defined_out": [
        "\"total\"",
        "0",
        "tmp%5#3"
      ],
      "stack_out": [
        "tmp%5#3",
        "0",
        "\"total\""
      ]
    },
    "1364": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#3"
      ],
      "stack_out": [
        "tmp%5#3",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1365": {
      "error": "check self.total exists",
      "op": "assert // check self.total exists",
      "stack_out": [
        "tmp%5#3",
        "maybe_value%2#0"
      ]
    },
    "1366": {
      "op": "<=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1367": {
      "error": "Forbidden over minting",
      "op": "assert // Forbidden over minting",
      "stack_out": []
    },
    "1368": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset_receiver#0 (copy)"
      ]
    },
    "1370": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0"
      ]
    },
    "1371": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "defined_out": [
        "\"account_smart_asa_id\"",
        "0",
        "asset_receiver#0 (copy)"
      ],
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1372": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1373": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1374": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "0"
      ]
    },
    "1375": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "stack_out": [
        "maybe_value%3#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1376": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#2"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#2",
        "maybe_exists%4#0"
      ]
    },
    "1377": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#2"
      ]
    },
    "1378": {
      "op": "==",
      "defined_out": [
        "tmp%7#1"
      ],
      "stack_out": [
        "tmp%7#1"
      ]
    },
    "1379": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": []
    },
    "1380": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1381": {
      "op": "bytec 6 // \"global_frozen\"",
      "defined_out": [
        "\"global_frozen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_frozen\""
      ]
    },
    "1383": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1384": {
      "error": "check self.global_frozen exists",
      "op": "assert // check self.global_frozen exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "1385": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1386": {
      "error": "Smart ASA is global frozen",
      "op": "assert // Smart ASA is global frozen",
      "stack_out": []
    },
    "1387": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1388": {
      "op": "bytec_1 // \"reserve_addr\"",
      "stack_out": [
        "0",
        "\"reserve_addr\""
      ]
    },
    "1389": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#2"
      ],
      "stack_out": [
        "maybe_value%6#2",
        "maybe_exists%6#0"
      ]
    },
    "1390": {
      "error": "check self.reserve_addr exists",
      "op": "assert // check self.reserve_addr exists",
      "stack_out": [
        "maybe_value%6#2"
      ]
    },
    "1391": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%6#2",
        "0"
      ]
    },
    "1392": {
      "op": "bytec_2 // \"clawback_addr\"",
      "defined_out": [
        "\"clawback_addr\"",
        "0",
        "maybe_value%6#2"
      ],
      "stack_out": [
        "maybe_value%6#2",
        "0",
        "\"clawback_addr\""
      ]
    },
    "1393": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%6#2",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "maybe_value%6#2",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1394": {
      "error": "check self.clawback_addr exists",
      "op": "assert // check self.clawback_addr exists",
      "stack_out": [
        "maybe_value%6#2",
        "maybe_value%7#0"
      ]
    },
    "1395": {
      "op": "!=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1396": {
      "op": "bz asset_transfer_after_if_else@9",
      "stack_out": []
    },
    "1399": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset_receiver#0 (copy)"
      ]
    },
    "1401": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0"
      ]
    },
    "1402": {
      "op": "bytec 4 // \"account_frozen\"",
      "defined_out": [
        "\"account_frozen\"",
        "0",
        "asset_receiver#0 (copy)"
      ],
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0",
        "\"account_frozen\""
      ]
    },
    "1404": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "1405": {
      "error": "check self.account_frozen exists for account",
      "op": "assert // check self.account_frozen exists for account",
      "stack_out": [
        "maybe_value%8#0"
      ]
    },
    "1406": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1407": {
      "error": "Receiver account is frozen",
      "op": "assert // Receiver account is frozen",
      "stack_out": []
    },
    "1408": {
      "block": "asset_transfer_after_if_else@9",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "asset_amount#0 (copy)"
      ],
      "stack_out": [
        "asset_amount#0 (copy)"
      ]
    },
    "1410": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1411": {
      "op": "frame_dig -4",
      "defined_out": [
        "tmp%7#0",
        "xfer_asset#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "xfer_asset#0 (copy)"
      ]
    },
    "1413": {
      "op": "swap",
      "stack_out": [
        "xfer_asset#0 (copy)",
        "tmp%7#0"
      ]
    },
    "1414": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_sender#0 (copy)",
        "tmp%7#0",
        "xfer_asset#0 (copy)"
      ],
      "stack_out": [
        "xfer_asset#0 (copy)",
        "tmp%7#0",
        "asset_sender#0 (copy)"
      ]
    },
    "1416": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_receiver#0 (copy)",
        "asset_sender#0 (copy)",
        "tmp%7#0",
        "xfer_asset#0 (copy)"
      ],
      "stack_out": [
        "xfer_asset#0 (copy)",
        "tmp%7#0",
        "asset_sender#0 (copy)",
        "asset_receiver#0 (copy)"
      ]
    },
    "1418": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.inner_asset_transfer",
      "op": "callsub inner_asset_transfer",
      "stack_out": []
    },
    "1421": {
      "retsub": true,
      "op": "retsub"
    },
    "1422": {
      "block": "asset_transfer_else_body@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "asset_receiver#0 (copy)"
      ],
      "stack_out": [
        "asset_receiver#0 (copy)"
      ]
    },
    "1424": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset_receiver#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "asset_receiver#0 (copy)",
        "tmp%3#0"
      ]
    },
    "1426": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1427": {
      "op": "bz asset_transfer_else_body@4",
      "stack_out": []
    },
    "1430": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1432": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1433": {
      "op": "bytec_1 // \"reserve_addr\"",
      "defined_out": [
        "\"reserve_addr\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"reserve_addr\""
      ]
    },
    "1434": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1435": {
      "error": "check self.reserve_addr exists",
      "op": "assert // check self.reserve_addr exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1436": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1437": {
      "error": "Unauthorized Reserve",
      "op": "assert // Unauthorized Reserve",
      "stack_out": []
    },
    "1438": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)"
      ]
    },
    "1440": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_sender#0 (copy)",
        "0"
      ]
    },
    "1441": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "defined_out": [
        "\"account_smart_asa_id\"",
        "0",
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1442": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1443": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1444": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "1445": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1446": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1447": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1448": {
      "op": "==",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "1449": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": []
    },
    "1450": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1451": {
      "op": "bytec 6 // \"global_frozen\"",
      "defined_out": [
        "\"global_frozen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_frozen\""
      ]
    },
    "1453": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#2"
      ],
      "stack_out": [
        "maybe_value%3#2",
        "maybe_exists%3#0"
      ]
    },
    "1454": {
      "error": "check self.global_frozen exists",
      "op": "assert // check self.global_frozen exists",
      "stack_out": [
        "maybe_value%3#2"
      ]
    },
    "1455": {
      "op": "!",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "1456": {
      "error": "Smart ASA is global frozen",
      "op": "assert // Smart ASA is global frozen",
      "stack_out": []
    },
    "1457": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1458": {
      "op": "bytec_1 // \"reserve_addr\"",
      "stack_out": [
        "0",
        "\"reserve_addr\""
      ]
    },
    "1459": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#1"
      ],
      "stack_out": [
        "maybe_value%4#1",
        "maybe_exists%4#0"
      ]
    },
    "1460": {
      "error": "check self.reserve_addr exists",
      "op": "assert // check self.reserve_addr exists",
      "stack_out": [
        "maybe_value%4#1"
      ]
    },
    "1461": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%4#1",
        "0"
      ]
    },
    "1462": {
      "op": "bytec_2 // \"clawback_addr\"",
      "defined_out": [
        "\"clawback_addr\"",
        "0",
        "maybe_value%4#1"
      ],
      "stack_out": [
        "maybe_value%4#1",
        "0",
        "\"clawback_addr\""
      ]
    },
    "1463": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%4#1",
        "maybe_value%5#1"
      ],
      "stack_out": [
        "maybe_value%4#1",
        "maybe_value%5#1",
        "maybe_exists%5#0"
      ]
    },
    "1464": {
      "error": "check self.clawback_addr exists",
      "op": "assert // check self.clawback_addr exists",
      "stack_out": [
        "maybe_value%4#1",
        "maybe_value%5#1"
      ]
    },
    "1465": {
      "op": "!=",
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1466": {
      "op": "bz asset_transfer_after_if_else@9",
      "stack_out": []
    },
    "1469": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset_sender#0 (copy)"
      ]
    },
    "1471": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_sender#0 (copy)",
        "0"
      ]
    },
    "1472": {
      "op": "bytec 4 // \"account_frozen\"",
      "defined_out": [
        "\"account_frozen\"",
        "0",
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)",
        "0",
        "\"account_frozen\""
      ]
    },
    "1474": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1475": {
      "error": "check self.account_frozen exists for account",
      "op": "assert // check self.account_frozen exists for account",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "1476": {
      "op": "!",
      "defined_out": [
        "tmp%5#1"
      ],
      "stack_out": [
        "tmp%5#1"
      ]
    },
    "1477": {
      "error": "Sender account is frozen",
      "op": "assert // Sender account is frozen",
      "stack_out": []
    },
    "1478": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1479": {
      "op": "bytec_1 // \"reserve_addr\"",
      "stack_out": [
        "0",
        "\"reserve_addr\""
      ]
    },
    "1480": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1481": {
      "error": "check self.reserve_addr exists",
      "op": "assert // check self.reserve_addr exists",
      "stack_out": [
        "maybe_value%7#0"
      ]
    },
    "1482": {
      "op": "frame_dig -2",
      "stack_out": [
        "maybe_value%7#0",
        "asset_sender#0 (copy)"
      ]
    },
    "1484": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1485": {
      "error": "Forbidden clawback burning",
      "op": "assert // Forbidden clawback burning",
      "stack_out": []
    },
    "1486": {
      "op": "b asset_transfer_after_if_else@9"
    },
    "1489": {
      "block": "asset_transfer_else_body@4",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1491": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1492": {
      "op": "bytec_2 // \"clawback_addr\"",
      "defined_out": [
        "\"clawback_addr\"",
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"clawback_addr\""
      ]
    },
    "1493": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1494": {
      "error": "check self.clawback_addr exists",
      "op": "assert // check self.clawback_addr exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%0#0"
      ]
    },
    "1495": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1496": {
      "op": "bz asset_transfer_else_body@6",
      "stack_out": []
    },
    "1499": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)"
      ]
    },
    "1501": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_sender#0 (copy)",
        "0"
      ]
    },
    "1502": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "defined_out": [
        "\"account_smart_asa_id\"",
        "0",
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1503": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1504": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "maybe_value%0#1"
      ]
    },
    "1505": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#1",
        "0"
      ]
    },
    "1506": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1507": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1508": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%0#1",
        "maybe_value%1#0"
      ]
    },
    "1509": {
      "op": "==",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "1510": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": []
    },
    "1511": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_receiver#0 (copy)"
      ],
      "stack_out": [
        "asset_receiver#0 (copy)"
      ]
    },
    "1513": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0"
      ]
    },
    "1514": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1515": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1516": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1517": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "1518": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1519": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1520": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "1521": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1522": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": []
    },
    "1523": {
      "op": "b asset_transfer_after_if_else@9"
    },
    "1526": {
      "block": "asset_transfer_else_body@6",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1528": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_sender#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "asset_sender#0 (copy)"
      ]
    },
    "1530": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1531": {
      "error": "Unauthorized Clawback",
      "op": "assert // Unauthorized Clawback",
      "stack_out": []
    },
    "1532": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset_sender#0 (copy)"
      ]
    },
    "1534": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)",
        "0"
      ]
    },
    "1535": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "defined_out": [
        "\"account_smart_asa_id\"",
        "0",
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1536": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1537": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "maybe_value%0#1"
      ]
    },
    "1538": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#1",
        "0"
      ]
    },
    "1539": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1540": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#1",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#1",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1541": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%0#1",
        "maybe_value%1#0"
      ]
    },
    "1542": {
      "op": "==",
      "defined_out": [
        "tmp%2#1"
      ],
      "stack_out": [
        "tmp%2#1"
      ]
    },
    "1543": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": []
    },
    "1544": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_receiver#0 (copy)"
      ],
      "stack_out": [
        "asset_receiver#0 (copy)"
      ]
    },
    "1546": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0"
      ]
    },
    "1547": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1548": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1549": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1550": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "1551": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1552": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1553": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "1554": {
      "op": "==",
      "defined_out": [
        "tmp%3#1"
      ],
      "stack_out": [
        "tmp%3#1"
      ]
    },
    "1555": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": []
    },
    "1556": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1557": {
      "op": "bytec 6 // \"global_frozen\"",
      "defined_out": [
        "\"global_frozen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_frozen\""
      ]
    },
    "1559": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1560": {
      "error": "check self.global_frozen exists",
      "op": "assert // check self.global_frozen exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "1561": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1562": {
      "error": "Smart ASA is global frozen",
      "op": "assert // Smart ASA is global frozen",
      "stack_out": []
    },
    "1563": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset_sender#0 (copy)"
      ]
    },
    "1565": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_sender#0 (copy)",
        "0"
      ]
    },
    "1566": {
      "op": "bytec 4 // \"account_frozen\"",
      "defined_out": [
        "\"account_frozen\"",
        "0",
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)",
        "0",
        "\"account_frozen\""
      ]
    },
    "1568": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1569": {
      "error": "check self.account_frozen exists for account",
      "op": "assert // check self.account_frozen exists for account",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "1570": {
      "op": "!",
      "defined_out": [
        "tmp%5#1"
      ],
      "stack_out": [
        "tmp%5#1"
      ]
    },
    "1571": {
      "error": "Sender account is frozen",
      "op": "assert // Sender account is frozen",
      "stack_out": []
    },
    "1572": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset_receiver#0 (copy)"
      ]
    },
    "1574": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0"
      ]
    },
    "1575": {
      "op": "bytec 4 // \"account_frozen\"",
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0",
        "\"account_frozen\""
      ]
    },
    "1577": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1578": {
      "error": "check self.account_frozen exists for account",
      "op": "assert // check self.account_frozen exists for account",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "1579": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1580": {
      "error": "Receiver account is frozen",
      "op": "assert // Receiver account is frozen",
      "stack_out": []
    },
    "1581": {
      "op": "b asset_transfer_after_if_else@9"
    },
    "1584": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.asset_freeze",
      "params": {
        "freeze_asset#0": "uint64",
        "asset_frozen#0": "bytes"
      },
      "block": "asset_freeze",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1587": {
      "op": "frame_dig -2",
      "defined_out": [
        "freeze_asset#0 (copy)"
      ],
      "stack_out": [
        "freeze_asset#0 (copy)"
      ]
    },
    "1589": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "1592": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1594": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1595": {
      "op": "bytec 5 // \"freeze_addr\"",
      "defined_out": [
        "\"freeze_addr\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"freeze_addr\""
      ]
    },
    "1597": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1598": {
      "error": "check self.freeze_addr exists",
      "op": "assert // check self.freeze_addr exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1599": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1600": {
      "error": "Unauthorized Freeze",
      "op": "assert // Unauthorized Freeze",
      "stack_out": []
    },
    "1601": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_frozen#0 (copy)"
      ],
      "stack_out": [
        "asset_frozen#0 (copy)"
      ]
    },
    "1603": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_frozen#0 (copy)",
        "0"
      ]
    },
    "1604": {
      "op": "getbit",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1605": {
      "op": "bytec 6 // \"global_frozen\"",
      "defined_out": [
        "\"global_frozen\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"global_frozen\""
      ]
    },
    "1607": {
      "op": "swap",
      "stack_out": [
        "\"global_frozen\"",
        "new_state_value%0#0"
      ]
    },
    "1608": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1609": {
      "retsub": true,
      "op": "retsub"
    },
    "1610": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.account_freeze",
      "params": {
        "freeze_asset#0": "uint64",
        "freeze_account#0": "bytes",
        "asset_frozen#0": "bytes"
      },
      "block": "account_freeze",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1613": {
      "op": "frame_dig -3",
      "defined_out": [
        "freeze_asset#0 (copy)"
      ],
      "stack_out": [
        "freeze_asset#0 (copy)"
      ]
    },
    "1615": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "1618": {
      "op": "frame_dig -2",
      "defined_out": [
        "freeze_account#0 (copy)"
      ],
      "stack_out": [
        "freeze_account#0 (copy)"
      ]
    },
    "1620": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "freeze_account#0 (copy)"
      ],
      "stack_out": [
        "freeze_account#0 (copy)",
        "0"
      ]
    },
    "1621": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "defined_out": [
        "\"account_smart_asa_id\"",
        "0",
        "freeze_account#0 (copy)"
      ],
      "stack_out": [
        "freeze_account#0 (copy)",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1622": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1623": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1624": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "1625": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1626": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1627": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1628": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1629": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": []
    },
    "1630": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1632": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "1633": {
      "op": "bytec 5 // \"freeze_addr\"",
      "defined_out": [
        "\"freeze_addr\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"freeze_addr\""
      ]
    },
    "1635": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1636": {
      "error": "check self.freeze_addr exists",
      "op": "assert // check self.freeze_addr exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%2#0"
      ]
    },
    "1637": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1638": {
      "error": "Unauthorized Freeze",
      "op": "assert // Unauthorized Freeze",
      "stack_out": []
    },
    "1639": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_frozen#0 (copy)"
      ],
      "stack_out": [
        "asset_frozen#0 (copy)"
      ]
    },
    "1641": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_frozen#0 (copy)",
        "0"
      ]
    },
    "1642": {
      "op": "getbit",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1643": {
      "op": "frame_dig -2",
      "stack_out": [
        "new_state_value%0#0",
        "freeze_account#0 (copy)"
      ]
    },
    "1645": {
      "op": "bytec 4 // \"account_frozen\"",
      "defined_out": [
        "\"account_frozen\"",
        "freeze_account#0 (copy)",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "freeze_account#0 (copy)",
        "\"account_frozen\""
      ]
    },
    "1647": {
      "op": "uncover 2",
      "stack_out": [
        "freeze_account#0 (copy)",
        "\"account_frozen\"",
        "new_state_value%0#0"
      ]
    },
    "1649": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1650": {
      "retsub": true,
      "op": "retsub"
    },
    "1651": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.asset_close_out",
      "params": {
        "close_asset#0": "uint64",
        "close_to#0": "bytes"
      },
      "block": "asset_close_out",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1654": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "1656": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2",
        "1"
      ]
    },
    "1657": {
      "op": "+",
      "defined_out": [
        "asa_close_out_relative_idx#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1658": {
      "op": "dup",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "asa_close_out_relative_idx#0 (copy)"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "asa_close_out_relative_idx#0 (copy)"
      ]
    },
    "1659": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "gtxn_type%0#0"
      ]
    },
    "1661": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "axfer",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "1662": {
      "op": "==",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1663": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1664": {
      "op": "txn OnCompletion",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%1#3"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%1#3"
      ]
    },
    "1666": {
      "op": "intc_3 // CloseOut",
      "defined_out": [
        "CloseOut",
        "asa_close_out_relative_idx#0",
        "tmp%1#3"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%1#3",
        "CloseOut"
      ]
    },
    "1667": {
      "op": "==",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%2#1"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%2#1"
      ]
    },
    "1668": {
      "error": "Wrong On Complete Action",
      "op": "assert // Wrong On Complete Action",
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1669": {
      "op": "txn Sender",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%3#0"
      ]
    },
    "1671": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asa_close_out_relative_idx#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%3#0",
        "0"
      ]
    },
    "1672": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "defined_out": [
        "\"account_smart_asa_id\"",
        "0",
        "asa_close_out_relative_idx#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%3#0",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1673": {
      "op": "app_local_get_ex",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1674": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "maybe_value%0#0"
      ]
    },
    "1675": {
      "op": "frame_dig -2",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "close_asset#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "maybe_value%0#0",
        "close_asset#0 (copy)"
      ]
    },
    "1677": {
      "op": "==",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%4#0"
      ]
    },
    "1678": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1679": {
      "op": "global GroupSize",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%5#0"
      ]
    },
    "1681": {
      "op": "dig 1",
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%5#0",
        "asa_close_out_relative_idx#0 (copy)"
      ]
    },
    "1683": {
      "op": ">",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%6#0"
      ]
    },
    "1684": {
      "error": "Invalid Close Out group size",
      "op": "assert // Invalid Close Out group size",
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1685": {
      "op": "dup",
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "asa_close_out_relative_idx#0 (copy)"
      ]
    },
    "1686": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%9#0"
      ]
    },
    "1688": {
      "op": "frame_dig -2",
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%9#0",
        "close_asset#0 (copy)"
      ]
    },
    "1690": {
      "op": "==",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%10#0"
      ]
    },
    "1691": {
      "error": "Wrong ASA Close Out ID",
      "op": "assert // Wrong ASA Close Out ID",
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1692": {
      "op": "dup",
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "asa_close_out_relative_idx#0 (copy)"
      ]
    },
    "1693": {
      "op": "gtxns Sender",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%11#0"
      ]
    },
    "1695": {
      "op": "txn Sender",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "1697": {
      "op": "==",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%13#0"
      ]
    },
    "1698": {
      "error": "Wrong ASA Close Out Sender",
      "op": "assert // Wrong ASA Close Out Sender",
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1699": {
      "op": "dup",
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "asa_close_out_relative_idx#0 (copy)"
      ]
    },
    "1700": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%14#0"
      ]
    },
    "1702": {
      "op": "!",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%15#0"
      ]
    },
    "1703": {
      "error": "Wrong ASA Close Out Amount",
      "op": "assert // Wrong ASA Close Out Amount",
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1704": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1706": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1708": {
      "op": "!=",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1709": {
      "error": "Wrong Close Out on Close Out",
      "op": "assert // Wrong Close Out on Close Out",
      "stack_out": []
    },
    "1710": {
      "op": "frame_dig -2",
      "stack_out": [
        "close_asset#0 (copy)"
      ]
    },
    "1712": {
      "op": "asset_params_get AssetCreator",
      "defined_out": [
        "creator#0",
        "exists#0"
      ],
      "stack_out": [
        "creator#0",
        "exists#0"
      ]
    },
    "1714": {
      "op": "bz asset_close_out_after_if_else@4",
      "stack_out": [
        "creator#0"
      ]
    },
    "1717": {
      "op": "txn GroupIndex",
      "stack_out": [
        "creator#0",
        "tmp%0#2"
      ]
    },
    "1719": {
      "op": "intc_1 // 1",
      "stack_out": [
        "creator#0",
        "tmp%0#2",
        "1"
      ]
    },
    "1720": {
      "op": "+",
      "stack_out": [
        "creator#0",
        "asa_close_out_relative_idx#0"
      ]
    },
    "1721": {
      "op": "dup",
      "stack_out": [
        "creator#0",
        "asa_close_out_relative_idx#0",
        "asa_close_out_relative_idx#0 (copy)"
      ]
    },
    "1722": {
      "op": "gtxns TypeEnum",
      "stack_out": [
        "creator#0",
        "asa_close_out_relative_idx#0",
        "gtxn_type%0#0"
      ]
    },
    "1724": {
      "op": "intc_2 // axfer",
      "stack_out": [
        "creator#0",
        "asa_close_out_relative_idx#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "1725": {
      "op": "==",
      "stack_out": [
        "creator#0",
        "asa_close_out_relative_idx#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1726": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "creator#0",
        "asa_close_out_relative_idx#0"
      ]
    },
    "1727": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "creator#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "creator#0",
        "tmp%1#1"
      ]
    },
    "1729": {
      "op": "frame_dig 0",
      "stack_out": [
        "creator#0",
        "tmp%1#1",
        "creator#0"
      ]
    },
    "1731": {
      "op": "dup",
      "defined_out": [
        "creator#0",
        "creator#0 (copy)",
        "tmp%1#1"
      ],
      "stack_out": [
        "creator#0",
        "tmp%1#1",
        "creator#0 (copy)",
        "creator#0 (copy)"
      ]
    },
    "1732": {
      "op": "cover 2",
      "stack_out": [
        "creator#0",
        "creator#0",
        "tmp%1#1",
        "creator#0 (copy)"
      ]
    },
    "1734": {
      "op": "==",
      "stack_out": [
        "creator#0",
        "creator#0",
        "tmp%2#1"
      ]
    },
    "1735": {
      "error": "Wrong Close Out on Close Out",
      "op": "assert // Wrong Close Out on Close Out",
      "stack_out": [
        "creator#0",
        "creator#0"
      ]
    },
    "1736": {
      "op": "intc_0 // 0",
      "stack_out": [
        "creator#0",
        "creator#0",
        "0"
      ]
    },
    "1737": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0",
        "creator#0"
      ],
      "stack_out": [
        "creator#0",
        "creator#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1738": {
      "op": "app_global_get_ex",
      "stack_out": [
        "creator#0",
        "creator#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1739": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "creator#0",
        "creator#0",
        "maybe_value%0#0"
      ]
    },
    "1740": {
      "op": "frame_dig -2",
      "stack_out": [
        "creator#0",
        "creator#0",
        "maybe_value%0#0",
        "close_asset#0 (copy)"
      ]
    },
    "1742": {
      "op": "==",
      "defined_out": [
        "creator#0",
        "tmp%3#1"
      ],
      "stack_out": [
        "creator#0",
        "creator#0",
        "tmp%3#1"
      ]
    },
    "1743": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": [
        "creator#0",
        "creator#0"
      ]
    },
    "1744": {
      "op": "frame_dig -1",
      "defined_out": [
        "close_to#0 (copy)",
        "creator#0"
      ],
      "stack_out": [
        "creator#0",
        "creator#0",
        "close_to#0 (copy)"
      ]
    },
    "1746": {
      "op": "!=",
      "defined_out": [
        "creator#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "creator#0",
        "tmp%0#0"
      ]
    },
    "1747": {
      "op": "bz asset_close_out_after_if_else@3",
      "stack_out": [
        "creator#0"
      ]
    },
    "1750": {
      "op": "frame_dig -1",
      "stack_out": [
        "creator#0",
        "close_to#0 (copy)"
      ]
    },
    "1752": {
      "op": "intc_0 // 0",
      "stack_out": [
        "creator#0",
        "close_to#0 (copy)",
        "0"
      ]
    },
    "1753": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "stack_out": [
        "creator#0",
        "close_to#0 (copy)",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1754": {
      "op": "app_local_get_ex",
      "stack_out": [
        "creator#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1755": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "creator#0",
        "maybe_value%0#0"
      ]
    },
    "1756": {
      "op": "intc_0 // 0",
      "stack_out": [
        "creator#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "1757": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "stack_out": [
        "creator#0",
        "maybe_value%0#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1758": {
      "op": "app_global_get_ex",
      "defined_out": [
        "creator#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "creator#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1759": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "creator#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1760": {
      "op": "==",
      "defined_out": [
        "creator#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "creator#0",
        "tmp%1#0"
      ]
    },
    "1761": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": [
        "creator#0"
      ]
    },
    "1762": {
      "op": "intc_0 // 0",
      "stack_out": [
        "creator#0",
        "0"
      ]
    },
    "1763": {
      "op": "bytec 6 // \"global_frozen\"",
      "defined_out": [
        "\"global_frozen\"",
        "0",
        "creator#0"
      ],
      "stack_out": [
        "creator#0",
        "0",
        "\"global_frozen\""
      ]
    },
    "1765": {
      "op": "app_global_get_ex",
      "defined_out": [
        "creator#0",
        "maybe_exists%0#0",
        "maybe_value%0#1"
      ],
      "stack_out": [
        "creator#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "1766": {
      "error": "check self.global_frozen exists",
      "op": "assert // check self.global_frozen exists",
      "stack_out": [
        "creator#0",
        "maybe_value%0#1"
      ]
    },
    "1767": {
      "op": "!",
      "stack_out": [
        "creator#0",
        "tmp%0#0"
      ]
    },
    "1768": {
      "error": "Smart ASA is global frozen",
      "op": "assert // Smart ASA is global frozen",
      "stack_out": [
        "creator#0"
      ]
    },
    "1769": {
      "op": "txn Sender",
      "stack_out": [
        "creator#0",
        "tmp%1#1"
      ]
    },
    "1771": {
      "op": "intc_0 // 0",
      "stack_out": [
        "creator#0",
        "tmp%1#1",
        "0"
      ]
    },
    "1772": {
      "op": "bytec 4 // \"account_frozen\"",
      "defined_out": [
        "\"account_frozen\"",
        "0",
        "creator#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "creator#0",
        "tmp%1#1",
        "0",
        "\"account_frozen\""
      ]
    },
    "1774": {
      "op": "app_local_get_ex",
      "defined_out": [
        "creator#0",
        "maybe_exists%1#0",
        "maybe_value%1#1"
      ],
      "stack_out": [
        "creator#0",
        "maybe_value%1#1",
        "maybe_exists%1#0"
      ]
    },
    "1775": {
      "error": "check self.account_frozen exists for account",
      "op": "assert // check self.account_frozen exists for account",
      "stack_out": [
        "creator#0",
        "maybe_value%1#1"
      ]
    },
    "1776": {
      "op": "!",
      "stack_out": [
        "creator#0",
        "tmp%2#1"
      ]
    },
    "1777": {
      "error": "Sender account is frozen",
      "op": "assert // Sender account is frozen",
      "stack_out": [
        "creator#0"
      ]
    },
    "1778": {
      "op": "frame_dig -1",
      "stack_out": [
        "creator#0",
        "close_to#0 (copy)"
      ]
    },
    "1780": {
      "op": "intc_0 // 0",
      "stack_out": [
        "creator#0",
        "close_to#0 (copy)",
        "0"
      ]
    },
    "1781": {
      "op": "bytec 4 // \"account_frozen\"",
      "stack_out": [
        "creator#0",
        "close_to#0 (copy)",
        "0",
        "\"account_frozen\""
      ]
    },
    "1783": {
      "op": "app_local_get_ex",
      "defined_out": [
        "creator#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "creator#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1784": {
      "error": "check self.account_frozen exists for account",
      "op": "assert // check self.account_frozen exists for account",
      "stack_out": [
        "creator#0",
        "maybe_value%2#0"
      ]
    },
    "1785": {
      "op": "!",
      "stack_out": [
        "creator#0",
        "tmp%3#1"
      ]
    },
    "1786": {
      "error": "Close to account is frozen",
      "op": "assert // Close to account is frozen",
      "stack_out": [
        "creator#0"
      ]
    },
    "1787": {
      "block": "asset_close_out_after_if_else@3",
      "stack_in": [
        "creator#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "creator#0",
        "tmp%2#0"
      ]
    },
    "1789": {
      "op": "frame_dig -2",
      "defined_out": [
        "close_asset#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "creator#0",
        "tmp%2#0",
        "close_asset#0 (copy)"
      ]
    },
    "1791": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "creator#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "1793": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "creator#0",
        "value%0#0"
      ]
    },
    "1794": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0",
        "value%0#0"
      ],
      "stack_out": [
        "creator#0",
        "value%0#0",
        "tmp%3#0"
      ]
    },
    "1796": {
      "op": "frame_dig -2",
      "stack_out": [
        "creator#0",
        "value%0#0",
        "tmp%3#0",
        "close_asset#0 (copy)"
      ]
    },
    "1798": {
      "op": "cover 2",
      "stack_out": [
        "creator#0",
        "close_asset#0 (copy)",
        "value%0#0",
        "tmp%3#0"
      ]
    },
    "1800": {
      "op": "frame_dig -1",
      "defined_out": [
        "close_asset#0 (copy)",
        "close_to#0 (copy)",
        "tmp%3#0",
        "value%0#0"
      ],
      "stack_out": [
        "creator#0",
        "close_asset#0 (copy)",
        "value%0#0",
        "tmp%3#0",
        "close_to#0 (copy)"
      ]
    },
    "1802": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.inner_asset_transfer",
      "op": "callsub inner_asset_transfer",
      "stack_out": [
        "creator#0"
      ]
    },
    "1805": {
      "block": "asset_close_out_after_if_else@4",
      "stack_in": [
        "creator#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1806": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.asset_destroy",
      "params": {
        "destroy_asset#0": "uint64"
      },
      "block": "asset_destroy",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1809": {
      "op": "frame_dig -1",
      "defined_out": [
        "destroy_asset#0 (copy)"
      ],
      "stack_out": [
        "destroy_asset#0 (copy)"
      ]
    },
    "1811": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "1814": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1816": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1817": {
      "op": "bytec 7 // \"manager_addr\"",
      "defined_out": [
        "\"manager_addr\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"manager_addr\""
      ]
    },
    "1819": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1820": {
      "error": "check self.manager_addr exists",
      "op": "assert // check self.manager_addr exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1821": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1822": {
      "error": "Unauthorized Manager",
      "op": "assert // Unauthorized Manager",
      "stack_out": []
    },
    "1823": {
      "op": "itxn_begin"
    },
    "1824": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1826": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "1828": {
      "op": "frame_dig -1",
      "stack_out": [
        "destroy_asset#0 (copy)"
      ]
    },
    "1830": {
      "op": "itxn_field ConfigAsset",
      "stack_out": []
    },
    "1832": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "1834": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1836": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1837": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1839": {
      "op": "itxn_submit"
    },
    "1840": {
      "op": "bytec 8 // \"total\"",
      "defined_out": [
        "\"total\""
      ],
      "stack_out": [
        "\"total\""
      ]
    },
    "1842": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total\"",
        "0"
      ]
    },
    "1843": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1844": {
      "op": "bytec 10 // \"decimals\"",
      "defined_out": [
        "\"decimals\""
      ],
      "stack_out": [
        "\"decimals\""
      ]
    },
    "1846": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"decimals\"",
        "0"
      ]
    },
    "1847": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1848": {
      "op": "bytec 9 // \"default_frozen\"",
      "defined_out": [
        "\"default_frozen\""
      ],
      "stack_out": [
        "\"default_frozen\""
      ]
    },
    "1850": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"default_frozen\"",
        "0"
      ]
    },
    "1851": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1852": {
      "op": "bytec 11 // \"unit_name\"",
      "defined_out": [
        "\"unit_name\""
      ],
      "stack_out": [
        "\"unit_name\""
      ]
    },
    "1854": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "\"unit_name\""
      ],
      "stack_out": [
        "\"unit_name\"",
        "\"\""
      ]
    },
    "1856": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1857": {
      "op": "bytec 12 // \"name\"",
      "defined_out": [
        "\"name\""
      ],
      "stack_out": [
        "\"name\""
      ]
    },
    "1859": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "\"name\"",
        "\"\""
      ]
    },
    "1861": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1862": {
      "op": "bytec 13 // \"url\"",
      "defined_out": [
        "\"url\""
      ],
      "stack_out": [
        "\"url\""
      ]
    },
    "1864": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "\"url\"",
        "\"\""
      ]
    },
    "1866": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1867": {
      "op": "bytec 14 // \"metadata_hash\"",
      "defined_out": [
        "\"metadata_hash\""
      ],
      "stack_out": [
        "\"metadata_hash\""
      ]
    },
    "1869": {
      "op": "pushbytes 0x",
      "defined_out": [
        "\"metadata_hash\"",
        "0x"
      ],
      "stack_out": [
        "\"metadata_hash\"",
        "0x"
      ]
    },
    "1871": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1872": {
      "op": "bytec 7 // \"manager_addr\"",
      "stack_out": [
        "\"manager_addr\""
      ]
    },
    "1874": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"manager_addr\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"manager_addr\"",
        "new_state_value%0#0"
      ]
    },
    "1876": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1877": {
      "op": "bytec_1 // \"reserve_addr\"",
      "defined_out": [
        "\"reserve_addr\""
      ],
      "stack_out": [
        "\"reserve_addr\""
      ]
    },
    "1878": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"reserve_addr\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"reserve_addr\"",
        "new_state_value%1#0"
      ]
    },
    "1880": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1881": {
      "op": "bytec 5 // \"freeze_addr\"",
      "defined_out": [
        "\"freeze_addr\""
      ],
      "stack_out": [
        "\"freeze_addr\""
      ]
    },
    "1883": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"freeze_addr\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "\"freeze_addr\"",
        "new_state_value%2#0"
      ]
    },
    "1885": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1886": {
      "op": "bytec_2 // \"clawback_addr\"",
      "defined_out": [
        "\"clawback_addr\""
      ],
      "stack_out": [
        "\"clawback_addr\""
      ]
    },
    "1887": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"clawback_addr\"",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "\"clawback_addr\"",
        "new_state_value%3#0"
      ]
    },
    "1889": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1890": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\""
      ],
      "stack_out": [
        "\"smart_asa_id\""
      ]
    },
    "1891": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"smart_asa_id\"",
        "0"
      ]
    },
    "1892": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1893": {
      "op": "bytec 6 // \"global_frozen\"",
      "defined_out": [
        "\"global_frozen\""
      ],
      "stack_out": [
        "\"global_frozen\""
      ]
    },
    "1895": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"global_frozen\"",
        "0"
      ]
    },
    "1896": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1897": {
      "retsub": true,
      "op": "retsub"
    },
    "1898": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.get_asset_config",
      "params": {
        "asset#0": "uint64"
      },
      "block": "get_asset_config",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1901": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "1903": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "1906": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1907": {
      "op": "bytec 8 // \"total\"",
      "defined_out": [
        "\"total\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total\""
      ]
    },
    "1909": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1910": {
      "error": "check self.total exists",
      "op": "assert // check self.total exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1911": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "1912": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "1913": {
      "op": "bytec 10 // \"decimals\"",
      "defined_out": [
        "\"decimals\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"decimals\""
      ]
    },
    "1915": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1916": {
      "error": "check self.decimals exists",
      "op": "assert // check self.decimals exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "1917": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1918": {
      "op": "extract 4 4",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "1921": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "1922": {
      "op": "bytec 9 // \"default_frozen\"",
      "defined_out": [
        "\"default_frozen\"",
        "0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "0",
        "\"default_frozen\""
      ]
    },
    "1924": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1925": {
      "error": "check self.default_frozen exists",
      "op": "assert // check self.default_frozen exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "1926": {
      "op": "bytec 16 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%2#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "0x00"
      ]
    },
    "1928": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "0x00",
        "0"
      ]
    },
    "1929": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "0x00",
        "0",
        "maybe_value%2#0"
      ]
    },
    "1931": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0"
      ]
    },
    "1932": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "1933": {
      "op": "bytec 11 // \"unit_name\"",
      "defined_out": [
        "\"unit_name\"",
        "0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "0",
        "\"unit_name\""
      ]
    },
    "1935": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1936": {
      "error": "check self.unit_name exists",
      "op": "assert // check self.unit_name exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "maybe_value%3#0"
      ]
    },
    "1937": {
      "op": "dup",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)"
      ]
    },
    "1938": {
      "op": "len",
      "defined_out": [
        "encoded_bool%0#0",
        "length%0#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "maybe_value%3#0",
        "length%0#0"
      ]
    },
    "1939": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "encoded_bool%0#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "maybe_value%3#0",
        "as_bytes%0#0"
      ]
    },
    "1940": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_bool%0#0",
        "length_uint16%0#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "maybe_value%3#0",
        "length_uint16%0#0"
      ]
    },
    "1943": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "length_uint16%0#0",
        "maybe_value%3#0"
      ]
    },
    "1944": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0"
      ]
    },
    "1945": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "0"
      ]
    },
    "1946": {
      "op": "bytec 12 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "0",
        "\"name\""
      ]
    },
    "1948": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1949": {
      "error": "check self.name exists",
      "op": "assert // check self.name exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_value%4#0"
      ]
    },
    "1950": {
      "op": "dup",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_value%4#0",
        "maybe_value%4#0 (copy)",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_value%4#0",
        "maybe_value%4#0 (copy)"
      ]
    },
    "1951": {
      "op": "len",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "length%1#0",
        "maybe_value%4#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_value%4#0",
        "length%1#0"
      ]
    },
    "1952": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_value%4#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_value%4#0",
        "as_bytes%1#0"
      ]
    },
    "1953": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "maybe_value%4#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_value%4#0",
        "length_uint16%1#0"
      ]
    },
    "1956": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "maybe_value%4#0"
      ]
    },
    "1957": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "1958": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "0"
      ]
    },
    "1959": {
      "op": "bytec 13 // \"url\"",
      "defined_out": [
        "\"url\"",
        "0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "0",
        "\"url\""
      ]
    },
    "1961": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1962": {
      "error": "check self.url exists",
      "op": "assert // check self.url exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_value%5#0"
      ]
    },
    "1963": {
      "op": "dup",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)"
      ]
    },
    "1964": {
      "op": "len",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length%2#0",
        "maybe_value%5#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_value%5#0",
        "length%2#0"
      ]
    },
    "1965": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_value%5#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_value%5#0",
        "as_bytes%2#0"
      ]
    },
    "1966": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length_uint16%2#0",
        "maybe_value%5#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_value%5#0",
        "length_uint16%2#0"
      ]
    },
    "1969": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length_uint16%2#0",
        "maybe_value%5#0"
      ]
    },
    "1970": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ]
    },
    "1971": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "0"
      ]
    },
    "1972": {
      "op": "bytec 14 // \"metadata_hash\"",
      "defined_out": [
        "\"metadata_hash\"",
        "0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "0",
        "\"metadata_hash\""
      ]
    },
    "1974": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1975": {
      "error": "check self.metadata_hash exists",
      "op": "assert // check self.metadata_hash exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_value%6#0"
      ]
    },
    "1976": {
      "op": "dup",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_value%6#0",
        "maybe_value%6#0 (copy)",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_value%6#0",
        "maybe_value%6#0 (copy)"
      ]
    },
    "1977": {
      "op": "len",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "length%3#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_value%6#0",
        "length%3#0"
      ]
    },
    "1978": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_value%6#0",
        "as_bytes%3#0"
      ]
    },
    "1979": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "length_uint16%3#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_value%6#0",
        "length_uint16%3#0"
      ]
    },
    "1982": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "length_uint16%3#0",
        "maybe_value%6#0"
      ]
    },
    "1983": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ]
    },
    "1984": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "0"
      ]
    },
    "1985": {
      "op": "bytec 7 // \"manager_addr\"",
      "defined_out": [
        "\"manager_addr\"",
        "0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "0",
        "\"manager_addr\""
      ]
    },
    "1987": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1988": {
      "error": "check self.manager_addr exists",
      "op": "assert // check self.manager_addr exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0"
      ]
    },
    "1989": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "0"
      ]
    },
    "1990": {
      "op": "bytec_1 // \"reserve_addr\"",
      "defined_out": [
        "\"reserve_addr\"",
        "0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "0",
        "\"reserve_addr\""
      ]
    },
    "1991": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_exists%8#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "1992": {
      "error": "check self.reserve_addr exists",
      "op": "assert // check self.reserve_addr exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ]
    },
    "1993": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "0"
      ]
    },
    "1994": {
      "op": "bytec 5 // \"freeze_addr\"",
      "defined_out": [
        "\"freeze_addr\"",
        "0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "0",
        "\"freeze_addr\""
      ]
    },
    "1996": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_exists%9#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "1997": {
      "error": "check self.freeze_addr exists",
      "op": "assert // check self.freeze_addr exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ]
    },
    "1998": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "0"
      ]
    },
    "1999": {
      "op": "bytec_2 // \"clawback_addr\"",
      "defined_out": [
        "\"clawback_addr\"",
        "0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "0",
        "\"clawback_addr\""
      ]
    },
    "2000": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "2001": {
      "error": "check self.clawback_addr exists",
      "op": "assert // check self.clawback_addr exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0"
      ]
    },
    "2002": {
      "op": "uncover 10",
      "stack_out": [
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "val_as_bytes%0#0"
      ]
    },
    "2004": {
      "op": "uncover 10",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "val_as_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "2006": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2007": {
      "op": "uncover 9",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%2#0",
        "encoded_bool%0#0"
      ]
    },
    "2009": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2010": {
      "op": "pushbytes 0x0095",
      "defined_out": [
        "0x0095",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%3#0",
        "0x0095"
      ]
    },
    "2014": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2015": {
      "op": "dig 8",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "2017": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%4#0",
        "data_length%0#0"
      ]
    },
    "2018": {
      "op": "pushint 149 // 149",
      "defined_out": [
        "149",
        "data_length%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%4#0",
        "data_length%0#0",
        "149"
      ]
    },
    "2021": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%4#0",
        "current_tail_offset%1#0"
      ]
    },
    "2022": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%4#0",
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)"
      ]
    },
    "2023": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%4#0",
        "current_tail_offset%1#0",
        "as_bytes%5#0"
      ]
    },
    "2024": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%4#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "2027": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2029": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%4#0",
        "offset_as_uint16%1#0"
      ]
    },
    "2030": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2031": {
      "op": "dig 8",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%1#0 (copy)",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%1#0 (copy)"
      ]
    },
    "2033": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%1#0",
        "data_length%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%5#0",
        "data_length%1#0"
      ]
    },
    "2034": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%5#0",
        "data_length%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "2036": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%5#0",
        "current_tail_offset%2#0"
      ]
    },
    "2037": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%2#0",
        "current_tail_offset%2#0 (copy)",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%5#0",
        "current_tail_offset%2#0",
        "current_tail_offset%2#0 (copy)"
      ]
    },
    "2038": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%5#0",
        "current_tail_offset%2#0",
        "as_bytes%6#0"
      ]
    },
    "2039": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%5#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0"
      ]
    },
    "2042": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2044": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0",
        "offset_as_uint16%2#0"
      ]
    },
    "2045": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2046": {
      "op": "dig 7",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%2#0 (copy)",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%2#0 (copy)"
      ]
    },
    "2048": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%2#0",
        "data_length%2#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%6#0",
        "data_length%2#0"
      ]
    },
    "2049": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%6#0",
        "data_length%2#0",
        "current_tail_offset%2#0"
      ]
    },
    "2051": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%6#0",
        "current_tail_offset%3#0"
      ]
    },
    "2052": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%6#0",
        "as_bytes%7#0"
      ]
    },
    "2053": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%6#0",
        "offset_as_uint16%3#0"
      ]
    },
    "2056": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2057": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%7#0"
      ]
    },
    "2059": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "2060": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%8#0"
      ]
    },
    "2062": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2063": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%9#0",
        "maybe_value%9#0"
      ]
    },
    "2065": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "2066": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%10#0",
        "maybe_value%10#0"
      ]
    },
    "2067": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "2068": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%11#0",
        "encoded_value%0#0"
      ]
    },
    "2070": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "2071": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%12#0",
        "encoded_value%1#0"
      ]
    },
    "2073": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "2074": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_tuple_buffer%13#0",
        "encoded_value%2#0"
      ]
    },
    "2076": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "2077": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%14#0",
        "encoded_value%3#0"
      ]
    },
    "2078": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%15#0"
      ]
    },
    "2079": {
      "retsub": true,
      "op": "retsub"
    },
    "2080": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.get_asset_is_frozen",
      "params": {
        "freeze_asset#0": "uint64"
      },
      "block": "get_asset_is_frozen",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2083": {
      "op": "frame_dig -1",
      "defined_out": [
        "freeze_asset#0 (copy)"
      ],
      "stack_out": [
        "freeze_asset#0 (copy)"
      ]
    },
    "2085": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "2088": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2089": {
      "op": "bytec 6 // \"global_frozen\"",
      "defined_out": [
        "\"global_frozen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_frozen\""
      ]
    },
    "2091": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2092": {
      "error": "check self.global_frozen exists",
      "op": "assert // check self.global_frozen exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2093": {
      "op": "bytec 16 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x00"
      ]
    },
    "2095": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0x00",
        "0"
      ]
    },
    "2096": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "maybe_value%0#0"
      ]
    },
    "2098": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "2099": {
      "retsub": true,
      "op": "retsub"
    },
    "2100": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.get_account_is_frozen",
      "params": {
        "freeze_asset#0": "uint64",
        "freeze_account#0": "bytes"
      },
      "block": "get_account_is_frozen",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2103": {
      "op": "frame_dig -2",
      "defined_out": [
        "freeze_asset#0 (copy)"
      ],
      "stack_out": [
        "freeze_asset#0 (copy)"
      ]
    },
    "2105": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "2108": {
      "op": "frame_dig -1",
      "defined_out": [
        "freeze_account#0 (copy)"
      ],
      "stack_out": [
        "freeze_account#0 (copy)"
      ]
    },
    "2110": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "freeze_account#0 (copy)"
      ],
      "stack_out": [
        "freeze_account#0 (copy)",
        "0"
      ]
    },
    "2111": {
      "op": "bytec 4 // \"account_frozen\"",
      "defined_out": [
        "\"account_frozen\"",
        "0",
        "freeze_account#0 (copy)"
      ],
      "stack_out": [
        "freeze_account#0 (copy)",
        "0",
        "\"account_frozen\""
      ]
    },
    "2113": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2114": {
      "error": "check self.account_frozen exists for account",
      "op": "assert // check self.account_frozen exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2115": {
      "op": "bytec 16 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x00"
      ]
    },
    "2117": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0x00",
        "0"
      ]
    },
    "2118": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "maybe_value%0#0"
      ]
    },
    "2120": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "2121": {
      "retsub": true,
      "op": "retsub"
    },
    "2122": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.get_circulating_supply",
      "params": {
        "asset#0": "uint64"
      },
      "block": "get_circulating_supply",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2125": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "2127": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "2130": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "2132": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.circulating_supply",
      "op": "callsub circulating_supply",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2135": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2136": {
      "retsub": true,
      "op": "retsub"
    }
  }
}