{
    "name": "SmartAsa",
    "structs": {
        "AssetConfig": [
            {
                "name": "total",
                "type": "uint64"
            },
            {
                "name": "decimals",
                "type": "uint32"
            },
            {
                "name": "default_frozen",
                "type": "bool"
            },
            {
                "name": "unit_name",
                "type": "string"
            },
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "url",
                "type": "string"
            },
            {
                "name": "metadata_hash",
                "type": "byte[]"
            },
            {
                "name": "manager_addr",
                "type": "address"
            },
            {
                "name": "reserve_addr",
                "type": "address"
            },
            {
                "name": "freeze_addr",
                "type": "address"
            },
            {
                "name": "clawback_addr",
                "type": "address"
            }
        ]
    },
    "methods": [
        {
            "name": "asset_create",
            "args": [
                {
                    "type": "uint64",
                    "name": "total",
                    "desc": "The total number of base units of the Smart ASA to create"
                },
                {
                    "type": "uint32",
                    "name": "decimals",
                    "desc": "The number of digits to use after the decimal point when displaying the Smart ASA"
                },
                {
                    "type": "bool",
                    "name": "default_frozen",
                    "desc": "Smart ASA default frozen (True to freeze holdings by default)"
                },
                {
                    "type": "string",
                    "name": "unit_name",
                    "desc": "The name of a unit of Smart ASA"
                },
                {
                    "type": "string",
                    "name": "name",
                    "desc": "The name of the Smart ASA"
                },
                {
                    "type": "string",
                    "name": "url",
                    "desc": "Smart ASA external URL"
                },
                {
                    "type": "byte[]",
                    "name": "metadata_hash",
                    "desc": "Smart ASA metadata hash"
                },
                {
                    "type": "address",
                    "name": "manager_addr",
                    "desc": "Account that can manage the configuration of the Smart ASA and destroy it"
                },
                {
                    "type": "address",
                    "name": "reserve_addr",
                    "desc": "Account that holds the reserve (non-minted) units of Smart ASA and can mint or burn it"
                },
                {
                    "type": "address",
                    "name": "freeze_addr",
                    "desc": "Account that can freeze/unfreeze holdings of the Smart ASA globally or locally"
                },
                {
                    "type": "address",
                    "name": "clawback_addr",
                    "desc": "Account that can clawback holdings of the Smart ASA"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "Controlled ASA ID"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Create the Controlled ASA",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "asset_opt_in",
            "args": [
                {
                    "type": "asset",
                    "name": "asset",
                    "desc": "Smart ASA ID"
                },
                {
                    "type": "axfer",
                    "name": "ctrl_asa_opt_in",
                    "desc": "Controlled ASA opt in transaction"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "OptIn"
                ]
            },
            "readonly": false,
            "desc": "Smart ASA opt in (App and Controlled ASA)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "asset_config",
            "args": [
                {
                    "type": "asset",
                    "name": "config_asset",
                    "desc": "Smart ASA ID to configure"
                },
                {
                    "type": "uint64",
                    "name": "total",
                    "desc": "Total number of base units if the Smart ASA. It can not be less than current circulating supply"
                },
                {
                    "type": "uint32",
                    "name": "decimals",
                    "desc": "The number of digits to use after the decimal point when displaying the Smart ASA"
                },
                {
                    "type": "bool",
                    "name": "default_frozen",
                    "desc": "Smart ASA default frozen (True to freeze holdings by default)"
                },
                {
                    "type": "string",
                    "name": "unit_name",
                    "desc": "The name of a unit of Smart ASA"
                },
                {
                    "type": "string",
                    "name": "name",
                    "desc": "The name of the Smart ASA"
                },
                {
                    "type": "string",
                    "name": "url",
                    "desc": "Smart ASA external URL"
                },
                {
                    "type": "byte[]",
                    "name": "metadata_hash",
                    "desc": "Smart ASA metadata hash"
                },
                {
                    "type": "address",
                    "name": "manager_addr",
                    "desc": "Account that can manage the configuration of the Smart ASA and destroy it"
                },
                {
                    "type": "address",
                    "name": "reserve_addr",
                    "desc": "Account that holds the reserve (non-minted) units of Smart ASA and can mint or burn it"
                },
                {
                    "type": "address",
                    "name": "freeze_addr",
                    "desc": "Account that can freeze/unfreeze holdings of the Smart ASA globally or locally"
                },
                {
                    "type": "address",
                    "name": "clawback_addr",
                    "desc": "Account that can clawback holdings of the Smart ASA"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Configure Smart ASA (for unchanged parameters use existing value - no optional args on AVM)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "asset_transfer",
            "args": [
                {
                    "type": "asset",
                    "name": "xfer_asset",
                    "desc": "Smart ASA ID to transfer"
                },
                {
                    "type": "uint64",
                    "name": "asset_amount",
                    "desc": "Amount to transfer"
                },
                {
                    "type": "account",
                    "name": "asset_sender",
                    "desc": "Smart ASA sender"
                },
                {
                    "type": "account",
                    "name": "asset_receiver",
                    "desc": "Smart ASA receiver"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Smart ASA transfers: regular, clawback, mint, burn",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "asset_freeze",
            "args": [
                {
                    "type": "asset",
                    "name": "freeze_asset",
                    "desc": "Smart ASA ID to globally freeze/unfreeze"
                },
                {
                    "type": "bool",
                    "name": "asset_frozen",
                    "desc": "Smart ASA frozen status"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Smart ASA global freeze (all accounts)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "account_freeze",
            "args": [
                {
                    "type": "asset",
                    "name": "freeze_asset",
                    "desc": "Smart ASA ID to locally freeze/unfreeze"
                },
                {
                    "type": "account",
                    "name": "freeze_account",
                    "desc": "Account to freeze/unfreeze"
                },
                {
                    "type": "bool",
                    "name": "asset_frozen",
                    "desc": "Smart ASA frozen status"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Smart ASA local freeze (account specific)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "asset_close_out",
            "args": [
                {
                    "type": "asset",
                    "name": "close_asset",
                    "desc": "Smart ASA ID to close out"
                },
                {
                    "type": "account",
                    "name": "close_to",
                    "desc": "Account to send all the Smart ASA remainder to."
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "CloseOut"
                ]
            },
            "readonly": false,
            "desc": "Smart ASA close out (App and Controlled ASA)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "asset_destroy",
            "args": [
                {
                    "type": "asset",
                    "name": "destroy_asset",
                    "desc": "Smart ASA ID to destroy"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Destroy the Controlled ASA",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_config",
            "args": [
                {
                    "type": "asset",
                    "name": "asset",
                    "desc": "Smart ASA ID"
                }
            ],
            "returns": {
                "type": "(uint64,uint32,bool,string,string,string,byte[],address,address,address,address)",
                "struct": "AssetConfig",
                "desc": "Smart ASA configuration parameters"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get Smart ASA configuration",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_is_frozen",
            "args": [
                {
                    "type": "asset",
                    "name": "freeze_asset",
                    "desc": "Smart ASA ID"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "Smart ASA global frozen status"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get Smart ASA global frozen status",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_account_is_frozen",
            "args": [
                {
                    "type": "asset",
                    "name": "freeze_asset",
                    "desc": "Smart ASA ID"
                },
                {
                    "type": "account",
                    "name": "freeze_account",
                    "desc": "Account to check"
                }
            ],
            "returns": {
                "type": "bool",
                "desc": "Smart ASA account frozen status"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get Smart ASA account frozen status",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_circulating_supply",
            "args": [
                {
                    "type": "asset",
                    "name": "asset",
                    "desc": "Smart ASA ID"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "Smart ASA circulating supply"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get Smart ASA circulating supply",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "\n    ARC-0020 (Smart ASA) - Reference Implementation\n    ",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 5,
                "bytes": 8
            },
            "local": {
                "ints": 2,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "total": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWw="
                },
                "decimals": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZGVjaW1hbHM="
                },
                "default_frozen": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZGVmYXVsdF9mcm96ZW4="
                },
                "unit_name": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "dW5pdF9uYW1l"
                },
                "name": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "bmFtZQ=="
                },
                "url": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "dXJs"
                },
                "metadata_hash": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bWV0YWRhdGFfaGFzaA=="
                },
                "manager_addr": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bWFuYWdlcl9hZGRy"
                },
                "reserve_addr": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "cmVzZXJ2ZV9hZGRy"
                },
                "freeze_addr": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "ZnJlZXplX2FkZHI="
                },
                "clawback_addr": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Y2xhd2JhY2tfYWRkcg=="
                },
                "smart_asa_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c21hcnRfYXNhX2lk"
                },
                "global_frozen": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "Z2xvYmFsX2Zyb3plbg=="
                }
            },
            "local": {
                "account_smart_asa_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YWNjb3VudF9zbWFydF9hc2FfaWQ="
                },
                "account_frozen": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YWNjb3VudF9mcm96ZW4="
                }
            },
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1232
                    ],
                    "errorMessage": "Clawback Address has been deleted"
                },
                {
                    "pc": [
                        1786
                    ],
                    "errorMessage": "Close to account is frozen"
                },
                {
                    "pc": [
                        826
                    ],
                    "errorMessage": "Controlled ASA already created"
                },
                {
                    "pc": [
                        1104
                    ],
                    "errorMessage": "Forbidden Close Out on Opt In"
                },
                {
                    "pc": [
                        1485
                    ],
                    "errorMessage": "Forbidden clawback burning"
                },
                {
                    "pc": [
                        1367
                    ],
                    "errorMessage": "Forbidden over minting"
                },
                {
                    "pc": [
                        1352
                    ],
                    "errorMessage": "Forbidden self minting"
                },
                {
                    "pc": [
                        1214
                    ],
                    "errorMessage": "Freeze Address has been deleted"
                },
                {
                    "pc": [
                        1684
                    ],
                    "errorMessage": "Invalid Close Out group size"
                },
                {
                    "pc": [
                        778,
                        1379,
                        1449,
                        1510,
                        1522,
                        1543,
                        1555,
                        1629,
                        1678,
                        1743,
                        1761
                    ],
                    "errorMessage": "Invalid Controlled ASA ID"
                },
                {
                    "pc": [
                        1242
                    ],
                    "errorMessage": "Invalid Total, must be >= circulating supply"
                },
                {
                    "pc": [
                        770,
                        1118
                    ],
                    "errorMessage": "Missing Controlled ASA"
                },
                {
                    "pc": [
                        505
                    ],
                    "errorMessage": "OnCompletion is not CloseOut"
                },
                {
                    "pc": [
                        388,
                        411,
                        440,
                        463,
                        486,
                        529,
                        556,
                        577,
                        610,
                        690
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        662
                    ],
                    "errorMessage": "OnCompletion is not OptIn"
                },
                {
                    "pc": [
                        1407,
                        1580
                    ],
                    "errorMessage": "Receiver account is frozen"
                },
                {
                    "pc": [
                        1194
                    ],
                    "errorMessage": "Reserve Address has been deleted"
                },
                {
                    "pc": [
                        1477,
                        1571,
                        1777
                    ],
                    "errorMessage": "Sender account is frozen"
                },
                {
                    "pc": [
                        1386,
                        1456,
                        1562,
                        1768
                    ],
                    "errorMessage": "Smart ASA is global frozen"
                },
                {
                    "pc": [
                        820
                    ],
                    "errorMessage": "Unauthorized"
                },
                {
                    "pc": [
                        1531
                    ],
                    "errorMessage": "Unauthorized Clawback"
                },
                {
                    "pc": [
                        1600,
                        1638
                    ],
                    "errorMessage": "Unauthorized Freeze"
                },
                {
                    "pc": [
                        1176,
                        1822
                    ],
                    "errorMessage": "Unauthorized Manager"
                },
                {
                    "pc": [
                        1346,
                        1437
                    ],
                    "errorMessage": "Unauthorized Reserve"
                },
                {
                    "pc": [
                        1703
                    ],
                    "errorMessage": "Wrong ASA Close Out Amount"
                },
                {
                    "pc": [
                        1691
                    ],
                    "errorMessage": "Wrong ASA Close Out ID"
                },
                {
                    "pc": [
                        1698
                    ],
                    "errorMessage": "Wrong ASA Close Out Sender"
                },
                {
                    "pc": [
                        1096
                    ],
                    "errorMessage": "Wrong ASA Opt In Amount"
                },
                {
                    "pc": [
                        1074
                    ],
                    "errorMessage": "Wrong ASA Opt In ID"
                },
                {
                    "pc": [
                        1090
                    ],
                    "errorMessage": "Wrong ASA Opt In Receiver"
                },
                {
                    "pc": [
                        1082
                    ],
                    "errorMessage": "Wrong ASA Opt In Sender"
                },
                {
                    "pc": [
                        1064
                    ],
                    "errorMessage": "Wrong ASA Opt In txn type"
                },
                {
                    "pc": [
                        1709,
                        1735
                    ],
                    "errorMessage": "Wrong Close Out on Close Out"
                },
                {
                    "pc": [
                        214
                    ],
                    "errorMessage": "Wrong Global Bytes allocation"
                },
                {
                    "pc": [
                        220
                    ],
                    "errorMessage": "Wrong Global UInts allocation"
                },
                {
                    "pc": [
                        224
                    ],
                    "errorMessage": "Wrong Local Bytes allocation"
                },
                {
                    "pc": [
                        229
                    ],
                    "errorMessage": "Wrong Local UInts allocation"
                },
                {
                    "pc": [
                        1109,
                        1668
                    ],
                    "errorMessage": "Wrong On Complete Action"
                },
                {
                    "pc": [
                        757,
                        1149,
                        1793
                    ],
                    "errorMessage": "account opted into asset"
                },
                {
                    "pc": [
                        745
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        391,
                        414,
                        443,
                        466,
                        489,
                        508,
                        532,
                        559,
                        580,
                        613,
                        665,
                        693
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1405,
                        1475,
                        1569,
                        1578,
                        1775,
                        1784,
                        2114
                    ],
                    "errorMessage": "check self.account_frozen exists for account"
                },
                {
                    "pc": [
                        1373,
                        1443,
                        1504,
                        1516,
                        1537,
                        1549,
                        1623,
                        1674,
                        1755
                    ],
                    "errorMessage": "check self.account_smart_asa_id exists for account"
                },
                {
                    "pc": [
                        1218,
                        1228,
                        1394,
                        1464,
                        1494,
                        2001
                    ],
                    "errorMessage": "check self.clawback_addr exists"
                },
                {
                    "pc": [
                        1916
                    ],
                    "errorMessage": "check self.decimals exists"
                },
                {
                    "pc": [
                        1139,
                        1925
                    ],
                    "errorMessage": "check self.default_frozen exists"
                },
                {
                    "pc": [
                        1199,
                        1210,
                        1598,
                        1636,
                        1997
                    ],
                    "errorMessage": "check self.freeze_addr exists"
                },
                {
                    "pc": [
                        1384,
                        1454,
                        1560,
                        1766,
                        2092
                    ],
                    "errorMessage": "check self.global_frozen exists"
                },
                {
                    "pc": [
                        1174,
                        1820,
                        1988
                    ],
                    "errorMessage": "check self.manager_addr exists"
                },
                {
                    "pc": [
                        1975
                    ],
                    "errorMessage": "check self.metadata_hash exists"
                },
                {
                    "pc": [
                        1949
                    ],
                    "errorMessage": "check self.name exists"
                },
                {
                    "pc": [
                        1180,
                        1190,
                        1344,
                        1390,
                        1435,
                        1460,
                        1481,
                        1992
                    ],
                    "errorMessage": "check self.reserve_addr exists"
                },
                {
                    "pc": [
                        769,
                        774,
                        824,
                        1045,
                        1072,
                        1122,
                        1356,
                        1377,
                        1447,
                        1508,
                        1520,
                        1541,
                        1553,
                        1627,
                        1739,
                        1759
                    ],
                    "errorMessage": "check self.smart_asa_id exists"
                },
                {
                    "pc": [
                        1365,
                        1910
                    ],
                    "errorMessage": "check self.total exists"
                },
                {
                    "pc": [
                        1936
                    ],
                    "errorMessage": "check self.unit_name exists"
                },
                {
                    "pc": [
                        1962
                    ],
                    "errorMessage": "check self.url exists"
                },
                {
                    "pc": [
                        681,
                        1663,
                        1726
                    ],
                    "errorMessage": "transaction type is axfer"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 4
        }
    },
    "events": [],
    "templateVariables": {}
}