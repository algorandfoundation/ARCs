{
  "version": 3,
  "sources": [
    "/Users/kylebreeding/algorand/ARCs/assets/arc-0058/projects/arc-0058/smart_contracts/escrow/factory.algo.ts",
    "/Users/kylebreeding/algorand/ARCs/assets/arc-0058/projects/arc-0058/smart_contracts/utils/constants.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBwC;AAJT;;;;AAI7B;AAFF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;;AA2HG;;AAAA;AAAA;AAAA;;AAAA;AA3HH;;;AA2HG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AA5GH;;;AA4GG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AArGH;;;AAqGG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AA5FH;;;AA4FG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANA;;AAAA;AAAA;AAAA;;AAAA;AAtFH;;;AAsFG;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BD;;AAAA;AAAA;AAAA;;AAAA;AAxDF;;;AAAA;AAwDE;;;AAAA;;AA7CA;;AAAA;AAAA;AAAA;;AAAA;AAXF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AANA;;;AACS;;AAAA;AAAgB;AAAhB;;AAAA;AAAgB;AAAhB;;AAAA;;AAAA;AAAmB;;AAAnB;;AAAA;AAAmB;;AAAnB;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAP;AAgBA;;;;;;AAC2B;;AAAA;AACT;;;AACM;;AAAZ;;;;;AAZ0B;AAAA;AAAA;AAAA;AAiB+B;;AAAA;AAX1C;;;AAAT;AAAT;;;AAAA;AAWqB;AAAtB;;AAEN;;AAAA;;AAGqB;;AAHrB;AAAA;;;AAAA;;AAAA;;AAIY;;AAAqB;;AAArB;AAJZ;AAAA;;;;AAAA;AASkB;AAbH;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaG;;;AAAA;;;;AC3CK;;;AD2CL;AAAZ;;AAAuC;AAAvC;;AAGiC;AAAA;;AAAA;AAAlB;;;AAErB;AAAA;;AAAA;;AAAA;AAEA;AAEwB;;AAAA;AACL;;;;;;AAHnB;;;AClDuB;;;ADkDvB;AAQA;AAGI;;AAAA;;;AAAmB;;;;AAHvB;;;;;;;;;;;;;AAAA;;;;;;;;AAAA;;;;AC1DuB;;;AD0DvB;AAQA;;AAAA;AALsD;;;;;;;;;AAjChC;;AAAZ;;;;;;AAyCZ;;;;AACwB;;AACc;;AAAA;;AAAA;AAAxB;;;AAAN;;AAC+B;AAAA;;AAArC;AAE8C;AAAA;AAAA;AAAA;;AAAA;AAClC;AAAA;AAAA;;AAAW;;AAAnB;AAAA;AAAA;;AAAJ;;;AACoB;AAAX;;AAAA;AAAP;AAOiC;;AA9DnB;;AAAS;;;AAAT;AAAT;;;AAAA;AA8DqB;AAAtB;;AAEN;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;ACrFuB;;;ADqFvB;AAEA;;AAAA;;AAEA;AAEc;;AAAA;;;AAA8B;;;;;;;;AAF5C;;;ACzFuB;;;ADyFvB;;AAE2E;;;;;AAbhD;;AAAZ;;;AAAN;AAAP;;;;AAqBJ;;;AAEkC;;AAAA;;;AAAyB;AAAA;;AAAzD;AAIF;;;AAEgC;;AAAA;;;AAAyB;AAAA;;AAAnD;;;AACW;AAAb;AAE8B;;AAAA;;;AAAyB;AAAA;AAAzD;AAIF;;;AAEkC;;AAAA;;;AAAyB;AAAA;;AAAzD;AACgC;;AAAA;;;AAAyB;AAAA;AAAzD;AAIF;;;;AAEe;AACQ;AAAiB;;AAAA;AAAA;AAAd;;AAAA;AAAxB;;;AACkB;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAV;AAAA;;AACuB;;;AAAyB;AAAA;;AAAtD;;;AACsD;;AAAA;;;AAAyB;AAAA;AAAnE;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAV;;AAAA;AAAA;AAAA;;;AAAA;;AAH0C;;AAAA;AAAA;AAAA;;;;;AAK1C;;AAAU;AAAV;AAAA;;;AAAA;;;;;AAGJ;;AAAA;;AAAA;AAIF;;;AAEe;AACQ;AAAiB;;AAAA;AAAA;AAAd;;AAAA;AAAxB;;;AACkB;;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACgB;AAAA;;;AAAyB;AAAA;;AAAzD;AACoD;;;AAAyB;AAAA;AAAnE;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAV;;AAAA;AAAA;AAAA;;;AAAA;;AAH4C;AAAA;AAAA;;;;;AAK9C",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 2 32"
    },
    "7": {
      "op": "bytecblock 0x151f7c75 \"\" 0x0000 \"child_mbr\""
    },
    "28": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "30": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "33": {
      "op": "bytec_3 // \"child_mbr\"",
      "defined_out": [
        "\"child_mbr\""
      ],
      "stack_out": [
        "\"child_mbr\""
      ]
    },
    "34": {
      "op": "pushint 100000 // 100000",
      "defined_out": [
        "\"child_mbr\"",
        "100000"
      ],
      "stack_out": [
        "\"child_mbr\"",
        "100000"
      ]
    },
    "38": {
      "op": "app_global_put",
      "stack_out": []
    },
    "39": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "41": {
      "op": "bz main_bare_routing@14",
      "stack_out": []
    },
    "44": {
      "op": "pushbytess 0xd85cf184 0x8a39e79f 0x4c9fb656 0x3c1a6f33 0x2b5602a3 0x13dc508a 0x475d3773 // method \"new(pay)uint64\", method \"delete(uint64)void\", method \"exists(address)bool\", method \"get(address)byte[]\", method \"mustGet(address)byte[]\", method \"getList(address[])byte[][]\", method \"mustGetList(address[])byte[][]\"",
      "defined_out": [
        "Method(delete(uint64)void)",
        "Method(exists(address)bool)",
        "Method(get(address)byte[])",
        "Method(getList(address[])byte[][])",
        "Method(mustGet(address)byte[])",
        "Method(mustGetList(address[])byte[][])",
        "Method(new(pay)uint64)"
      ],
      "stack_out": [
        "Method(new(pay)uint64)",
        "Method(delete(uint64)void)",
        "Method(exists(address)bool)",
        "Method(get(address)byte[])",
        "Method(mustGet(address)byte[])",
        "Method(getList(address[])byte[][])",
        "Method(mustGetList(address[])byte[][])"
      ]
    },
    "81": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(delete(uint64)void)",
        "Method(exists(address)bool)",
        "Method(get(address)byte[])",
        "Method(getList(address[])byte[][])",
        "Method(mustGet(address)byte[])",
        "Method(mustGetList(address[])byte[][])",
        "Method(new(pay)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(new(pay)uint64)",
        "Method(delete(uint64)void)",
        "Method(exists(address)bool)",
        "Method(get(address)byte[])",
        "Method(mustGet(address)byte[])",
        "Method(getList(address[])byte[][])",
        "Method(mustGetList(address[])byte[][])",
        "tmp%2#0"
      ]
    },
    "84": {
      "op": "match main_new_route@5 main_delete_route@6 main_exists_route@7 main_get_route@8 main_mustGet_route@9 main_getList_route@10 main_mustGetList_route@11",
      "stack_out": []
    },
    "100": {
      "block": "main_after_if_else@18",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "101": {
      "op": "return",
      "stack_out": []
    },
    "102": {
      "block": "main_mustGetList_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "104": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "105": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "106": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "108": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "109": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "112": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::EscrowFactory.mustGetList",
      "op": "callsub mustGetList",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "115": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0",
        "0x151f7c75"
      ]
    },
    "116": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%41#0"
      ]
    },
    "117": {
      "op": "concat",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "118": {
      "op": "log",
      "stack_out": []
    },
    "119": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "120": {
      "op": "return",
      "stack_out": []
    },
    "121": {
      "block": "main_getList_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "123": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "124": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "125": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "127": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "128": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "131": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::EscrowFactory.getList",
      "op": "callsub getList",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "134": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "0x151f7c75"
      ]
    },
    "135": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%34#0"
      ]
    },
    "136": {
      "op": "concat",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "137": {
      "op": "log",
      "stack_out": []
    },
    "138": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "139": {
      "op": "return",
      "stack_out": []
    },
    "140": {
      "block": "main_mustGet_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "142": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "143": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "144": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "146": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "147": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "150": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::EscrowFactory.mustGet",
      "op": "callsub mustGet",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "153": {
      "op": "dup",
      "defined_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ],
      "stack_out": [
        "to_encode%3#0",
        "to_encode%3#0 (copy)"
      ]
    },
    "154": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length%1#0"
      ]
    },
    "155": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "as_bytes%1#0"
      ]
    },
    "156": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "length_uint16%1#0"
      ]
    },
    "159": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%3#0"
      ]
    },
    "160": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "161": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "162": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "163": {
      "op": "concat",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "164": {
      "op": "log",
      "stack_out": []
    },
    "165": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "166": {
      "op": "return",
      "stack_out": []
    },
    "167": {
      "block": "main_get_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "169": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "170": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "171": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "173": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "174": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "177": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::EscrowFactory.get",
      "op": "callsub get",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "180": {
      "op": "dup",
      "defined_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ],
      "stack_out": [
        "to_encode%2#0",
        "to_encode%2#0 (copy)"
      ]
    },
    "181": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length%0#0"
      ]
    },
    "182": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "as_bytes%0#0"
      ]
    },
    "183": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "length_uint16%0#0"
      ]
    },
    "186": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%2#0"
      ]
    },
    "187": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "188": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "189": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "190": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "191": {
      "op": "log",
      "stack_out": []
    },
    "192": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "193": {
      "op": "return",
      "stack_out": []
    },
    "194": {
      "block": "main_exists_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "196": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "197": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "198": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "200": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "201": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "204": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::EscrowFactory.exists",
      "op": "callsub exists",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "207": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00"
      ]
    },
    "210": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "211": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%1#0"
      ]
    },
    "213": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "214": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "215": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "216": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "217": {
      "op": "log",
      "stack_out": []
    },
    "218": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "219": {
      "op": "return",
      "stack_out": []
    },
    "220": {
      "block": "main_delete_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "222": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "223": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "224": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "226": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "227": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "230": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "231": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::EscrowFactory.delete",
      "op": "callsub delete",
      "stack_out": []
    },
    "234": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "235": {
      "op": "return",
      "stack_out": []
    },
    "236": {
      "block": "main_new_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "238": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "239": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "240": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "242": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "243": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "245": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "1"
      ]
    },
    "246": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "247": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "248": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "250": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "251": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "252": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "253": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::EscrowFactory.new",
      "op": "callsub new",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "256": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "257": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "258": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "259": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "260": {
      "op": "log",
      "stack_out": []
    },
    "261": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "262": {
      "op": "return",
      "stack_out": []
    },
    "263": {
      "block": "main_bare_routing@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "265": {
      "op": "bnz main_after_if_else@18",
      "stack_out": []
    },
    "268": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "270": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "271": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "272": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "273": {
      "op": "return",
      "stack_out": []
    },
    "274": {
      "subroutine": "_puya_lib.arc4.dynamic_array_concat_byte_length_head",
      "params": {
        "array#0": "bytes",
        "new_items_bytes#0": "bytes",
        "new_items_count#0": "uint64"
      },
      "block": "dynamic_array_concat_byte_length_head",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "277": {
      "op": "frame_dig -3",
      "defined_out": [
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)"
      ]
    },
    "279": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "array#0 (copy)"
      ],
      "stack_out": [
        "array#0 (copy)",
        "0"
      ]
    },
    "280": {
      "op": "extract_uint16",
      "defined_out": [
        "array_length#0"
      ],
      "stack_out": [
        "array_length#0"
      ]
    },
    "281": {
      "op": "dup",
      "defined_out": [
        "array_length#0",
        "array_length#0 (copy)"
      ],
      "stack_out": [
        "array_length#0",
        "array_length#0 (copy)"
      ]
    },
    "282": {
      "op": "frame_dig -1",
      "defined_out": [
        "array_length#0",
        "array_length#0 (copy)",
        "new_items_count#0 (copy)"
      ],
      "stack_out": [
        "array_length#0",
        "array_length#0 (copy)",
        "new_items_count#0 (copy)"
      ]
    },
    "284": {
      "op": "+",
      "defined_out": [
        "array_length#0",
        "new_length#0"
      ],
      "stack_out": [
        "array_length#0",
        "new_length#0"
      ]
    },
    "285": {
      "op": "swap",
      "stack_out": [
        "new_length#0",
        "array_length#0"
      ]
    },
    "286": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "array_length#0",
        "new_length#0"
      ],
      "stack_out": [
        "new_length#0",
        "array_length#0",
        "2"
      ]
    },
    "287": {
      "op": "*",
      "defined_out": [
        "new_length#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "new_length#0",
        "tmp%0#0"
      ]
    },
    "288": {
      "op": "intc_2 // 2",
      "stack_out": [
        "new_length#0",
        "tmp%0#0",
        "2"
      ]
    },
    "289": {
      "op": "+",
      "defined_out": [
        "header_end#0",
        "new_length#0"
      ],
      "stack_out": [
        "new_length#0",
        "header_end#0"
      ]
    },
    "290": {
      "op": "dig 1",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "new_length#0 (copy)"
      ],
      "stack_out": [
        "new_length#0",
        "header_end#0",
        "new_length#0 (copy)"
      ]
    },
    "292": {
      "op": "itob",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "new_length#0",
        "header_end#0",
        "tmp%1#0"
      ]
    },
    "293": {
      "op": "extract 6 2",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "new_length#0",
        "header_end#0",
        "tmp%2#0"
      ]
    },
    "296": {
      "op": "cover 2",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0"
      ]
    },
    "298": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "array#0 (copy)"
      ]
    },
    "300": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "array#0 (copy)",
        "2"
      ]
    },
    "301": {
      "op": "dig 2",
      "defined_out": [
        "2",
        "array#0 (copy)",
        "header_end#0",
        "header_end#0 (copy)",
        "new_length#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "array#0 (copy)",
        "2",
        "header_end#0 (copy)"
      ]
    },
    "303": {
      "op": "substring3",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%3#0"
      ]
    },
    "304": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%3#0",
        "new_items_count#0 (copy)"
      ]
    },
    "306": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%3#0",
        "new_items_count#0 (copy)",
        "2"
      ]
    },
    "307": {
      "op": "*",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "308": {
      "op": "bzero",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "309": {
      "op": "concat",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%6#0"
      ]
    },
    "310": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%6#0",
        "array#0 (copy)"
      ]
    },
    "312": {
      "op": "len",
      "defined_out": [
        "header_end#0",
        "new_length#0",
        "tmp%2#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "313": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "header_end#0",
        "tmp%6#0",
        "tmp%7#0",
        "array#0 (copy)"
      ]
    },
    "315": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "tmp%6#0",
        "tmp%7#0",
        "array#0 (copy)",
        "header_end#0"
      ]
    },
    "317": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "tmp%6#0",
        "array#0 (copy)",
        "header_end#0",
        "tmp%7#0"
      ]
    },
    "319": {
      "op": "substring3",
      "defined_out": [
        "new_length#0",
        "tmp%2#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "320": {
      "op": "concat",
      "defined_out": [
        "new_length#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "tmp%9#0"
      ]
    },
    "321": {
      "op": "frame_dig -2",
      "defined_out": [
        "new_items_bytes#0 (copy)",
        "new_length#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "tmp%9#0",
        "new_items_bytes#0 (copy)"
      ]
    },
    "323": {
      "op": "concat",
      "defined_out": [
        "array_head_and_tail#0",
        "new_length#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "new_length#0",
        "array_head_and_tail#0"
      ]
    },
    "324": {
      "op": "swap",
      "defined_out": [
        "array_head_and_tail#0",
        "new_length#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "new_length#0"
      ]
    },
    "325": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "new_length#0",
        "2"
      ]
    },
    "326": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail#0",
        "tail_offset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0"
      ]
    },
    "327": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail#0",
        "tail_offset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "tail_offset#0"
      ]
    },
    "328": {
      "op": "intc_0 // 0",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "tail_offset#0",
        "head_offset#0"
      ]
    },
    "329": {
      "op": "swap",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1"
      ]
    },
    "330": {
      "block": "dynamic_array_concat_byte_length_head_for_header@2",
      "stack_in": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "head_offset#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0"
      ]
    },
    "332": {
      "op": "frame_dig 2",
      "defined_out": [
        "head_offset#0",
        "tail_offset#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#0"
      ]
    },
    "334": {
      "op": "<",
      "defined_out": [
        "continue_looping%0#0",
        "head_offset#0",
        "tail_offset#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "continue_looping%0#0"
      ]
    },
    "335": {
      "op": "bz dynamic_array_concat_byte_length_head_after_for@5",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1"
      ]
    },
    "338": {
      "op": "frame_dig 4",
      "defined_out": [
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1"
      ]
    },
    "340": {
      "op": "dup",
      "defined_out": [
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tail_offset#1 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tail_offset#1 (copy)"
      ]
    },
    "341": {
      "op": "itob",
      "defined_out": [
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tmp%5#0"
      ]
    },
    "342": {
      "op": "extract 6 2",
      "defined_out": [
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tail_offset_bytes#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tail_offset_bytes#0"
      ]
    },
    "345": {
      "op": "frame_dig 1",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tail_offset_bytes#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tail_offset_bytes#0",
        "array_head_and_tail#0"
      ]
    },
    "347": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tail_offset_bytes#0",
        "array_head_and_tail#0",
        "head_offset#0"
      ]
    },
    "349": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "head_offset#0 (copy)",
        "tail_offset#0",
        "tail_offset#1",
        "tail_offset_bytes#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset#1",
        "tail_offset_bytes#0",
        "array_head_and_tail#0",
        "head_offset#0 (copy)",
        "head_offset#0 (copy)"
      ]
    },
    "350": {
      "op": "cover 4",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "tail_offset_bytes#0",
        "array_head_and_tail#0",
        "head_offset#0 (copy)"
      ]
    },
    "352": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "array_head_and_tail#0",
        "head_offset#0 (copy)",
        "tail_offset_bytes#0"
      ]
    },
    "354": {
      "op": "replace3",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "array_head_and_tail#0"
      ]
    },
    "355": {
      "op": "dup",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "array_head_and_tail#0",
        "array_head_and_tail#0"
      ]
    },
    "356": {
      "op": "frame_bury 1",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "array_head_and_tail#0"
      ]
    },
    "358": {
      "op": "dig 1",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "array_head_and_tail#0",
        "tail_offset#1 (copy)"
      ]
    },
    "360": {
      "op": "extract_uint16",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "tmp%6#1"
      ]
    },
    "361": {
      "op": "intc_2 // 2",
      "defined_out": [
        "2",
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tmp%6#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "tmp%6#1",
        "2"
      ]
    },
    "362": {
      "op": "+",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1",
        "tmp%7#0"
      ]
    },
    "363": {
      "op": "+",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "tail_offset#1"
      ]
    },
    "364": {
      "op": "frame_bury 4",
      "defined_out": [
        "array_head_and_tail#0",
        "head_offset#0",
        "tail_offset#0",
        "tail_offset#1"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0"
      ]
    },
    "366": {
      "op": "intc_2 // 2",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0",
        "2"
      ]
    },
    "367": {
      "op": "+",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "head_offset#0"
      ]
    },
    "368": {
      "op": "frame_bury 3",
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1"
      ]
    },
    "370": {
      "op": "b dynamic_array_concat_byte_length_head_for_header@2"
    },
    "373": {
      "block": "dynamic_array_concat_byte_length_head_after_for@5",
      "stack_in": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tmp%2#0"
      ]
    },
    "375": {
      "op": "frame_dig 1",
      "defined_out": [
        "array_head_and_tail#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tmp%2#0",
        "array_head_and_tail#0"
      ]
    },
    "377": {
      "op": "concat",
      "defined_out": [
        "array_head_and_tail#0",
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "array_head_and_tail#0",
        "tail_offset#0",
        "head_offset#0",
        "tail_offset#1",
        "tmp%12#0"
      ]
    },
    "378": {
      "op": "frame_bury 0"
    },
    "380": {
      "retsub": true,
      "op": "retsub"
    },
    "381": {
      "subroutine": "smart_contracts/escrow/factory.algo.ts::bytes16",
      "params": {
        "acc#0": "bytes"
      },
      "block": "bytes16",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "384": {
      "op": "frame_dig -1",
      "defined_out": [
        "acc#0 (copy)"
      ],
      "stack_out": [
        "acc#0 (copy)"
      ]
    },
    "386": {
      "op": "len",
      "defined_out": [
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0"
      ]
    },
    "387": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0",
        "0"
      ]
    },
    "388": {
      "op": "dig 1",
      "defined_out": [
        "0",
        "length%0#0",
        "length%0#0 (copy)"
      ],
      "stack_out": [
        "length%0#0",
        "0",
        "length%0#0 (copy)"
      ]
    },
    "390": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "391": {
      "op": "intc_0 // 0",
      "stack_out": [
        "length%0#0",
        "is_out_of_bounds%0#0",
        "0"
      ]
    },
    "392": {
      "op": "dig 2",
      "stack_out": [
        "length%0#0",
        "is_out_of_bounds%0#0",
        "0",
        "length%0#0 (copy)"
      ]
    },
    "394": {
      "op": "uncover 2",
      "stack_out": [
        "length%0#0",
        "0",
        "length%0#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "396": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0",
        "bounded_index%0#0"
      ]
    },
    "397": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "bounded_index%0#0",
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0",
        "bounded_index%0#0",
        "16"
      ]
    },
    "399": {
      "op": "dig 2",
      "stack_out": [
        "length%0#0",
        "bounded_index%0#0",
        "16",
        "length%0#0 (copy)"
      ]
    },
    "401": {
      "op": ">=",
      "defined_out": [
        "bounded_index%0#0",
        "is_out_of_bounds%1#0",
        "length%0#0"
      ],
      "stack_out": [
        "length%0#0",
        "bounded_index%0#0",
        "is_out_of_bounds%1#0"
      ]
    },
    "402": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "length%0#0",
        "bounded_index%0#0",
        "is_out_of_bounds%1#0",
        "16"
      ]
    },
    "404": {
      "op": "uncover 3",
      "stack_out": [
        "bounded_index%0#0",
        "is_out_of_bounds%1#0",
        "16",
        "length%0#0"
      ]
    },
    "406": {
      "op": "uncover 2",
      "stack_out": [
        "bounded_index%0#0",
        "16",
        "length%0#0",
        "is_out_of_bounds%1#0"
      ]
    },
    "408": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "bounded_index%1#0"
      ],
      "stack_out": [
        "bounded_index%0#0",
        "bounded_index%1#0"
      ]
    },
    "409": {
      "op": "frame_dig -1",
      "stack_out": [
        "bounded_index%0#0",
        "bounded_index%1#0",
        "acc#0 (copy)"
      ]
    },
    "411": {
      "op": "cover 2",
      "stack_out": [
        "acc#0 (copy)",
        "bounded_index%0#0",
        "bounded_index%1#0"
      ]
    },
    "413": {
      "op": "substring3",
      "defined_out": [
        "awst_tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "414": {
      "op": "dup",
      "defined_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "awst_tmp%0#0 (copy)"
      ]
    },
    "415": {
      "op": "len",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0"
      ]
    },
    "416": {
      "op": "pushint 16 // 16",
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%0#0",
        "16"
      ]
    },
    "418": {
      "op": "==",
      "defined_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "awst_tmp%0#0",
        "tmp%1#0"
      ]
    },
    "419": {
      "error": "Length must be 16",
      "op": "assert // Length must be 16",
      "stack_out": [
        "awst_tmp%0#0"
      ]
    },
    "420": {
      "retsub": true,
      "op": "retsub"
    },
    "421": {
      "subroutine": "smart_contracts/escrow/factory.algo.ts::EscrowFactory.new",
      "params": {
        "payment#0": "uint64"
      },
      "block": "new",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "424": {
      "op": "intc_0 // 0",
      "stack_out": [
        "creator#0"
      ]
    },
    "425": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "creator#0",
        "childAppMBR#0"
      ]
    },
    "426": {
      "op": "dup",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0"
      ]
    },
    "427": {
      "op": "global CallerApplicationID"
    },
    "429": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "430": {
      "op": "bnz new_ternary_false@2",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "433": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "435": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "creator#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "creator#0"
      ]
    },
    "438": {
      "op": "frame_bury 0",
      "defined_out": [
        "creator#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "440": {
      "block": "new_ternary_merge@3",
      "stack_in": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "0"
      ]
    },
    "441": {
      "op": "bytec_3 // \"child_mbr\"",
      "defined_out": [
        "\"child_mbr\"",
        "0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "0",
        "\"child_mbr\""
      ]
    },
    "442": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "443": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "444": {
      "op": "frame_dig 0",
      "defined_out": [
        "creator#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "creator#0"
      ]
    },
    "446": {
      "op": "len",
      "defined_out": [
        "creator#0",
        "length#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "length#0"
      ]
    },
    "447": {
      "op": "pushint 400 // 400",
      "defined_out": [
        "400",
        "creator#0",
        "length#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "length#0",
        "400"
      ]
    },
    "450": {
      "op": "*",
      "defined_out": [
        "creator#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ]
    },
    "451": {
      "op": "pushint 8900 // 8900",
      "defined_out": [
        "8900",
        "creator#0",
        "maybe_value%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "tmp%0#1",
        "8900"
      ]
    },
    "454": {
      "op": "+",
      "defined_out": [
        "creator#0",
        "maybe_value%0#0",
        "tmp%1#1"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "tmp%1#1"
      ]
    },
    "455": {
      "op": "+",
      "defined_out": [
        "childAppMBR#0",
        "creator#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "childAppMBR#0"
      ]
    },
    "456": {
      "op": "frame_bury 1",
      "defined_out": [
        "childAppMBR#0",
        "creator#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "458": {
      "op": "frame_dig -1",
      "defined_out": [
        "childAppMBR#0",
        "creator#0",
        "payment#0 (copy)"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "payment#0 (copy)"
      ]
    },
    "460": {
      "op": "gtxns Receiver",
      "defined_out": [
        "childAppMBR#0",
        "creator#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "tmp%5#0"
      ]
    },
    "462": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "childAppMBR#0",
        "creator#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "464": {
      "op": "==",
      "defined_out": [
        "childAppMBR#0",
        "creator#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "tmp%7#0"
      ]
    },
    "465": {
      "op": "bz new_bool_false@6",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "468": {
      "op": "frame_dig -1",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "payment#0 (copy)"
      ]
    },
    "470": {
      "op": "gtxns Amount",
      "defined_out": [
        "childAppMBR#0",
        "creator#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "472": {
      "op": "frame_dig 1",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "tmp%8#0",
        "childAppMBR#0"
      ]
    },
    "474": {
      "op": "global MinBalance",
      "defined_out": [
        "childAppMBR#0",
        "creator#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "tmp%8#0",
        "childAppMBR#0",
        "tmp%9#0"
      ]
    },
    "476": {
      "op": "+",
      "defined_out": [
        "childAppMBR#0",
        "creator#0",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "477": {
      "op": "==",
      "defined_out": [
        "childAppMBR#0",
        "creator#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "tmp%11#0"
      ]
    },
    "478": {
      "op": "bz new_bool_false@6",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "481": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0",
        "childAppMBR#0",
        "creator#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "482": {
      "block": "new_bool_merge@7",
      "stack_in": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "and_result%0#0"
      ],
      "error": "invalid payment",
      "op": "assert // invalid payment",
      "defined_out": [],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "483": {
      "op": "itxn_begin"
    },
    "484": {
      "op": "pushbytes base64(CoEBQw==)",
      "defined_out": [
        "CoEBQw=="
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "CoEBQw=="
      ]
    },
    "490": {
      "op": "itxn_field ClearStateProgramPages",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "492": {
      "op": "pushbytes base64(CiACAQAxG0EAN4ICBAC4bK8EJDeNPDYaAI4CABAAAiNDMRmBBRJEMRhEiAA8IkMxGRREMRhENhoBF8AciAANIkMxGUD/2TEYFEQiQ4oBADEAMgkSRLEyCov/siCyByOyCCKyECOyAbOJMQAyCRJEsTIJsgkishAjsgGziQ==)",
      "defined_out": [
        "CiACAQAxG0EAN4ICBAC4bK8EJDeNPDYaAI4CABAAAiNDMRmBBRJEMRhEiAA8IkMxGRREMRhENhoBF8AciAANIkMxGUD/2TEYFEQiQ4oBADEAMgkSRLEyCov/siCyByOyCCKyECOyAbOJMQAyCRJEsTIJsgkishAjsgGziQ=="
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "CiACAQAxG0EAN4ICBAC4bK8EJDeNPDYaAI4CABAAAiNDMRmBBRJEMRhEiAA8IkMxGRREMRhENhoBF8AciAANIkMxGUD/2TEYFEQiQ4oBADEAMgkSRLEyCov/siCyByOyCCKyECOyAbOJMQAyCRJEsTIJsgkishAjsgGziQ=="
      ]
    },
    "618": {
      "op": "itxn_field ApprovalProgramPages",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "620": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "0"
      ]
    },
    "621": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "623": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "appl"
      ]
    },
    "625": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "627": {
      "op": "intc_0 // 0",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "0"
      ]
    },
    "628": {
      "op": "itxn_field Fee",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "630": {
      "op": "itxn_submit"
    },
    "631": {
      "op": "itxn CreatedApplicationID"
    },
    "633": {
      "op": "dup",
      "defined_out": [
        "newEscrow#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0",
        "newEscrow#0"
      ]
    },
    "634": {
      "op": "frame_bury 2",
      "defined_out": [
        "newEscrow#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0"
      ]
    },
    "636": {
      "op": "dup",
      "defined_out": [
        "newEscrow#0",
        "newEscrow#0 (copy)"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0",
        "newEscrow#0 (copy)"
      ]
    },
    "637": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%0#0",
        "newEscrow#0",
        "value%0#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "639": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0",
        "value%0#0"
      ]
    },
    "640": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "newEscrow#0",
        "spendAccount#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0",
        "spendAccount#0"
      ]
    },
    "643": {
      "op": "dup",
      "defined_out": [
        "newEscrow#0",
        "spendAccount#0",
        "spendAccount#0 (copy)"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0",
        "spendAccount#0",
        "spendAccount#0 (copy)"
      ]
    },
    "644": {
      "op": "box_del",
      "defined_out": [
        "newEscrow#0",
        "spendAccount#0",
        "{box_del}"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0",
        "spendAccount#0",
        "{box_del}"
      ]
    },
    "645": {
      "op": "pop",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0",
        "spendAccount#0"
      ]
    },
    "646": {
      "op": "frame_dig 0",
      "defined_out": [
        "creator#0",
        "newEscrow#0",
        "spendAccount#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0",
        "spendAccount#0",
        "creator#0"
      ]
    },
    "648": {
      "op": "box_put",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0"
      ]
    },
    "649": {
      "op": "itxn_begin"
    },
    "650": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "check%1#0",
        "creator#0",
        "newEscrow#0",
        "value%1#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "652": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "value%1#0"
      ]
    },
    "653": {
      "op": "global MinBalance",
      "defined_out": [
        "creator#0",
        "inner_txn_params%1%%param_Amount_idx_0#0",
        "newEscrow#0",
        "value%1#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "value%1#0",
        "inner_txn_params%1%%param_Amount_idx_0#0"
      ]
    },
    "655": {
      "op": "itxn_field Amount",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "value%1#0"
      ]
    },
    "657": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "659": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "creator#0",
        "newEscrow#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "1"
      ]
    },
    "660": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "662": {
      "op": "intc_0 // 0",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "0"
      ]
    },
    "663": {
      "op": "itxn_field Fee",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "665": {
      "op": "itxn_submit"
    },
    "666": {
      "op": "itxn_begin"
    },
    "667": {
      "op": "frame_dig 3",
      "defined_out": [
        "creator#0",
        "newEscrow#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "669": {
      "op": "bnz new_ternary_false@11",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "672": {
      "op": "global CallerApplicationAddress",
      "defined_out": [
        "creator#0",
        "newEscrow#0",
        "ternary_result%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "ternary_result%1#0"
      ]
    },
    "674": {
      "block": "new_ternary_merge@12",
      "stack_in": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "ternary_result%1#0"
      ],
      "op": "itxn_field Accounts",
      "defined_out": [],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "676": {
      "op": "pushbytes 0x00b86caf // method \"rekey(account)void\"",
      "defined_out": [
        "Method(rekey(account)void)"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "Method(rekey(account)void)"
      ]
    },
    "682": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "684": {
      "op": "pushbytes 0x01",
      "defined_out": [
        "0x01"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "0x01"
      ]
    },
    "687": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "689": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "0"
      ]
    },
    "690": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "692": {
      "op": "frame_dig 2",
      "defined_out": [
        "newEscrow#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0"
      ]
    },
    "694": {
      "op": "dup",
      "defined_out": [
        "newEscrow#0",
        "newEscrow#0 (copy)"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0",
        "newEscrow#0 (copy)"
      ]
    },
    "695": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0"
      ]
    },
    "697": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "newEscrow#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0",
        "appl"
      ]
    },
    "699": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0"
      ]
    },
    "701": {
      "op": "intc_0 // 0",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0",
        "0"
      ]
    },
    "702": {
      "op": "itxn_field Fee",
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "newEscrow#0"
      ]
    },
    "704": {
      "op": "itxn_submit"
    },
    "705": {
      "op": "frame_bury 0"
    },
    "707": {
      "retsub": true,
      "op": "retsub"
    },
    "708": {
      "block": "new_ternary_false@11",
      "stack_in": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "ternary_result%1#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "ternary_result%1#0"
      ]
    },
    "710": {
      "op": "b new_ternary_merge@12"
    },
    "713": {
      "block": "new_bool_false@6",
      "stack_in": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "and_result%0#0"
      ]
    },
    "714": {
      "op": "b new_bool_merge@7"
    },
    "717": {
      "block": "new_ternary_false@2",
      "stack_in": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ],
      "op": "global CallerApplicationID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "719": {
      "op": "itob",
      "defined_out": [
        "creator#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0",
        "creator#0"
      ]
    },
    "720": {
      "op": "frame_bury 0",
      "defined_out": [
        "creator#0"
      ],
      "stack_out": [
        "creator#0",
        "childAppMBR#0",
        "newEscrow#0",
        "tmp%0#0"
      ]
    },
    "722": {
      "op": "b new_ternary_merge@3"
    },
    "725": {
      "subroutine": "smart_contracts/escrow/factory.algo.ts::EscrowFactory.delete",
      "params": {
        "id#0": "uint64"
      },
      "block": "delete",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "728": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "childAppMBR#0"
      ]
    },
    "729": {
      "op": "global CallerApplicationID"
    },
    "731": {
      "op": "frame_dig -1",
      "defined_out": [
        "caller#0",
        "id#0 (copy)"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "id#0 (copy)"
      ]
    },
    "733": {
      "op": "app_params_get AppAddress",
      "defined_out": [
        "caller#0",
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "735": {
      "error": "application exists",
      "op": "assert // application exists",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "value%0#0"
      ]
    },
    "736": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "caller#0",
        "key#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0"
      ]
    },
    "739": {
      "op": "dupn 2",
      "defined_out": [
        "caller#0",
        "key#0",
        "key#0 (copy)"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "key#0",
        "key#0 (copy)"
      ]
    },
    "741": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "caller#0",
        "key#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "key#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "742": {
      "op": "bury 1",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "key#0",
        "maybe_exists%0#0"
      ]
    },
    "744": {
      "error": "does not exist",
      "op": "assert // does not exist",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "key#0"
      ]
    },
    "745": {
      "op": "box_get",
      "defined_out": [
        "caller#0",
        "creator#0",
        "key#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "creator#0",
        "maybe_exists%1#0"
      ]
    },
    "746": {
      "op": "swap",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "maybe_exists%1#0",
        "creator#0"
      ]
    },
    "747": {
      "op": "dup",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "maybe_exists%1#0",
        "creator#0",
        "creator#0 (copy)"
      ]
    },
    "748": {
      "op": "uncover 2",
      "defined_out": [
        "caller#0",
        "creator#0",
        "key#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "creator#0",
        "creator#0",
        "maybe_exists%1#0"
      ]
    },
    "750": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "creator#0",
        "creator#0"
      ]
    },
    "751": {
      "op": "len",
      "defined_out": [
        "caller#0",
        "creator#0",
        "key#0",
        "length#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "creator#0",
        "length#0"
      ]
    },
    "752": {
      "op": "dup",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "creator#0",
        "length#0",
        "length#0"
      ]
    },
    "753": {
      "op": "cover 2",
      "defined_out": [
        "caller#0",
        "creator#0",
        "key#0",
        "length#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "creator#0",
        "length#0"
      ]
    },
    "755": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "caller#0",
        "creator#0",
        "key#0",
        "length#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "creator#0",
        "length#0",
        "8"
      ]
    },
    "757": {
      "op": "==",
      "defined_out": [
        "caller#0",
        "creator#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "creator#0",
        "tmp%1#0"
      ]
    },
    "758": {
      "op": "dup",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "creator#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "759": {
      "op": "cover 2",
      "defined_out": [
        "caller#0",
        "creator#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "creator#0",
        "tmp%1#0"
      ]
    },
    "761": {
      "op": "bz delete_else_body@2",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "creator#0"
      ]
    },
    "764": {
      "op": "btoi",
      "defined_out": [
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "765": {
      "op": "frame_dig 1",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "tmp%2#0",
        "caller#0"
      ]
    },
    "767": {
      "op": "==",
      "defined_out": [
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "768": {
      "error": "forbidden",
      "op": "assert // forbidden",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ]
    },
    "769": {
      "block": "delete_after_if_else@3",
      "stack_in": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ],
      "op": "global MinBalance",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "tmp%7#0"
      ]
    },
    "771": {
      "op": "frame_dig 3",
      "defined_out": [
        "length#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "tmp%7#0",
        "length#0"
      ]
    },
    "773": {
      "op": "pushint 400 // 400",
      "defined_out": [
        "400",
        "length#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "tmp%7#0",
        "length#0",
        "400"
      ]
    },
    "776": {
      "op": "*",
      "defined_out": [
        "length#0",
        "tmp%0#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "tmp%7#0",
        "tmp%0#1"
      ]
    },
    "777": {
      "op": "pushint 8900 // 8900",
      "defined_out": [
        "8900",
        "length#0",
        "tmp%0#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "tmp%7#0",
        "tmp%0#1",
        "8900"
      ]
    },
    "780": {
      "op": "+",
      "defined_out": [
        "length#0",
        "tmp%1#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "tmp%7#0",
        "tmp%1#1"
      ]
    },
    "781": {
      "op": "+",
      "defined_out": [
        "childAppMBR#0",
        "length#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "childAppMBR#0"
      ]
    },
    "782": {
      "op": "frame_bury 0",
      "defined_out": [
        "childAppMBR#0",
        "length#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ]
    },
    "784": {
      "op": "itxn_begin"
    },
    "785": {
      "op": "pushbytes 0x24378d3c // method \"delete()void\"",
      "defined_out": [
        "Method(delete()void)",
        "childAppMBR#0",
        "length#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "Method(delete()void)"
      ]
    },
    "791": {
      "op": "itxn_field ApplicationArgs",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ]
    },
    "793": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "childAppMBR#0",
        "length#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "5"
      ]
    },
    "795": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ]
    },
    "797": {
      "op": "frame_dig -1",
      "defined_out": [
        "childAppMBR#0",
        "id#0 (copy)",
        "length#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "id#0 (copy)"
      ]
    },
    "799": {
      "op": "itxn_field ApplicationID",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ]
    },
    "801": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "childAppMBR#0",
        "length#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "appl"
      ]
    },
    "803": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ]
    },
    "805": {
      "op": "intc_0 // 0",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "0"
      ]
    },
    "806": {
      "op": "itxn_field Fee",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ]
    },
    "808": {
      "op": "itxn_submit"
    },
    "809": {
      "op": "frame_dig 2",
      "defined_out": [
        "childAppMBR#0",
        "key#0",
        "length#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "key#0"
      ]
    },
    "811": {
      "op": "box_del",
      "defined_out": [
        "childAppMBR#0",
        "key#0",
        "length#0",
        "{box_del}"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "{box_del}"
      ]
    },
    "812": {
      "op": "pop",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ]
    },
    "813": {
      "op": "itxn_begin"
    },
    "814": {
      "op": "frame_dig 4",
      "defined_out": [
        "childAppMBR#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "816": {
      "op": "bz delete_ternary_false@6",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ]
    },
    "819": {
      "op": "global CallerApplicationAddress",
      "defined_out": [
        "childAppMBR#0",
        "key#0",
        "length#0",
        "ternary_result%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "ternary_result%0#0"
      ]
    },
    "821": {
      "block": "delete_ternary_merge@7",
      "stack_in": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "ternary_result%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "childAppMBR#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "ternary_result%0#0",
        "childAppMBR#0"
      ]
    },
    "823": {
      "op": "itxn_field Amount",
      "defined_out": [
        "childAppMBR#0",
        "ternary_result%0#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "ternary_result%0#0"
      ]
    },
    "825": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ]
    },
    "827": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "childAppMBR#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "1"
      ]
    },
    "828": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ]
    },
    "830": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "childAppMBR#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "0"
      ]
    },
    "831": {
      "op": "itxn_field Fee",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ]
    },
    "833": {
      "op": "itxn_submit"
    },
    "834": {
      "retsub": true,
      "op": "retsub"
    },
    "835": {
      "block": "delete_ternary_false@6",
      "stack_in": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "ternary_result%0#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "ternary_result%0#0"
      ]
    },
    "837": {
      "op": "b delete_ternary_merge@7"
    },
    "840": {
      "block": "delete_else_body@2",
      "stack_in": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "creator#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "creator#0",
        "tmp%4#0"
      ]
    },
    "842": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "creator#0",
        "tmp%5#0"
      ]
    },
    "845": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0",
        "tmp%6#0"
      ]
    },
    "846": {
      "error": "forbidden",
      "op": "assert // forbidden",
      "stack_out": [
        "childAppMBR#0",
        "caller#0",
        "key#0",
        "length#0",
        "tmp%1#0"
      ]
    },
    "847": {
      "op": "b delete_after_if_else@3"
    },
    "850": {
      "subroutine": "smart_contracts/escrow/factory.algo.ts::EscrowFactory.exists",
      "params": {
        "address#0": "bytes"
      },
      "block": "exists",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "853": {
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "855": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "858": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "859": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "861": {
      "retsub": true,
      "op": "retsub"
    },
    "862": {
      "subroutine": "smart_contracts/escrow/factory.algo.ts::EscrowFactory.get",
      "params": {
        "address#0": "bytes"
      },
      "block": "get",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "865": {
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "867": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "870": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "871": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "873": {
      "op": "bnz get_after_if_else@2",
      "stack_out": []
    },
    "876": {
      "op": "bytec_1 // \"\"",
      "defined_out": [
        "\"\""
      ],
      "stack_out": [
        "\"\""
      ]
    },
    "877": {
      "retsub": true,
      "op": "retsub"
    },
    "878": {
      "block": "get_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "880": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "materialized_values%1#0"
      ],
      "stack_out": [
        "materialized_values%1#0"
      ]
    },
    "883": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "884": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "885": {
      "retsub": true,
      "op": "retsub"
    },
    "886": {
      "subroutine": "smart_contracts/escrow/factory.algo.ts::EscrowFactory.mustGet",
      "params": {
        "address#0": "bytes"
      },
      "block": "mustGet",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "889": {
      "op": "frame_dig -1",
      "defined_out": [
        "address#0 (copy)"
      ],
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "891": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "894": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "895": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "897": {
      "error": "Account not found",
      "op": "assert // Account not found",
      "stack_out": []
    },
    "898": {
      "op": "frame_dig -1",
      "stack_out": [
        "address#0 (copy)"
      ]
    },
    "900": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "materialized_values%1#0"
      ],
      "stack_out": [
        "materialized_values%1#0"
      ]
    },
    "903": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "904": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "905": {
      "retsub": true,
      "op": "retsub"
    },
    "906": {
      "subroutine": "smart_contracts/escrow/factory.algo.ts::EscrowFactory.getList",
      "params": {
        "addresses#0": "bytes"
      },
      "block": "getList",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "909": {
      "op": "intc_0 // 0",
      "stack_out": [
        "address#0"
      ]
    },
    "910": {
      "op": "bytec_2 // 0x0000"
    },
    "911": {
      "op": "intc_0 // 0",
      "defined_out": [
        "apps#0",
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0"
      ]
    },
    "912": {
      "block": "getList_while_top@1",
      "stack_in": [
        "address#0",
        "apps#0",
        "i#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "addresses#0 (copy)"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "addresses#0 (copy)"
      ]
    },
    "914": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "addresses#0 (copy)"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "addresses#0 (copy)",
        "0"
      ]
    },
    "915": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "916": {
      "op": "frame_dig 2",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "918": {
      "op": ">",
      "defined_out": [
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "919": {
      "op": "bz getList_after_while@6",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0"
      ]
    },
    "922": {
      "op": "frame_dig -1",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "addresses#0 (copy)"
      ]
    },
    "924": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "array_head_and_tail%0#0"
      ]
    },
    "927": {
      "op": "frame_dig 2",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0"
      ]
    },
    "929": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "array_head_and_tail%0#0",
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0",
        "32"
      ]
    },
    "930": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "i#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "931": {
      "op": "intc_3 // 32",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "32"
      ]
    },
    "932": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "address#0",
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "address#0"
      ]
    },
    "933": {
      "op": "dup",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "address#0",
        "address#0"
      ]
    },
    "934": {
      "op": "frame_bury 0",
      "defined_out": [
        "address#0",
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "address#0"
      ]
    },
    "936": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "address#0",
        "i#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "materialized_values%0#0"
      ]
    },
    "939": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "address#0",
        "i#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "940": {
      "op": "bury 1",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "maybe_exists%0#0"
      ]
    },
    "942": {
      "op": "bz getList_else_body@4",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0"
      ]
    },
    "945": {
      "op": "frame_dig 0",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "address#0"
      ]
    },
    "947": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "address#0",
        "i#0",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "materialized_values%1#0"
      ]
    },
    "950": {
      "op": "box_get",
      "defined_out": [
        "address#0",
        "i#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "951": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "maybe_value%0#0"
      ]
    },
    "952": {
      "op": "dup",
      "defined_out": [
        "address#0",
        "i#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "953": {
      "op": "len",
      "defined_out": [
        "address#0",
        "i#0",
        "length%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "maybe_value%0#0",
        "length%0#0"
      ]
    },
    "954": {
      "op": "itob",
      "defined_out": [
        "address#0",
        "as_bytes%0#0",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "maybe_value%0#0",
        "as_bytes%0#0"
      ]
    },
    "955": {
      "op": "extract 6 2",
      "defined_out": [
        "address#0",
        "i#0",
        "length_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "maybe_value%0#0",
        "length_uint16%0#0"
      ]
    },
    "958": {
      "op": "swap",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "length_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "959": {
      "op": "concat",
      "defined_out": [
        "address#0",
        "encoded_value%0#0",
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "encoded_value%0#0"
      ]
    },
    "960": {
      "op": "frame_dig 1",
      "defined_out": [
        "address#0",
        "apps#0",
        "encoded_value%0#0",
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "encoded_value%0#0",
        "apps#0"
      ]
    },
    "962": {
      "op": "swap",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "apps#0",
        "encoded_value%0#0"
      ]
    },
    "963": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "address#0",
        "apps#0",
        "encoded_value%0#0",
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "apps#0",
        "encoded_value%0#0",
        "1"
      ]
    },
    "964": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_byte_length_head",
      "op": "callsub dynamic_array_concat_byte_length_head",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "apps#0"
      ]
    },
    "967": {
      "op": "frame_bury 1",
      "defined_out": [
        "address#0",
        "apps#0",
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0"
      ]
    },
    "969": {
      "block": "getList_after_if_else@5",
      "stack_in": [
        "address#0",
        "apps#0",
        "i#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "i#0"
      ]
    },
    "971": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "972": {
      "op": "+",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "i#0"
      ]
    },
    "973": {
      "op": "frame_bury 2",
      "defined_out": [
        "i#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0"
      ]
    },
    "975": {
      "op": "b getList_while_top@1"
    },
    "978": {
      "block": "getList_else_body@4",
      "stack_in": [
        "address#0",
        "apps#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "apps#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "apps#0"
      ]
    },
    "980": {
      "op": "bytec_2 // 0x0000",
      "defined_out": [
        "0x0000",
        "apps#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "apps#0",
        "0x0000"
      ]
    },
    "981": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0x0000",
        "1",
        "apps#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "apps#0",
        "0x0000",
        "1"
      ]
    },
    "982": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_byte_length_head",
      "op": "callsub dynamic_array_concat_byte_length_head",
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "apps#0"
      ]
    },
    "985": {
      "op": "frame_bury 1",
      "defined_out": [
        "apps#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0"
      ]
    },
    "987": {
      "op": "b getList_after_if_else@5"
    },
    "990": {
      "block": "getList_after_while@6",
      "stack_in": [
        "address#0",
        "apps#0",
        "i#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "apps#0"
      ],
      "stack_out": [
        "address#0",
        "apps#0",
        "i#0",
        "apps#0"
      ]
    },
    "992": {
      "op": "frame_bury 0"
    },
    "994": {
      "retsub": true,
      "op": "retsub"
    },
    "995": {
      "subroutine": "smart_contracts/escrow/factory.algo.ts::EscrowFactory.mustGetList",
      "params": {
        "addresses#0": "bytes"
      },
      "block": "mustGetList",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "998": {
      "op": "bytec_2 // 0x0000"
    },
    "999": {
      "op": "intc_0 // 0",
      "defined_out": [
        "apps#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0"
      ]
    },
    "1000": {
      "block": "mustGetList_while_top@1",
      "stack_in": [
        "apps#0",
        "i#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "addresses#0 (copy)"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "addresses#0 (copy)"
      ]
    },
    "1002": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "addresses#0 (copy)"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "addresses#0 (copy)",
        "0"
      ]
    },
    "1003": {
      "op": "extract_uint16",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "tmp%0#0"
      ]
    },
    "1004": {
      "op": "frame_dig 1",
      "defined_out": [
        "i#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "tmp%0#0",
        "i#0"
      ]
    },
    "1006": {
      "op": ">",
      "defined_out": [
        "i#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "tmp%1#0"
      ]
    },
    "1007": {
      "op": "bz mustGetList_after_while@3",
      "stack_out": [
        "apps#0",
        "i#0"
      ]
    },
    "1010": {
      "op": "frame_dig -1",
      "stack_out": [
        "apps#0",
        "i#0",
        "addresses#0 (copy)"
      ]
    },
    "1012": {
      "op": "extract 2 0",
      "defined_out": [
        "array_head_and_tail%0#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "array_head_and_tail%0#0"
      ]
    },
    "1015": {
      "op": "frame_dig 1",
      "stack_out": [
        "apps#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0"
      ]
    },
    "1017": {
      "op": "dup",
      "defined_out": [
        "array_head_and_tail%0#0",
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0 (copy)",
        "i#0 (copy)"
      ]
    },
    "1018": {
      "op": "cover 2",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0 (copy)"
      ]
    },
    "1020": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "array_head_and_tail%0#0",
        "i#0",
        "i#0 (copy)"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "array_head_and_tail%0#0",
        "i#0 (copy)",
        "32"
      ]
    },
    "1021": {
      "op": "*",
      "defined_out": [
        "array_head_and_tail%0#0",
        "i#0",
        "item_offset%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0"
      ]
    },
    "1022": {
      "op": "intc_3 // 32",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "array_head_and_tail%0#0",
        "item_offset%0#0",
        "32"
      ]
    },
    "1023": {
      "error": "Index access is out of bounds",
      "op": "extract3 // on error: Index access is out of bounds",
      "defined_out": [
        "address#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "address#0"
      ]
    },
    "1024": {
      "op": "dup",
      "defined_out": [
        "address#0",
        "address#0 (copy)",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "address#0",
        "address#0 (copy)"
      ]
    },
    "1025": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "address#0",
        "i#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "address#0",
        "materialized_values%0#0"
      ]
    },
    "1028": {
      "op": "box_len",
      "defined_out": [
        "_%0#0",
        "address#0",
        "i#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "address#0",
        "_%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1029": {
      "op": "bury 1",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "address#0",
        "maybe_exists%0#0"
      ]
    },
    "1031": {
      "error": "Account not found",
      "op": "assert // Account not found",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "address#0"
      ]
    },
    "1032": {
      "callsub": "smart_contracts/escrow/factory.algo.ts::bytes16",
      "op": "callsub bytes16",
      "defined_out": [
        "i#0",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "materialized_values%1#0"
      ]
    },
    "1035": {
      "op": "box_get",
      "defined_out": [
        "i#0",
        "maybe_exists%1#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "maybe_value%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1036": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "maybe_value%0#0"
      ]
    },
    "1037": {
      "op": "dup",
      "defined_out": [
        "i#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "maybe_value%0#0",
        "maybe_value%0#0 (copy)"
      ]
    },
    "1038": {
      "op": "len",
      "defined_out": [
        "i#0",
        "length%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "maybe_value%0#0",
        "length%0#0"
      ]
    },
    "1039": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "i#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "maybe_value%0#0",
        "as_bytes%0#0"
      ]
    },
    "1040": {
      "op": "extract 6 2",
      "defined_out": [
        "i#0",
        "length_uint16%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "maybe_value%0#0",
        "length_uint16%0#0"
      ]
    },
    "1043": {
      "op": "swap",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "length_uint16%0#0",
        "maybe_value%0#0"
      ]
    },
    "1044": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "encoded_value%0#0"
      ]
    },
    "1045": {
      "op": "frame_dig 0",
      "defined_out": [
        "apps#0",
        "encoded_value%0#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "encoded_value%0#0",
        "apps#0"
      ]
    },
    "1047": {
      "op": "swap",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "apps#0",
        "encoded_value%0#0"
      ]
    },
    "1048": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "apps#0",
        "encoded_value%0#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "apps#0",
        "encoded_value%0#0",
        "1"
      ]
    },
    "1049": {
      "callsub": "_puya_lib.arc4.dynamic_array_concat_byte_length_head",
      "op": "callsub dynamic_array_concat_byte_length_head",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "apps#0"
      ]
    },
    "1052": {
      "op": "frame_bury 0",
      "defined_out": [
        "apps#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0"
      ]
    },
    "1054": {
      "op": "intc_1 // 1",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0",
        "1"
      ]
    },
    "1055": {
      "op": "+",
      "stack_out": [
        "apps#0",
        "i#0",
        "i#0"
      ]
    },
    "1056": {
      "op": "frame_bury 1",
      "defined_out": [
        "apps#0",
        "i#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0"
      ]
    },
    "1058": {
      "op": "b mustGetList_while_top@1"
    },
    "1061": {
      "block": "mustGetList_after_while@3",
      "stack_in": [
        "apps#0",
        "i#0"
      ],
      "retsub": true,
      "op": "retsub",
      "defined_out": [
        "apps#0"
      ],
      "stack_out": [
        "apps#0",
        "i#0",
        "apps#0"
      ]
    }
  }
}