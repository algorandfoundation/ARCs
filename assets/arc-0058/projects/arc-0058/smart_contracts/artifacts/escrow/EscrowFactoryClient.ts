/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"EscrowFactory","structs":{},"methods":[{"name":"newCost","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"new","args":[{"type":"pay","name":"payment"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"delete","args":[{"type":"uint64","name":"id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"exists","args":[{"type":"address","name":"address"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"get","args":[{"type":"address","name":"address"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"mustGet","args":[{"type":"address","name":"address"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getList","args":[{"type":"address[]","name":"addresses"}],"returns":{"type":"byte[][]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"mustGetList","args":[{"type":"address[]","name":"addresses"}],"returns":{"type":"byte[][]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"walletIDsByAccounts":{"keyType":"AVMBytes","valueType":"AVMBytes","prefix":""}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[931,1065],"errorMessage":"Account not found"},{"pc":[786,918,938,985,1070],"errorMessage":"Box must have value"},{"pc":[966,1057],"errorMessage":"Index access is out of bounds"},{"pc":[429],"errorMessage":"Length must be 16"},{"pc":[98,117,136,163,190,216,232,259],"errorMessage":"OnCompletion is not NoOp"},{"pc":[675,688,771],"errorMessage":"application exists"},{"pc":[281],"errorMessage":"can only call when creating"},{"pc":[101,120,139,166,193,219,235,262],"errorMessage":"can only call when not creating"},{"pc":[780],"errorMessage":"does not exist"},{"pc":[804,880],"errorMessage":"forbidden"},{"pc":[518],"errorMessage":"invalid payment"},{"pc":[245],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDIgMzIgNDAwIDg5MDAgMTAwMDAwCiAgICBieXRlY2Jsb2NrIDB4MTUxZjdjNzUgIiIgMHgwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxNQogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3Jvd0ZhY3RvcnkgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMTMKICAgIHB1c2hieXRlc3MgMHhiNTUxZDVmZiAweGQ4NWNmMTg0IDB4OGEzOWU3OWYgMHg0YzlmYjY1NiAweDNjMWE2ZjMzIDB4MmI1NjAyYTMgMHgxM2RjNTA4YSAweDQ3NWQzNzczIC8vIG1ldGhvZCAibmV3Q29zdCgpdWludDY0IiwgbWV0aG9kICJuZXcocGF5KXVpbnQ2NCIsIG1ldGhvZCAiZGVsZXRlKHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJleGlzdHMoYWRkcmVzcylib29sIiwgbWV0aG9kICJnZXQoYWRkcmVzcylieXRlW10iLCBtZXRob2QgIm11c3RHZXQoYWRkcmVzcylieXRlW10iLCBtZXRob2QgImdldExpc3QoYWRkcmVzc1tdKWJ5dGVbXVtdIiwgbWV0aG9kICJtdXN0R2V0TGlzdChhZGRyZXNzW10pYnl0ZVtdW10iCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX25ld0Nvc3Rfcm91dGVAMyBtYWluX25ld19yb3V0ZUA0IG1haW5fZGVsZXRlX3JvdXRlQDUgbWFpbl9leGlzdHNfcm91dGVANiBtYWluX2dldF9yb3V0ZUA3IG1haW5fbXVzdEdldF9yb3V0ZUA4IG1haW5fZ2V0TGlzdF9yb3V0ZUA5IG1haW5fbXVzdEdldExpc3Rfcm91dGVAMTAKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxNzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjE1CiAgICAvLyBleHBvcnQgY2xhc3MgRXNjcm93RmFjdG9yeSBleHRlbmRzIENvbnRyYWN0IHsKICAgIGludGNfMCAvLyAwCiAgICByZXR1cm4KCm1haW5fbXVzdEdldExpc3Rfcm91dGVAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxNDUKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxNQogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3Jvd0ZhY3RvcnkgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxNDUKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBtdXN0R2V0TGlzdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9nZXRMaXN0X3JvdXRlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxMzAKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxNQogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3Jvd0ZhY3RvcnkgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxMzAKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBnZXRMaXN0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX211c3RHZXRfcm91dGVAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjEyMwogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjE1CiAgICAvLyBleHBvcnQgY2xhc3MgRXNjcm93RmFjdG9yeSBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjEyMwogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICBjYWxsc3ViIG11c3RHZXQKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2dldF9yb3V0ZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MTE0CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MTUKICAgIC8vIGV4cG9ydCBjbGFzcyBFc2Nyb3dGYWN0b3J5IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MTE0CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGNhbGxzdWIgZ2V0CiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9leGlzdHNfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjEwOAogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjE1CiAgICAvLyBleHBvcnQgY2xhc3MgRXNjcm93RmFjdG9yeSBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjEwOAogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICBjYWxsc3ViIGV4aXN0cwogICAgcHVzaGJ5dGVzIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZWNfMCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9kZWxldGVfcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjc4CiAgICAvLyBkZWxldGUoaWQ6IHVpbnQ2NCk6IHZvaWQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxNQogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3Jvd0ZhY3RvcnkgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo3OAogICAgLy8gZGVsZXRlKGlkOiB1aW50NjQpOiB2b2lkIHsKICAgIGNhbGxzdWIgZGVsZXRlCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX25ld19yb3V0ZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MzMKICAgIC8vIG5ldyhwYXltZW50OiBndHhuLlBheW1lbnRUeG4pOiB1aW50NjQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxNQogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3Jvd0ZhY3RvcnkgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMSAvLyBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjMzCiAgICAvLyBuZXcocGF5bWVudDogZ3R4bi5QYXltZW50VHhuKTogdWludDY0IHsKICAgIGNhbGxzdWIgbmV3CiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX25ld0Nvc3Rfcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjI0CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBuZXdDb3N0CiAgICBpdG9iCiAgICBieXRlY18wIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjE1CiAgICAvLyBleHBvcnQgY2xhc3MgRXNjcm93RmFjdG9yeSBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMTcKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgoKLy8gX3B1eWFfbGliLmFyYzQuZHluYW1pY19hcnJheV9jb25jYXRfYnl0ZV9sZW5ndGhfaGVhZChhcnJheTogYnl0ZXMsIG5ld19pdGVtc19ieXRlczogYnl0ZXMsIG5ld19pdGVtc19jb3VudDogdWludDY0KSAtPiBieXRlczoKZHluYW1pY19hcnJheV9jb25jYXRfYnl0ZV9sZW5ndGhfaGVhZDoKICAgIHByb3RvIDMgMQogICAgZnJhbWVfZGlnIC0zCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGR1cAogICAgZnJhbWVfZGlnIC0xCiAgICArCiAgICBzd2FwCiAgICBpbnRjXzIgLy8gMgogICAgKgogICAgaW50Y18yIC8vIDIKICAgICsKICAgIGRpZyAxCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgY292ZXIgMgogICAgZnJhbWVfZGlnIC0zCiAgICBpbnRjXzIgLy8gMgogICAgZGlnIDIKICAgIHN1YnN0cmluZzMKICAgIGZyYW1lX2RpZyAtMQogICAgaW50Y18yIC8vIDIKICAgICoKICAgIGJ6ZXJvCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMwogICAgbGVuCiAgICBmcmFtZV9kaWcgLTMKICAgIHVuY292ZXIgMwogICAgdW5jb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBpbnRjXzIgLy8gMgogICAgKgogICAgZHVwCiAgICBpbnRjXzAgLy8gMAogICAgc3dhcAoKZHluYW1pY19hcnJheV9jb25jYXRfYnl0ZV9sZW5ndGhfaGVhZF9mb3JfaGVhZGVyQDI6CiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfZGlnIDIKICAgIDwKICAgIGJ6IGR5bmFtaWNfYXJyYXlfY29uY2F0X2J5dGVfbGVuZ3RoX2hlYWRfYWZ0ZXJfZm9yQDUKICAgIGZyYW1lX2RpZyA0CiAgICBkdXAKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBmcmFtZV9kaWcgMQogICAgZnJhbWVfZGlnIDMKICAgIGR1cAogICAgY292ZXIgNAogICAgdW5jb3ZlciAyCiAgICByZXBsYWNlMwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEKICAgIGRpZyAxCiAgICBleHRyYWN0X3VpbnQxNgogICAgaW50Y18yIC8vIDIKICAgICsKICAgICsKICAgIGZyYW1lX2J1cnkgNAogICAgaW50Y18yIC8vIDIKICAgICsKICAgIGZyYW1lX2J1cnkgMwogICAgYiBkeW5hbWljX2FycmF5X2NvbmNhdF9ieXRlX2xlbmd0aF9oZWFkX2Zvcl9oZWFkZXJAMgoKZHluYW1pY19hcnJheV9jb25jYXRfYnl0ZV9sZW5ndGhfaGVhZF9hZnRlcl9mb3JANToKICAgIGZyYW1lX2RpZyAwCiAgICBmcmFtZV9kaWcgMQogICAgY29uY2F0CiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjpieXRlczE2KGFjYzogYnl0ZXMpIC0+IGJ5dGVzOgpieXRlczE2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MTEKICAgIC8vIGZ1bmN0aW9uIGJ5dGVzMTYoYWNjOiBBY2NvdW50KTogYnl0ZXM8MTY+IHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MTIKICAgIC8vIHJldHVybiBhY2MuYnl0ZXMuc2xpY2UoMCwgMTYpLnRvRml4ZWQoeyBsZW5ndGg6IDE2IH0pCiAgICBmcmFtZV9kaWcgLTEKICAgIGxlbgogICAgaW50Y18wIC8vIDAKICAgIGRpZyAxCiAgICA+PQogICAgaW50Y18wIC8vIDAKICAgIGRpZyAyCiAgICB1bmNvdmVyIDIKICAgIHNlbGVjdAogICAgcHVzaGludCAxNiAvLyAxNgogICAgZGlnIDIKICAgID49CiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBmcmFtZV9kaWcgLTEKICAgIGNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICA9PQogICAgYXNzZXJ0IC8vIExlbmd0aCBtdXN0IGJlIDE2CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo6RXNjcm93RmFjdG9yeS5uZXdDb3N0KCkgLT4gdWludDY0OgpuZXdDb3N0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MjYKICAgIC8vIGNvbnN0IGFwcENhbGxlciA9IEdsb2JhbC5jYWxsZXJBcHBsaWNhdGlvbklkID09PSAwCiAgICBnbG9iYWwgQ2FsbGVyQXBwbGljYXRpb25JRAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MjctMjkKICAgIC8vIGNvbnN0IGNyZWF0b3IgPSBhcHBDYWxsZXIKICAgIC8vICAgPyBCeXRlcyhieXRlczE2KFR4bi5zZW5kZXIpKQogICAgLy8gICA6IEJ5dGVzKGl0b2IoR2xvYmFsLmNhbGxlckFwcGxpY2F0aW9uSWQpKQogICAgYm56IG5ld0Nvc3RfdGVybmFyeV9mYWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoyOAogICAgLy8gPyBCeXRlcyhieXRlczE2KFR4bi5zZW5kZXIpKQogICAgdHhuIFNlbmRlcgogICAgY2FsbHN1YiBieXRlczE2CgpuZXdDb3N0X3Rlcm5hcnlfbWVyZ2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjMwCiAgICAvLyByZXR1cm4gKE1pblBhZ2VzICsgdGhpcy5tYnIoY3JlYXRvci5sZW5ndGgpICsgR2xvYmFsLm1pbkJhbGFuY2UpCiAgICBsZW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29uc3RhbnRzLnRzOjEwCiAgICAvLyBleHBvcnQgY29uc3QgQm94Q29zdFBlckJ5dGU6IHVpbnQ2NCA9IDQwMDsKICAgIGludGMgNCAvLyA0MDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjIxCiAgICAvLyByZXR1cm4gTWluV2FsbGV0SURzQnlBY2NvdW50c01iciArIChsZW5ndGggKiBCb3hDb3N0UGVyQnl0ZSkKICAgICoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29uc3RhbnRzLnRzOjgKICAgIC8vIGV4cG9ydCBjb25zdCBNaW5XYWxsZXRJRHNCeUFjY291bnRzTWJyOiB1aW50NjQgPSA4XzkwMDsKICAgIGludGMgNSAvLyA4OTAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoyMQogICAgLy8gcmV0dXJuIE1pbldhbGxldElEc0J5QWNjb3VudHNNYnIgKyAobGVuZ3RoICogQm94Q29zdFBlckJ5dGUpCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnN0YW50cy50czo1CiAgICAvLyBleHBvcnQgY29uc3QgTWluUGFnZXM6IHVpbnQ2NCA9IDEwMF8wMDA7CiAgICBpbnRjIDYgLy8gMTAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czozMAogICAgLy8gcmV0dXJuIChNaW5QYWdlcyArIHRoaXMubWJyKGNyZWF0b3IubGVuZ3RoKSArIEdsb2JhbC5taW5CYWxhbmNlKQogICAgKwogICAgZ2xvYmFsIE1pbkJhbGFuY2UKICAgICsKICAgIHJldHN1YgoKbmV3Q29zdF90ZXJuYXJ5X2ZhbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoyOQogICAgLy8gOiBCeXRlcyhpdG9iKEdsb2JhbC5jYWxsZXJBcHBsaWNhdGlvbklkKSkKICAgIGdsb2JhbCBDYWxsZXJBcHBsaWNhdGlvbklECiAgICBpdG9iCiAgICBiIG5ld0Nvc3RfdGVybmFyeV9tZXJnZUAzCgoKLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6OkVzY3Jvd0ZhY3RvcnkubmV3KHBheW1lbnQ6IHVpbnQ2NCkgLT4gdWludDY0OgpuZXc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czozMwogICAgLy8gbmV3KHBheW1lbnQ6IGd0eG4uUGF5bWVudFR4bik6IHVpbnQ2NCB7CiAgICBwcm90byAxIDEKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICIiCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjM0CiAgICAvLyBjb25zdCBhcHBDYWxsZXIgPSBHbG9iYWwuY2FsbGVyQXBwbGljYXRpb25JZCA9PT0gMAogICAgZ2xvYmFsIENhbGxlckFwcGxpY2F0aW9uSUQKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MzUtMzcKICAgIC8vIGNvbnN0IGNyZWF0b3IgPSBhcHBDYWxsZXIKICAgIC8vICAgPyBCeXRlcyhieXRlczE2KFR4bi5zZW5kZXIpKQogICAgLy8gICA6IEJ5dGVzKGl0b2IoR2xvYmFsLmNhbGxlckFwcGxpY2F0aW9uSWQpKQogICAgYm56IG5ld190ZXJuYXJ5X2ZhbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjM2CiAgICAvLyA/IEJ5dGVzKGJ5dGVzMTYoVHhuLnNlbmRlcikpCiAgICB0eG4gU2VuZGVyCiAgICBjYWxsc3ViIGJ5dGVzMTYKICAgIGZyYW1lX2J1cnkgMAoKbmV3X3Rlcm5hcnlfbWVyZ2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjQxCiAgICAvLyBjb25zdCBjaGlsZEFwcE1CUjogdWludDY0ID0gTWluUGFnZXMgKyB0aGlzLm1icihjcmVhdG9yLmxlbmd0aCkKICAgIGZyYW1lX2RpZyAwCiAgICBsZW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29uc3RhbnRzLnRzOjEwCiAgICAvLyBleHBvcnQgY29uc3QgQm94Q29zdFBlckJ5dGU6IHVpbnQ2NCA9IDQwMDsKICAgIGludGMgNCAvLyA0MDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjIxCiAgICAvLyByZXR1cm4gTWluV2FsbGV0SURzQnlBY2NvdW50c01iciArIChsZW5ndGggKiBCb3hDb3N0UGVyQnl0ZSkKICAgICoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29uc3RhbnRzLnRzOjgKICAgIC8vIGV4cG9ydCBjb25zdCBNaW5XYWxsZXRJRHNCeUFjY291bnRzTWJyOiB1aW50NjQgPSA4XzkwMDsKICAgIGludGMgNSAvLyA4OTAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoyMQogICAgLy8gcmV0dXJuIE1pbldhbGxldElEc0J5QWNjb3VudHNNYnIgKyAobGVuZ3RoICogQm94Q29zdFBlckJ5dGUpCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnN0YW50cy50czo1CiAgICAvLyBleHBvcnQgY29uc3QgTWluUGFnZXM6IHVpbnQ2NCA9IDEwMF8wMDA7CiAgICBpbnRjIDYgLy8gMTAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo0MQogICAgLy8gY29uc3QgY2hpbGRBcHBNQlI6IHVpbnQ2NCA9IE1pblBhZ2VzICsgdGhpcy5tYnIoY3JlYXRvci5sZW5ndGgpCiAgICArCiAgICBmcmFtZV9idXJ5IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjQzLTUwCiAgICAvLyBhc3NlcnRNYXRjaCgKICAgIC8vICAgcGF5bWVudCwKICAgIC8vICAgewogICAgLy8gICAgIHJlY2VpdmVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vICAgICBhbW91bnQ6IGNoaWxkQXBwTUJSICsgR2xvYmFsLm1pbkJhbGFuY2UsCiAgICAvLyAgIH0sCiAgICAvLyAgIEVSUl9JTlZBTElEX1BBWU1FTlQKICAgIC8vICkKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjQ2CiAgICAvLyByZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6NDMtNTAKICAgIC8vIGFzc2VydE1hdGNoKAogICAgLy8gICBwYXltZW50LAogICAgLy8gICB7CiAgICAvLyAgICAgcmVjZWl2ZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gICAgIGFtb3VudDogY2hpbGRBcHBNQlIgKyBHbG9iYWwubWluQmFsYW5jZSwKICAgIC8vICAgfSwKICAgIC8vICAgRVJSX0lOVkFMSURfUEFZTUVOVAogICAgLy8gKQogICAgPT0KICAgIGJ6IG5ld19ib29sX2ZhbHNlQDYKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo0NwogICAgLy8gYW1vdW50OiBjaGlsZEFwcE1CUiArIEdsb2JhbC5taW5CYWxhbmNlLAogICAgZnJhbWVfZGlnIDEKICAgIGdsb2JhbCBNaW5CYWxhbmNlCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo0My01MAogICAgLy8gYXNzZXJ0TWF0Y2goCiAgICAvLyAgIHBheW1lbnQsCiAgICAvLyAgIHsKICAgIC8vICAgICByZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgICAgYW1vdW50OiBjaGlsZEFwcE1CUiArIEdsb2JhbC5taW5CYWxhbmNlLAogICAgLy8gICB9LAogICAgLy8gICBFUlJfSU5WQUxJRF9QQVlNRU5UCiAgICAvLyApCiAgICA9PQogICAgYnogbmV3X2Jvb2xfZmFsc2VANgogICAgaW50Y18xIC8vIDEKCm5ld19ib29sX21lcmdlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo0My01MAogICAgLy8gYXNzZXJ0TWF0Y2goCiAgICAvLyAgIHBheW1lbnQsCiAgICAvLyAgIHsKICAgIC8vICAgICByZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgICAgYW1vdW50OiBjaGlsZEFwcE1CUiArIEdsb2JhbC5taW5CYWxhbmNlLAogICAgLy8gICB9LAogICAgLy8gICBFUlJfSU5WQUxJRF9QQVlNRU5UCiAgICAvLyApCiAgICBhc3NlcnQgLy8gaW52YWxpZCBwYXltZW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo1MgogICAgLy8gY29uc3QgbmV3RXNjcm93ID0gZXNjcm93LmJhcmVDcmVhdGUoeyBmZWUgfSkuY3JlYXRlZEFwcAogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MzkKICAgIC8vIGNvbnN0IGVzY3JvdyA9IGNvbXBpbGVBcmM0KEVzY3Jvdyk7CiAgICBwdXNoYnl0ZXMgYmFzZTY0KENvRUJRdz09KQogICAgaXR4bl9maWVsZCBDbGVhclN0YXRlUHJvZ3JhbVBhZ2VzCiAgICBwdXNoYnl0ZXMgYmFzZTY0KENpQUNBUUF4RzBFQU40SUNCQUM0Yks4RUpEZU5QRFlhQUk0Q0FCQUFBaU5ETVJtQkJSSkVNUmhFaUFBOElrTXhHUlJFTVJoRU5ob0JGOEFjaUFBTklrTXhHVUQvMlRFWUZFUWlRNG9CQURFQU1na1NSTEV5Q292L3NpQ3lCeU95Q0NLeUVDT3lBYk9KTVFBeUNSSkVzVElKc2draXNoQWpzZ0d6aVE9PSkKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtUGFnZXMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjUyCiAgICAvLyBjb25zdCBuZXdFc2Nyb3cgPSBlc2Nyb3cuYmFyZUNyZWF0ZSh7IGZlZSB9KS5jcmVhdGVkQXBwCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIHB1c2hpbnQgNiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvdXRpbHMvY29uc3RhbnRzLnRzOjMKICAgIC8vIGV4cG9ydCBjb25zdCBmZWU6IHVpbnQ2NCA9IDAKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6NTIKICAgIC8vIGNvbnN0IG5ld0VzY3JvdyA9IGVzY3Jvdy5iYXJlQ3JlYXRlKHsgZmVlIH0pLmNyZWF0ZWRBcHAKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIENyZWF0ZWRBcHBsaWNhdGlvbklECiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6NTUKICAgIC8vIGNvbnN0IHNwZW5kQWNjb3VudCA9IGJ5dGVzMTYobmV3RXNjcm93LmFkZHJlc3MpCiAgICBkdXAKICAgIGFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKICAgIGFzc2VydCAvLyBhcHBsaWNhdGlvbiBleGlzdHMKICAgIGNhbGxzdWIgYnl0ZXMxNgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6NTcKICAgIC8vIHRoaXMud2FsbGV0SURzQnlBY2NvdW50cyhzcGVuZEFjY291bnQpLnZhbHVlID0gY3JlYXRvcgogICAgZHVwCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGZyYW1lX2RpZyAwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo1OS02NQogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgcmVjZWl2ZXI6IG5ld0VzY3Jvdy5hZGRyZXNzLAogICAgLy8gICAgIGFtb3VudDogR2xvYmFsLm1pbkJhbGFuY2UsCiAgICAvLyAgICAgZmVlLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjYxCiAgICAvLyByZWNlaXZlcjogbmV3RXNjcm93LmFkZHJlc3MsCiAgICBhcHBfcGFyYW1zX2dldCBBcHBBZGRyZXNzCiAgICBhc3NlcnQgLy8gYXBwbGljYXRpb24gZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo2MgogICAgLy8gYW1vdW50OiBHbG9iYWwubWluQmFsYW5jZSwKICAgIGdsb2JhbCBNaW5CYWxhbmNlCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6NTktNjQKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIHJlY2VpdmVyOiBuZXdFc2Nyb3cuYWRkcmVzcywKICAgIC8vICAgICBhbW91bnQ6IEdsb2JhbC5taW5CYWxhbmNlLAogICAgLy8gICAgIGZlZSwKICAgIC8vICAgfSkKICAgIGludGNfMSAvLyAxCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvdXRpbHMvY29uc3RhbnRzLnRzOjMKICAgIC8vIGV4cG9ydCBjb25zdCBmZWU6IHVpbnQ2NCA9IDAKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6NTktNjUKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIHJlY2VpdmVyOiBuZXdFc2Nyb3cuYWRkcmVzcywKICAgIC8vICAgICBhbW91bnQ6IEdsb2JhbC5taW5CYWxhbmNlLAogICAgLy8gICAgIGZlZSwKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6NjctNzMKICAgIC8vIGVzY3Jvdy5jYWxsLnJla2V5KHsKICAgIC8vICAgYXBwSWQ6IGlkLAogICAgLy8gICBhcmdzOiBbCiAgICAvLyAgICAgYXBwQ2FsbGVyID8gR2xvYmFsLmNhbGxlckFwcGxpY2F0aW9uQWRkcmVzcyA6IFR4bi5zZW5kZXIKICAgIC8vICAgXSwKICAgIC8vICAgZmVlCiAgICAvLyB9KQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6NzAKICAgIC8vIGFwcENhbGxlciA/IEdsb2JhbC5jYWxsZXJBcHBsaWNhdGlvbkFkZHJlc3MgOiBUeG4uc2VuZGVyCiAgICBmcmFtZV9kaWcgMwogICAgYm56IG5ld190ZXJuYXJ5X2ZhbHNlQDExCiAgICBnbG9iYWwgQ2FsbGVyQXBwbGljYXRpb25BZGRyZXNzCgpuZXdfdGVybmFyeV9tZXJnZUAxMjoKICAgIGl0eG5fZmllbGQgQWNjb3VudHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjY3LTczCiAgICAvLyBlc2Nyb3cuY2FsbC5yZWtleSh7CiAgICAvLyAgIGFwcElkOiBpZCwKICAgIC8vICAgYXJnczogWwogICAgLy8gICAgIGFwcENhbGxlciA/IEdsb2JhbC5jYWxsZXJBcHBsaWNhdGlvbkFkZHJlc3MgOiBUeG4uc2VuZGVyCiAgICAvLyAgIF0sCiAgICAvLyAgIGZlZQogICAgLy8gfSkKICAgIHB1c2hieXRlcyAweDAwYjg2Y2FmIC8vIG1ldGhvZCAicmVrZXkoYWNjb3VudCl2b2lkIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIHB1c2hieXRlcyAweDAxCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6NjctNzMKICAgIC8vIGVzY3Jvdy5jYWxsLnJla2V5KHsKICAgIC8vICAgYXBwSWQ6IGlkLAogICAgLy8gICBhcmdzOiBbCiAgICAvLyAgICAgYXBwQ2FsbGVyID8gR2xvYmFsLmNhbGxlckFwcGxpY2F0aW9uQWRkcmVzcyA6IFR4bi5zZW5kZXIKICAgIC8vICAgXSwKICAgIC8vICAgZmVlCiAgICAvLyB9KQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBmcmFtZV9kaWcgMgogICAgZHVwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIHB1c2hpbnQgNiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvdXRpbHMvY29uc3RhbnRzLnRzOjMKICAgIC8vIGV4cG9ydCBjb25zdCBmZWU6IHVpbnQ2NCA9IDAKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6NjctNzMKICAgIC8vIGVzY3Jvdy5jYWxsLnJla2V5KHsKICAgIC8vICAgYXBwSWQ6IGlkLAogICAgLy8gICBhcmdzOiBbCiAgICAvLyAgICAgYXBwQ2FsbGVyID8gR2xvYmFsLmNhbGxlckFwcGxpY2F0aW9uQWRkcmVzcyA6IFR4bi5zZW5kZXIKICAgIC8vICAgXSwKICAgIC8vICAgZmVlCiAgICAvLyB9KQogICAgaXR4bl9zdWJtaXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjc1CiAgICAvLyByZXR1cm4gaWQKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgpuZXdfdGVybmFyeV9mYWxzZUAxMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjcwCiAgICAvLyBhcHBDYWxsZXIgPyBHbG9iYWwuY2FsbGVyQXBwbGljYXRpb25BZGRyZXNzIDogVHhuLnNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgYiBuZXdfdGVybmFyeV9tZXJnZUAxMgoKbmV3X2Jvb2xfZmFsc2VANjoKICAgIGludGNfMCAvLyAwCiAgICBiIG5ld19ib29sX21lcmdlQDcKCm5ld190ZXJuYXJ5X2ZhbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czozNwogICAgLy8gOiBCeXRlcyhpdG9iKEdsb2JhbC5jYWxsZXJBcHBsaWNhdGlvbklkKSkKICAgIGdsb2JhbCBDYWxsZXJBcHBsaWNhdGlvbklECiAgICBpdG9iCiAgICBmcmFtZV9idXJ5IDAKICAgIGIgbmV3X3Rlcm5hcnlfbWVyZ2VAMwoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjpFc2Nyb3dGYWN0b3J5LmRlbGV0ZShpZDogdWludDY0KSAtPiB2b2lkOgpkZWxldGU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo3OAogICAgLy8gZGVsZXRlKGlkOiB1aW50NjQpOiB2b2lkIHsKICAgIHByb3RvIDEgMAogICAgYnl0ZWNfMSAvLyAiIgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6NzkKICAgIC8vIGNvbnN0IGNhbGxlciA9IEdsb2JhbC5jYWxsZXJBcHBsaWNhdGlvbklkCiAgICBnbG9iYWwgQ2FsbGVyQXBwbGljYXRpb25JRAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6ODAKICAgIC8vIGNvbnN0IGtleSA9IGJ5dGVzMTYoQXBwbGljYXRpb24oaWQpLmFkZHJlc3MpCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9wYXJhbXNfZ2V0IEFwcEFkZHJlc3MKICAgIGFzc2VydCAvLyBhcHBsaWNhdGlvbiBleGlzdHMKICAgIGNhbGxzdWIgYnl0ZXMxNgogICAgZHVwbiAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo4MQogICAgLy8gYXNzZXJ0KHRoaXMud2FsbGV0SURzQnlBY2NvdW50cyhrZXkpLmV4aXN0cywgRVJSX0RPRVNOVF9FWElTVCkKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIGRvZXMgbm90IGV4aXN0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo4MwogICAgLy8gY29uc3QgY3JlYXRvciA9IHRoaXMud2FsbGV0SURzQnlBY2NvdW50cyhrZXkpLnZhbHVlCiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjg0CiAgICAvLyBpZiAoY3JlYXRvci5sZW5ndGggPT09IDgpIHsKICAgIGxlbgogICAgZHVwCiAgICBjb3ZlciAyCiAgICBwdXNoaW50IDggLy8gOAogICAgPT0KICAgIGR1cAogICAgY292ZXIgMgogICAgYnogZGVsZXRlX2Vsc2VfYm9keUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo4NQogICAgLy8gYXNzZXJ0KGNhbGxlciA9PT0gYnRvaShjcmVhdG9yKSwgRVJSX0ZPUkJJRERFTik7CiAgICBidG9pCiAgICBmcmFtZV9kaWcgMQogICAgPT0KICAgIGFzc2VydCAvLyBmb3JiaWRkZW4KCmRlbGV0ZV9hZnRlcl9pZl9lbHNlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo5MgogICAgLy8gY29uc3QgY2hpbGRBcHBNQlI6IHVpbnQ2NCA9IEdsb2JhbC5taW5CYWxhbmNlICsgdGhpcy5tYnIoY3JlYXRvci5sZW5ndGgpCiAgICBnbG9iYWwgTWluQmFsYW5jZQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MjEKICAgIC8vIHJldHVybiBNaW5XYWxsZXRJRHNCeUFjY291bnRzTWJyICsgKGxlbmd0aCAqIEJveENvc3RQZXJCeXRlKQogICAgZnJhbWVfZGlnIDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29uc3RhbnRzLnRzOjEwCiAgICAvLyBleHBvcnQgY29uc3QgQm94Q29zdFBlckJ5dGU6IHVpbnQ2NCA9IDQwMDsKICAgIGludGMgNCAvLyA0MDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjIxCiAgICAvLyByZXR1cm4gTWluV2FsbGV0SURzQnlBY2NvdW50c01iciArIChsZW5ndGggKiBCb3hDb3N0UGVyQnl0ZSkKICAgICoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29uc3RhbnRzLnRzOjgKICAgIC8vIGV4cG9ydCBjb25zdCBNaW5XYWxsZXRJRHNCeUFjY291bnRzTWJyOiB1aW50NjQgPSA4XzkwMDsKICAgIGludGMgNSAvLyA4OTAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoyMQogICAgLy8gcmV0dXJuIE1pbldhbGxldElEc0J5QWNjb3VudHNNYnIgKyAobGVuZ3RoICogQm94Q29zdFBlckJ5dGUpCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo5MgogICAgLy8gY29uc3QgY2hpbGRBcHBNQlI6IHVpbnQ2NCA9IEdsb2JhbC5taW5CYWxhbmNlICsgdGhpcy5tYnIoY3JlYXRvci5sZW5ndGgpCiAgICArCiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjk0CiAgICAvLyBzcGVuZGluZ0FjY291bnQuY2FsbC5kZWxldGUoeyBhcHBJZDogaWQsIGZlZSB9KQogICAgaXR4bl9iZWdpbgogICAgcHVzaGJ5dGVzIDB4MjQzNzhkM2MgLy8gbWV0aG9kICJkZWxldGUoKXZvaWQiCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgcHVzaGludCA1IC8vIDUKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgcHVzaGludCA2IC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy91dGlscy9jb25zdGFudHMudHM6MwogICAgLy8gZXhwb3J0IGNvbnN0IGZlZTogdWludDY0ID0gMAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo5NAogICAgLy8gc3BlbmRpbmdBY2NvdW50LmNhbGwuZGVsZXRlKHsgYXBwSWQ6IGlkLCBmZWUgfSkKICAgIGl0eG5fc3VibWl0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo5NgogICAgLy8gdGhpcy53YWxsZXRJRHNCeUFjY291bnRzKGtleSkuZGVsZXRlKCkKICAgIGZyYW1lX2RpZyAyCiAgICBib3hfZGVsCiAgICBwb3AKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjk4LTEwNAogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgcmVjZWl2ZXI6IGNyZWF0b3IubGVuZ3RoID09PSA4ID8gR2xvYmFsLmNhbGxlckFwcGxpY2F0aW9uQWRkcmVzcyA6IFR4bi5zZW5kZXIsCiAgICAvLyAgICAgYW1vdW50OiBjaGlsZEFwcE1CUiwKICAgIC8vICAgICBmZWUsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MTAwCiAgICAvLyByZWNlaXZlcjogY3JlYXRvci5sZW5ndGggPT09IDggPyBHbG9iYWwuY2FsbGVyQXBwbGljYXRpb25BZGRyZXNzIDogVHhuLnNlbmRlciwKICAgIGZyYW1lX2RpZyA0CiAgICBieiBkZWxldGVfdGVybmFyeV9mYWxzZUA2CiAgICBnbG9iYWwgQ2FsbGVyQXBwbGljYXRpb25BZGRyZXNzCgpkZWxldGVfdGVybmFyeV9tZXJnZUA3OgogICAgZnJhbWVfZGlnIDAKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo5OC0xMDMKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIHJlY2VpdmVyOiBjcmVhdG9yLmxlbmd0aCA9PT0gOCA/IEdsb2JhbC5jYWxsZXJBcHBsaWNhdGlvbkFkZHJlc3MgOiBUeG4uc2VuZGVyLAogICAgLy8gICAgIGFtb3VudDogY2hpbGRBcHBNQlIsCiAgICAvLyAgICAgZmVlLAogICAgLy8gICB9KQogICAgaW50Y18xIC8vIDEKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy91dGlscy9jb25zdGFudHMudHM6MwogICAgLy8gZXhwb3J0IGNvbnN0IGZlZTogdWludDY0ID0gMAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo5OC0xMDQKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIHJlY2VpdmVyOiBjcmVhdG9yLmxlbmd0aCA9PT0gOCA/IEdsb2JhbC5jYWxsZXJBcHBsaWNhdGlvbkFkZHJlc3MgOiBUeG4uc2VuZGVyLAogICAgLy8gICAgIGFtb3VudDogY2hpbGRBcHBNQlIsCiAgICAvLyAgICAgZmVlLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCmRlbGV0ZV90ZXJuYXJ5X2ZhbHNlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxMDAKICAgIC8vIHJlY2VpdmVyOiBjcmVhdG9yLmxlbmd0aCA9PT0gOCA/IEdsb2JhbC5jYWxsZXJBcHBsaWNhdGlvbkFkZHJlc3MgOiBUeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgYiBkZWxldGVfdGVybmFyeV9tZXJnZUA3CgpkZWxldGVfZWxzZV9ib2R5QDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo4NwogICAgLy8gYXNzZXJ0KEJ5dGVzKGJ5dGVzMTYoVHhuLnNlbmRlcikpID09PSBjcmVhdG9yLCBFUlJfRk9SQklEREVOKTsKICAgIHR4biBTZW5kZXIKICAgIGNhbGxzdWIgYnl0ZXMxNgogICAgPT0KICAgIGFzc2VydCAvLyBmb3JiaWRkZW4KICAgIGIgZGVsZXRlX2FmdGVyX2lmX2Vsc2VAMwoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjpFc2Nyb3dGYWN0b3J5LmV4aXN0cyhhZGRyZXNzOiBieXRlcykgLT4gdWludDY0OgpleGlzdHM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxMDgtMTA5CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIC8vIGV4aXN0cyhhZGRyZXNzOiBBZGRyZXNzKTogYm9vbGVhbiB7CiAgICBwcm90byAxIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjExMAogICAgLy8gcmV0dXJuIHRoaXMud2FsbGV0SURzQnlBY2NvdW50cyhieXRlczE2KGFkZHJlc3MubmF0aXZlKSkuZXhpc3RzCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgYnl0ZXMxNgogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czo6RXNjcm93RmFjdG9yeS5nZXQoYWRkcmVzczogYnl0ZXMpIC0+IGJ5dGVzOgpnZXQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxMTQtMTE1CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIC8vIGdldChhZGRyZXNzOiBBZGRyZXNzKTogYnl0ZXMgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxMTYKICAgIC8vIGlmICghdGhpcy53YWxsZXRJRHNCeUFjY291bnRzKGJ5dGVzMTYoYWRkcmVzcy5uYXRpdmUpKS5leGlzdHMpIHsKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBieXRlczE2CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJueiBnZXRfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxMTcKICAgIC8vIHJldHVybiBCeXRlcygnJykKICAgIGJ5dGVjXzEgLy8gIiIKICAgIHJldHN1YgoKZ2V0X2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjExOQogICAgLy8gcmV0dXJuIHRoaXMud2FsbGV0SURzQnlBY2NvdW50cyhieXRlczE2KGFkZHJlc3MubmF0aXZlKSkudmFsdWUKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBieXRlczE2CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6OkVzY3Jvd0ZhY3RvcnkubXVzdEdldChhZGRyZXNzOiBieXRlcykgLT4gYnl0ZXM6Cm11c3RHZXQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxMjMtMTI0CiAgICAvLyBAYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIC8vIG11c3RHZXQoYWRkcmVzczogQWRkcmVzcyk6IGJ5dGVzIHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MTI1CiAgICAvLyBhc3NlcnQodGhpcy53YWxsZXRJRHNCeUFjY291bnRzKGJ5dGVzMTYoYWRkcmVzcy5uYXRpdmUpKS5leGlzdHMsICdBY2NvdW50IG5vdCBmb3VuZCcpCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgYnl0ZXMxNgogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gQWNjb3VudCBub3QgZm91bmQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjEyNgogICAgLy8gcmV0dXJuIHRoaXMud2FsbGV0SURzQnlBY2NvdW50cyhieXRlczE2KGFkZHJlc3MubmF0aXZlKSkudmFsdWUKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBieXRlczE2CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6OkVzY3Jvd0ZhY3RvcnkuZ2V0TGlzdChhZGRyZXNzZXM6IGJ5dGVzKSAtPiBieXRlczoKZ2V0TGlzdDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjEzMC0xMzEKICAgIC8vIEBhYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgLy8gZ2V0TGlzdChhZGRyZXNzZXM6IER5bmFtaWNBcnJheTxBZGRyZXNzPik6IER5bmFtaWNBcnJheTxEeW5hbWljQnl0ZXM+IHsKICAgIHByb3RvIDEgMQogICAgaW50Y18wIC8vIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjEzMgogICAgLy8gY29uc3QgYXBwcyA9IG5ldyBEeW5hbWljQXJyYXk8RHluYW1pY0J5dGVzPigpCiAgICBieXRlY18yIC8vIDB4MDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MTMzCiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAwOyBpIDwgYWRkcmVzc2VzLmxlbmd0aDsgaSsrKSB7CiAgICBpbnRjXzAgLy8gMAoKZ2V0TGlzdF93aGlsZV90b3BAMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjEzMwogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IGFkZHJlc3Nlcy5sZW5ndGg7IGkrKykgewogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGZyYW1lX2RpZyAyCiAgICA+CiAgICBieiBnZXRMaXN0X2FmdGVyX3doaWxlQDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjEzNAogICAgLy8gY29uc3QgYWRkcmVzcyA9IGFkZHJlc3Nlc1tpXQogICAgZnJhbWVfZGlnIC0xCiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDIKICAgIGludGNfMyAvLyAzMgogICAgKgogICAgaW50Y18zIC8vIDMyCiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxMzUKICAgIC8vIGlmICh0aGlzLndhbGxldElEc0J5QWNjb3VudHMoYnl0ZXMxNihhZGRyZXNzLm5hdGl2ZSkpLmV4aXN0cykgewogICAgY2FsbHN1YiBieXRlczE2CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IGdldExpc3RfZWxzZV9ib2R5QDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjEzNgogICAgLy8gYXBwcy5wdXNoKG5ldyBEeW5hbWljQnl0ZXModGhpcy53YWxsZXRJRHNCeUFjY291bnRzKGJ5dGVzMTYoYWRkcmVzcy5uYXRpdmUpKS52YWx1ZSkpCiAgICBmcmFtZV9kaWcgMAogICAgY2FsbHN1YiBieXRlczE2CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAxCiAgICBzd2FwCiAgICBpbnRjXzEgLy8gMQogICAgY2FsbHN1YiBkeW5hbWljX2FycmF5X2NvbmNhdF9ieXRlX2xlbmd0aF9oZWFkCiAgICBmcmFtZV9idXJ5IDEKCmdldExpc3RfYWZ0ZXJfaWZfZWxzZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MTMzCiAgICAvLyBmb3IgKGxldCBpOiB1aW50NjQgPSAwOyBpIDwgYWRkcmVzc2VzLmxlbmd0aDsgaSsrKSB7CiAgICBmcmFtZV9kaWcgMgogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMgogICAgYiBnZXRMaXN0X3doaWxlX3RvcEAxCgpnZXRMaXN0X2Vsc2VfYm9keUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MTM4CiAgICAvLyBhcHBzLnB1c2gobmV3IER5bmFtaWNCeXRlcygnJykpCiAgICBmcmFtZV9kaWcgMQogICAgYnl0ZWNfMiAvLyAweDAwMDAKICAgIGludGNfMSAvLyAxCiAgICBjYWxsc3ViIGR5bmFtaWNfYXJyYXlfY29uY2F0X2J5dGVfbGVuZ3RoX2hlYWQKICAgIGZyYW1lX2J1cnkgMQogICAgYiBnZXRMaXN0X2FmdGVyX2lmX2Vsc2VANQoKZ2V0TGlzdF9hZnRlcl93aGlsZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MTQxCiAgICAvLyByZXR1cm4gYXBwcwogICAgZnJhbWVfZGlnIDEKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6OkVzY3Jvd0ZhY3RvcnkubXVzdEdldExpc3QoYWRkcmVzc2VzOiBieXRlcykgLT4gYnl0ZXM6Cm11c3RHZXRMaXN0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MTQ1LTE0NgogICAgLy8gQGFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICAvLyBtdXN0R2V0TGlzdChhZGRyZXNzZXM6IER5bmFtaWNBcnJheTxBZGRyZXNzPik6IER5bmFtaWNBcnJheTxEeW5hbWljQnl0ZXM+IHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9mYWN0b3J5LmFsZ28udHM6MTQ3CiAgICAvLyBjb25zdCBhcHBzID0gbmV3IER5bmFtaWNBcnJheTxEeW5hbWljQnl0ZXM+KCkKICAgIGJ5dGVjXzIgLy8gMHgwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxNDgKICAgIC8vIGZvciAobGV0IGk6IHVpbnQ2NCA9IDA7IGkgPCBhZGRyZXNzZXMubGVuZ3RoOyBpKyspIHsKICAgIGludGNfMCAvLyAwCgptdXN0R2V0TGlzdF93aGlsZV90b3BAMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjE0OAogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IGFkZHJlc3Nlcy5sZW5ndGg7IGkrKykgewogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGZyYW1lX2RpZyAxCiAgICA+CiAgICBieiBtdXN0R2V0TGlzdF9hZnRlcl93aGlsZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxNDkKICAgIC8vIGNvbnN0IGFkZHJlc3MgPSBhZGRyZXNzZXNbaV0KICAgIGZyYW1lX2RpZyAtMQogICAgZXh0cmFjdCAyIDAKICAgIGZyYW1lX2RpZyAxCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGludGNfMyAvLyAzMgogICAgKgogICAgaW50Y18zIC8vIDMyCiAgICBleHRyYWN0MyAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjE1MAogICAgLy8gYXNzZXJ0KHRoaXMud2FsbGV0SURzQnlBY2NvdW50cyhieXRlczE2KGFkZHJlc3MubmF0aXZlKSkuZXhpc3RzLCAnQWNjb3VudCBub3QgZm91bmQnKQogICAgZHVwCiAgICBjYWxsc3ViIGJ5dGVzMTYKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEFjY291bnQgbm90IGZvdW5kCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2ZhY3RvcnkuYWxnby50czoxNTEKICAgIC8vIGFwcHMucHVzaChuZXcgRHluYW1pY0J5dGVzKHRoaXMud2FsbGV0SURzQnlBY2NvdW50cyhieXRlczE2KGFkZHJlc3MubmF0aXZlKSkudmFsdWUpKQogICAgY2FsbHN1YiBieXRlczE2CiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAwCiAgICBzd2FwCiAgICBpbnRjXzEgLy8gMQogICAgY2FsbHN1YiBkeW5hbWljX2FycmF5X2NvbmNhdF9ieXRlX2xlbmd0aF9oZWFkCiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjE0OAogICAgLy8gZm9yIChsZXQgaTogdWludDY0ID0gMDsgaSA8IGFkZHJlc3Nlcy5sZW5ndGg7IGkrKykgewogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGZyYW1lX2J1cnkgMQogICAgYiBtdXN0R2V0TGlzdF93aGlsZV90b3BAMQoKbXVzdEdldExpc3RfYWZ0ZXJfd2hpbGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvZmFjdG9yeS5hbGdvLnRzOjE1MwogICAgLy8gcmV0dXJuIGFwcHMKICAgIHJldHN1Ygo=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAHAAECIJADxEWgjQYmAwQVH3x1AAIAADEbQQDzgggEtVHV/wTYXPGEBIo5558ETJ+2VgQ8Gm8zBCtWAqMEE9xQigRHXTdzNhoAjggAowCIAHgAXgBDACgAFQACIkMxGRREMRhENhoBiAOZKExQsCNDMRkURDEYRDYaAYgDLShMULAjQzEZFEQxGEQ2GgGIAwZJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgGIAtNJFRZXBgJMUChMULAjQzEZFEQxGEQ2GgGIAqyAAQAiTwJUKExQsCNDMRkURDEYRDYaAReIAhYjQzEZFEQxGEQxFiMJSTgQIxJEiADUFihMULAjQzEZFEQxGESIAKUWKExQsCNDMRlA/0cxGBREI0OKAwGL/SJZSYv/CEwkCyQISwEWVwYCTgKL/SRLAlKL/yQLr1CL/RWL/U8DTwJSUIv+UEwkC0kiTIsDiwIMQQAjiwRJFlcGAosBiwNJTgRPAl1JjAFLAVkkCAiMBCQIjANC/9WLAIsBUIwAiYoBAYv/FSJLAQ8iSwJPAk2BEEsCD4EQTwNPAk2L/04CUkkVgRASRIkyDUAAEzEAiP/OFSEECyEFCCEGCDIBCIkyDRZC/+yKAQEiKUkyDUlAARgxAIj/qYwAiwAVIQQLIQUIIQYIjAGL/zgHMgoSQQD1i/84CIsBMgEIEkEA6CNEsYAECoEBQ7JCgHwKIAIBADEbQQA3ggIEALhsrwQkN408NhoAjgIAEAACI0MxGYEFEkQxGESIADwiQzEZFEQxGEQ2GgEXwByIAA0iQzEZQP/ZMRgURCJDigEAMQAyCRJEsTIKi/+yILIHI7IIIrIQI7IBs4kxADIJEkSxMgmyCSKyECOyAbOJskAishmBBrIQIrIBs7Q9SYwCSXIIRIj+4Em8SIsAv7FyCEQyAbIIsgcjshAisgGzsYsDQAAkMg6yHIAEALhsr7IagAEBshoishmLAkmyGIEGshAisgGzjACJMQBC/9kiQv8VMg0WjABC/ueKAQApMg2L/3IIRIj+gEcCvUUBRL5MSU8CRBVJTgKBCBJJTgJBAEoXiwESRDIBiwMhBAshBQgIjACxgAQkN408shqBBbIZi/+yGIEGshAisgGziwK8SLGLBEEAEDIOiwCyCLIHI7IQIrIBs4kxAEL/7TEAiP4YEkRC/7GKAQGL/4j+C71FAYmKAQGL/4j9/71FAUAAAimJi/+I/fK+RImKAQGL/4j9571FAUSL/4j93r5EiYoBASIqIov/IlmLAg1BAESL/1cCAIsCJQslWEmMAIj9ur1FAUEAIYsAiP2vvkRJFRZXBgJMUIsBTCOI/TOMAYsCIwiMAkL/vosBKiOI/SGMAUL/64sBjACJigEBKiKL/yJZiwENQQAzi/9XAgCLAUlOAiULJVhJiP1hvUUBRIj9Wr5ESRUWVwYCTFCLAEwjiPzejAAjCIwBQv/DiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":9,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the EscrowFactory contract
 */
export type EscrowFactoryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'newCost()uint64': Record<string, never>
    'new(pay)uint64': {
      payment: AppMethodCallTransactionArgument
    }
    'delete(uint64)void': {
      id: bigint | number
    }
    'exists(address)bool': {
      address: string
    }
    'get(address)byte[]': {
      address: string
    }
    'mustGet(address)byte[]': {
      address: string
    }
    'getList(address[])byte[][]': {
      addresses: string[]
    }
    'mustGetList(address[])byte[][]': {
      addresses: string[]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'newCost()uint64': []
    'new(pay)uint64': [payment: AppMethodCallTransactionArgument]
    'delete(uint64)void': [id: bigint | number]
    'exists(address)bool': [address: string]
    'get(address)byte[]': [address: string]
    'mustGet(address)byte[]': [address: string]
    'getList(address[])byte[][]': [addresses: string[]]
    'mustGetList(address[])byte[][]': [addresses: string[]]
  }
}

/**
 * The return type for each method
 */
export type EscrowFactoryReturns = {
  'newCost()uint64': bigint
  'new(pay)uint64': bigint
  'delete(uint64)void': void
  'exists(address)bool': boolean
  'get(address)byte[]': Uint8Array
  'mustGet(address)byte[]': Uint8Array
  'getList(address[])byte[][]': Uint8Array[]
  'mustGetList(address[])byte[][]': Uint8Array[]
}

/**
 * Defines the types of available calls and state of the EscrowFactory smart contract.
 */
export type EscrowFactoryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'newCost()uint64' | 'newCost', {
      argsObj: EscrowFactoryArgs['obj']['newCost()uint64']
      argsTuple: EscrowFactoryArgs['tuple']['newCost()uint64']
      returns: EscrowFactoryReturns['newCost()uint64']
    }>
    & Record<'new(pay)uint64' | 'new', {
      argsObj: EscrowFactoryArgs['obj']['new(pay)uint64']
      argsTuple: EscrowFactoryArgs['tuple']['new(pay)uint64']
      returns: EscrowFactoryReturns['new(pay)uint64']
    }>
    & Record<'delete(uint64)void' | 'delete', {
      argsObj: EscrowFactoryArgs['obj']['delete(uint64)void']
      argsTuple: EscrowFactoryArgs['tuple']['delete(uint64)void']
      returns: EscrowFactoryReturns['delete(uint64)void']
    }>
    & Record<'exists(address)bool' | 'exists', {
      argsObj: EscrowFactoryArgs['obj']['exists(address)bool']
      argsTuple: EscrowFactoryArgs['tuple']['exists(address)bool']
      returns: EscrowFactoryReturns['exists(address)bool']
    }>
    & Record<'get(address)byte[]' | 'get', {
      argsObj: EscrowFactoryArgs['obj']['get(address)byte[]']
      argsTuple: EscrowFactoryArgs['tuple']['get(address)byte[]']
      returns: EscrowFactoryReturns['get(address)byte[]']
    }>
    & Record<'mustGet(address)byte[]' | 'mustGet', {
      argsObj: EscrowFactoryArgs['obj']['mustGet(address)byte[]']
      argsTuple: EscrowFactoryArgs['tuple']['mustGet(address)byte[]']
      returns: EscrowFactoryReturns['mustGet(address)byte[]']
    }>
    & Record<'getList(address[])byte[][]' | 'getList', {
      argsObj: EscrowFactoryArgs['obj']['getList(address[])byte[][]']
      argsTuple: EscrowFactoryArgs['tuple']['getList(address[])byte[][]']
      returns: EscrowFactoryReturns['getList(address[])byte[][]']
    }>
    & Record<'mustGetList(address[])byte[][]' | 'mustGetList', {
      argsObj: EscrowFactoryArgs['obj']['mustGetList(address[])byte[][]']
      argsTuple: EscrowFactoryArgs['tuple']['mustGetList(address[])byte[][]']
      returns: EscrowFactoryReturns['mustGetList(address[])byte[][]']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {}
      maps: {
        walletIDsByAccounts: Map<Uint8Array | string, Uint8Array>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type EscrowFactorySignatures = keyof EscrowFactoryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type EscrowFactoryNonVoidMethodSignatures = keyof EscrowFactoryTypes['methods'] extends infer T ? T extends keyof EscrowFactoryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the EscrowFactory smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends EscrowFactorySignatures> = EscrowFactoryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the EscrowFactory smart contract to the method's return type
 */
export type MethodReturn<TSignature extends EscrowFactorySignatures> = EscrowFactoryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = EscrowFactoryTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type EscrowFactoryCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type EscrowFactoryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: EscrowFactoryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the EscrowFactory smart contract
 */
export abstract class EscrowFactoryParamsFactory {
  /**
   * Constructs a no op call for the newCost()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static newCost(params: CallParams<EscrowFactoryArgs['obj']['newCost()uint64'] | EscrowFactoryArgs['tuple']['newCost()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'newCost()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the new(pay)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static new(params: CallParams<EscrowFactoryArgs['obj']['new(pay)uint64'] | EscrowFactoryArgs['tuple']['new(pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'new(pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the delete(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static delete(params: CallParams<EscrowFactoryArgs['obj']['delete(uint64)void'] | EscrowFactoryArgs['tuple']['delete(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'delete(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the exists(address)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static exists(params: CallParams<EscrowFactoryArgs['obj']['exists(address)bool'] | EscrowFactoryArgs['tuple']['exists(address)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'exists(address)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    }
  }
  /**
   * Constructs a no op call for the get(address)byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static get(params: CallParams<EscrowFactoryArgs['obj']['get(address)byte[]'] | EscrowFactoryArgs['tuple']['get(address)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get(address)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    }
  }
  /**
   * Constructs a no op call for the mustGet(address)byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mustGet(params: CallParams<EscrowFactoryArgs['obj']['mustGet(address)byte[]'] | EscrowFactoryArgs['tuple']['mustGet(address)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mustGet(address)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address],
    }
  }
  /**
   * Constructs a no op call for the getList(address[])byte[][] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getList(params: CallParams<EscrowFactoryArgs['obj']['getList(address[])byte[][]'] | EscrowFactoryArgs['tuple']['getList(address[])byte[][]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getList(address[])byte[][]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addresses],
    }
  }
  /**
   * Constructs a no op call for the mustGetList(address[])byte[][] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mustGetList(params: CallParams<EscrowFactoryArgs['obj']['mustGetList(address[])byte[][]'] | EscrowFactoryArgs['tuple']['mustGetList(address[])byte[][]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mustGetList(address[])byte[][]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addresses],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the EscrowFactory smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class EscrowFactoryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `EscrowFactoryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new EscrowFactoryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new EscrowFactoryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the EscrowFactory smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: EscrowFactoryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new EscrowFactoryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the EscrowFactory smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the EscrowFactory smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the EscrowFactory smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new EscrowFactoryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the EscrowFactory smart contract
 */
export class EscrowFactoryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `EscrowFactoryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the EscrowFactory app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `EscrowFactoryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends EscrowFactoryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `EscrowFactoryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<EscrowFactoryClient> {
    return new EscrowFactoryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `EscrowFactoryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<EscrowFactoryClient> {
    return new EscrowFactoryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the EscrowFactory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `newCost()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    newCost: (params: CallParams<EscrowFactoryArgs['obj']['newCost()uint64'] | EscrowFactoryArgs['tuple']['newCost()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EscrowFactoryParamsFactory.newCost(params))
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `new(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    new: (params: CallParams<EscrowFactoryArgs['obj']['new(pay)uint64'] | EscrowFactoryArgs['tuple']['new(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowFactoryParamsFactory.new(params))
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `delete(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    delete: (params: CallParams<EscrowFactoryArgs['obj']['delete(uint64)void'] | EscrowFactoryArgs['tuple']['delete(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowFactoryParamsFactory.delete(params))
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `exists(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    exists: (params: CallParams<EscrowFactoryArgs['obj']['exists(address)bool'] | EscrowFactoryArgs['tuple']['exists(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowFactoryParamsFactory.exists(params))
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `get(address)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    get: (params: CallParams<EscrowFactoryArgs['obj']['get(address)byte[]'] | EscrowFactoryArgs['tuple']['get(address)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowFactoryParamsFactory.get(params))
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `mustGet(address)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mustGet: (params: CallParams<EscrowFactoryArgs['obj']['mustGet(address)byte[]'] | EscrowFactoryArgs['tuple']['mustGet(address)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowFactoryParamsFactory.mustGet(params))
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `getList(address[])byte[][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getList: (params: CallParams<EscrowFactoryArgs['obj']['getList(address[])byte[][]'] | EscrowFactoryArgs['tuple']['getList(address[])byte[][]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowFactoryParamsFactory.getList(params))
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `mustGetList(address[])byte[][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mustGetList: (params: CallParams<EscrowFactoryArgs['obj']['mustGetList(address[])byte[][]'] | EscrowFactoryArgs['tuple']['mustGetList(address[])byte[][]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowFactoryParamsFactory.mustGetList(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the EscrowFactory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `newCost()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    newCost: (params: CallParams<EscrowFactoryArgs['obj']['newCost()uint64'] | EscrowFactoryArgs['tuple']['newCost()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EscrowFactoryParamsFactory.newCost(params))
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `new(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    new: (params: CallParams<EscrowFactoryArgs['obj']['new(pay)uint64'] | EscrowFactoryArgs['tuple']['new(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowFactoryParamsFactory.new(params))
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `delete(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    delete: (params: CallParams<EscrowFactoryArgs['obj']['delete(uint64)void'] | EscrowFactoryArgs['tuple']['delete(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowFactoryParamsFactory.delete(params))
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `exists(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    exists: (params: CallParams<EscrowFactoryArgs['obj']['exists(address)bool'] | EscrowFactoryArgs['tuple']['exists(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowFactoryParamsFactory.exists(params))
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `get(address)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    get: (params: CallParams<EscrowFactoryArgs['obj']['get(address)byte[]'] | EscrowFactoryArgs['tuple']['get(address)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowFactoryParamsFactory.get(params))
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `mustGet(address)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mustGet: (params: CallParams<EscrowFactoryArgs['obj']['mustGet(address)byte[]'] | EscrowFactoryArgs['tuple']['mustGet(address)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowFactoryParamsFactory.mustGet(params))
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `getList(address[])byte[][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getList: (params: CallParams<EscrowFactoryArgs['obj']['getList(address[])byte[][]'] | EscrowFactoryArgs['tuple']['getList(address[])byte[][]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowFactoryParamsFactory.getList(params))
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `mustGetList(address[])byte[][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mustGetList: (params: CallParams<EscrowFactoryArgs['obj']['mustGetList(address[])byte[][]'] | EscrowFactoryArgs['tuple']['mustGetList(address[])byte[][]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowFactoryParamsFactory.mustGetList(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the EscrowFactory smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `newCost()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    newCost: async (params: CallParams<EscrowFactoryArgs['obj']['newCost()uint64'] | EscrowFactoryArgs['tuple']['newCost()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EscrowFactoryParamsFactory.newCost(params))
      return {...result, return: result.return as unknown as (undefined | EscrowFactoryReturns['newCost()uint64'])}
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `new(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    new: async (params: CallParams<EscrowFactoryArgs['obj']['new(pay)uint64'] | EscrowFactoryArgs['tuple']['new(pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowFactoryParamsFactory.new(params))
      return {...result, return: result.return as unknown as (undefined | EscrowFactoryReturns['new(pay)uint64'])}
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `delete(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    delete: async (params: CallParams<EscrowFactoryArgs['obj']['delete(uint64)void'] | EscrowFactoryArgs['tuple']['delete(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowFactoryParamsFactory.delete(params))
      return {...result, return: result.return as unknown as (undefined | EscrowFactoryReturns['delete(uint64)void'])}
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `exists(address)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    exists: async (params: CallParams<EscrowFactoryArgs['obj']['exists(address)bool'] | EscrowFactoryArgs['tuple']['exists(address)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowFactoryParamsFactory.exists(params))
      return {...result, return: result.return as unknown as (undefined | EscrowFactoryReturns['exists(address)bool'])}
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `get(address)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    get: async (params: CallParams<EscrowFactoryArgs['obj']['get(address)byte[]'] | EscrowFactoryArgs['tuple']['get(address)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowFactoryParamsFactory.get(params))
      return {...result, return: result.return as unknown as (undefined | EscrowFactoryReturns['get(address)byte[]'])}
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `mustGet(address)byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mustGet: async (params: CallParams<EscrowFactoryArgs['obj']['mustGet(address)byte[]'] | EscrowFactoryArgs['tuple']['mustGet(address)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowFactoryParamsFactory.mustGet(params))
      return {...result, return: result.return as unknown as (undefined | EscrowFactoryReturns['mustGet(address)byte[]'])}
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `getList(address[])byte[][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getList: async (params: CallParams<EscrowFactoryArgs['obj']['getList(address[])byte[][]'] | EscrowFactoryArgs['tuple']['getList(address[])byte[][]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowFactoryParamsFactory.getList(params))
      return {...result, return: result.return as unknown as (undefined | EscrowFactoryReturns['getList(address[])byte[][]'])}
    },

    /**
     * Makes a call to the EscrowFactory smart contract using the `mustGetList(address[])byte[][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mustGetList: async (params: CallParams<EscrowFactoryArgs['obj']['mustGetList(address[])byte[][]'] | EscrowFactoryArgs['tuple']['mustGetList(address[])byte[][]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowFactoryParamsFactory.mustGetList(params))
      return {...result, return: result.return as unknown as (undefined | EscrowFactoryReturns['mustGetList(address[])byte[][]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new EscrowFactoryClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the EscrowFactory smart contract using the `newCost()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async newCost(params: CallParams<EscrowFactoryArgs['obj']['newCost()uint64'] | EscrowFactoryArgs['tuple']['newCost()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(EscrowFactoryParamsFactory.newCost(params))
    return result.return as unknown as EscrowFactoryReturns['newCost()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the EscrowFactory smart contract using the `exists(address)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async exists(params: CallParams<EscrowFactoryArgs['obj']['exists(address)bool'] | EscrowFactoryArgs['tuple']['exists(address)bool']>) {
    const result = await this.appClient.send.call(EscrowFactoryParamsFactory.exists(params))
    return result.return as unknown as EscrowFactoryReturns['exists(address)bool']
  }

  /**
   * Makes a readonly (simulated) call to the EscrowFactory smart contract using the `get(address)byte[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async get(params: CallParams<EscrowFactoryArgs['obj']['get(address)byte[]'] | EscrowFactoryArgs['tuple']['get(address)byte[]']>) {
    const result = await this.appClient.send.call(EscrowFactoryParamsFactory.get(params))
    return result.return as unknown as EscrowFactoryReturns['get(address)byte[]']
  }

  /**
   * Makes a readonly (simulated) call to the EscrowFactory smart contract using the `mustGet(address)byte[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async mustGet(params: CallParams<EscrowFactoryArgs['obj']['mustGet(address)byte[]'] | EscrowFactoryArgs['tuple']['mustGet(address)byte[]']>) {
    const result = await this.appClient.send.call(EscrowFactoryParamsFactory.mustGet(params))
    return result.return as unknown as EscrowFactoryReturns['mustGet(address)byte[]']
  }

  /**
   * Makes a readonly (simulated) call to the EscrowFactory smart contract using the `getList(address[])byte[][]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getList(params: CallParams<EscrowFactoryArgs['obj']['getList(address[])byte[][]'] | EscrowFactoryArgs['tuple']['getList(address[])byte[][]']>) {
    const result = await this.appClient.send.call(EscrowFactoryParamsFactory.getList(params))
    return result.return as unknown as EscrowFactoryReturns['getList(address[])byte[][]']
  }

  /**
   * Makes a readonly (simulated) call to the EscrowFactory smart contract using the `mustGetList(address[])byte[][]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async mustGetList(params: CallParams<EscrowFactoryArgs['obj']['mustGetList(address[])byte[][]'] | EscrowFactoryArgs['tuple']['mustGetList(address[])byte[][]']>) {
    const result = await this.appClient.send.call(EscrowFactoryParamsFactory.mustGetList(params))
    return result.return as unknown as EscrowFactoryReturns['mustGetList(address[])byte[][]']
  }

  /**
   * Methods to access state for the current EscrowFactory app
   */
  state = {
    /**
     * Methods to access box state for the current EscrowFactory app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the walletIDsByAccounts map in box state
       */
      walletIDsByAccounts: {
        /**
         * Get all current values of the walletIDsByAccounts map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Uint8Array>> => { return (await this.appClient.state.box.getMap("walletIDsByAccounts")) as Map<Uint8Array, Uint8Array> },
        /**
         * Get a current value of the walletIDsByAccounts map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("walletIDsByAccounts", key) as Uint8Array | undefined },
      },
    },
  }

  public newGroup(): EscrowFactoryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a newCost()uint64 method call against the EscrowFactory contract
       */
      newCost(params: CallParams<EscrowFactoryArgs['obj']['newCost()uint64'] | EscrowFactoryArgs['tuple']['newCost()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.newCost(params)))
        resultMappers.push((v) => client.decodeReturnValue('newCost()uint64', v))
        return this
      },
      /**
       * Add a new(pay)uint64 method call against the EscrowFactory contract
       */
      new(params: CallParams<EscrowFactoryArgs['obj']['new(pay)uint64'] | EscrowFactoryArgs['tuple']['new(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.new(params)))
        resultMappers.push((v) => client.decodeReturnValue('new(pay)uint64', v))
        return this
      },
      /**
       * Add a delete(uint64)void method call against the EscrowFactory contract
       */
      delete(params: CallParams<EscrowFactoryArgs['obj']['delete(uint64)void'] | EscrowFactoryArgs['tuple']['delete(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.delete(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a exists(address)bool method call against the EscrowFactory contract
       */
      exists(params: CallParams<EscrowFactoryArgs['obj']['exists(address)bool'] | EscrowFactoryArgs['tuple']['exists(address)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.exists(params)))
        resultMappers.push((v) => client.decodeReturnValue('exists(address)bool', v))
        return this
      },
      /**
       * Add a get(address)byte[] method call against the EscrowFactory contract
       */
      get(params: CallParams<EscrowFactoryArgs['obj']['get(address)byte[]'] | EscrowFactoryArgs['tuple']['get(address)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.get(params)))
        resultMappers.push((v) => client.decodeReturnValue('get(address)byte[]', v))
        return this
      },
      /**
       * Add a mustGet(address)byte[] method call against the EscrowFactory contract
       */
      mustGet(params: CallParams<EscrowFactoryArgs['obj']['mustGet(address)byte[]'] | EscrowFactoryArgs['tuple']['mustGet(address)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mustGet(params)))
        resultMappers.push((v) => client.decodeReturnValue('mustGet(address)byte[]', v))
        return this
      },
      /**
       * Add a getList(address[])byte[][] method call against the EscrowFactory contract
       */
      getList(params: CallParams<EscrowFactoryArgs['obj']['getList(address[])byte[][]'] | EscrowFactoryArgs['tuple']['getList(address[])byte[][]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getList(params)))
        resultMappers.push((v) => client.decodeReturnValue('getList(address[])byte[][]', v))
        return this
      },
      /**
       * Add a mustGetList(address[])byte[][] method call against the EscrowFactory contract
       */
      mustGetList(params: CallParams<EscrowFactoryArgs['obj']['mustGetList(address[])byte[][]'] | EscrowFactoryArgs['tuple']['mustGetList(address[])byte[][]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mustGetList(params)))
        resultMappers.push((v) => client.decodeReturnValue('mustGetList(address[])byte[][]', v))
        return this
      },
      /**
       * Add a clear state call to the EscrowFactory contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as EscrowFactoryComposer
  }
}
export type EscrowFactoryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the newCost()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  newCost(params?: CallParams<EscrowFactoryArgs['obj']['newCost()uint64'] | EscrowFactoryArgs['tuple']['newCost()uint64']>): EscrowFactoryComposer<[...TReturns, EscrowFactoryReturns['newCost()uint64'] | undefined]>

  /**
   * Calls the new(pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  new(params?: CallParams<EscrowFactoryArgs['obj']['new(pay)uint64'] | EscrowFactoryArgs['tuple']['new(pay)uint64']>): EscrowFactoryComposer<[...TReturns, EscrowFactoryReturns['new(pay)uint64'] | undefined]>

  /**
   * Calls the delete(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delete(params?: CallParams<EscrowFactoryArgs['obj']['delete(uint64)void'] | EscrowFactoryArgs['tuple']['delete(uint64)void']>): EscrowFactoryComposer<[...TReturns, EscrowFactoryReturns['delete(uint64)void'] | undefined]>

  /**
   * Calls the exists(address)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  exists(params?: CallParams<EscrowFactoryArgs['obj']['exists(address)bool'] | EscrowFactoryArgs['tuple']['exists(address)bool']>): EscrowFactoryComposer<[...TReturns, EscrowFactoryReturns['exists(address)bool'] | undefined]>

  /**
   * Calls the get(address)byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  get(params?: CallParams<EscrowFactoryArgs['obj']['get(address)byte[]'] | EscrowFactoryArgs['tuple']['get(address)byte[]']>): EscrowFactoryComposer<[...TReturns, EscrowFactoryReturns['get(address)byte[]'] | undefined]>

  /**
   * Calls the mustGet(address)byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mustGet(params?: CallParams<EscrowFactoryArgs['obj']['mustGet(address)byte[]'] | EscrowFactoryArgs['tuple']['mustGet(address)byte[]']>): EscrowFactoryComposer<[...TReturns, EscrowFactoryReturns['mustGet(address)byte[]'] | undefined]>

  /**
   * Calls the getList(address[])byte[][] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getList(params?: CallParams<EscrowFactoryArgs['obj']['getList(address[])byte[][]'] | EscrowFactoryArgs['tuple']['getList(address[])byte[][]']>): EscrowFactoryComposer<[...TReturns, EscrowFactoryReturns['getList(address[])byte[][]'] | undefined]>

  /**
   * Calls the mustGetList(address[])byte[][] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mustGetList(params?: CallParams<EscrowFactoryArgs['obj']['mustGetList(address[])byte[][]'] | EscrowFactoryArgs['tuple']['mustGetList(address[])byte[][]']>): EscrowFactoryComposer<[...TReturns, EscrowFactoryReturns['mustGetList(address[])byte[][]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the EscrowFactory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): EscrowFactoryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): EscrowFactoryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<EscrowFactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<EscrowFactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<EscrowFactoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<EscrowFactoryComposerResults<TReturns>>
}
export type EscrowFactoryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

