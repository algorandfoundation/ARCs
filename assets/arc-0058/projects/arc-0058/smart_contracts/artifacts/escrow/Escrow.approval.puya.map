{
  "version": 3,
  "sources": [
    "/Users/kylebreeding/algorand/ARCs/assets/arc-0058/projects/arc-0058/smart_contracts/escrow/contract.algo.ts",
    "/Users/kylebreeding/algorand/ARCs/assets/arc-0058/projects/arc-0058/smart_contracts/utils/constants.ts"
  ],
  "mappings": ";;;;;AAKA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAgBG;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAdD;;AAAA;AAAA;AAAA;;AAAA;AAFF;;;AAAA;AAAA;;AAEE;;;AAAA;;AAFF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAEE;;;AACa;;AAAkB;;AAAtB;AAAP;AAEA;AAGqB;;;;;;;;AADT;;;AAFZ;;;ACRuB;;;ADQvB;;AAaW;;AAAkB;;AAAtB;AAAP;AAEA;AACsC;;;;AADtC;;;AAAA;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "10": {
      "op": "pushbytess 0x00b86caf 0x24378d3c // method \"rekey(account)void\", method \"delete()void\"",
      "defined_out": [
        "Method(delete()void)",
        "Method(rekey(account)void)"
      ],
      "stack_out": [
        "Method(rekey(account)void)",
        "Method(delete()void)"
      ]
    },
    "22": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(delete()void)",
        "Method(rekey(account)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(rekey(account)void)",
        "Method(delete()void)",
        "tmp%2#0"
      ]
    },
    "25": {
      "op": "match main_rekey_route@3 main_delete_route@4",
      "stack_out": []
    },
    "31": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "32": {
      "op": "return",
      "stack_out": []
    },
    "33": {
      "block": "main_delete_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "35": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "DeleteApplication"
      ]
    },
    "37": {
      "op": "==",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "38": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "39": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "41": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "42": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.delete",
      "op": "callsub delete"
    },
    "45": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "46": {
      "op": "return",
      "stack_out": []
    },
    "47": {
      "block": "main_rekey_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "49": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "50": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "51": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "53": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "54": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "57": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "58": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "60": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.rekey",
      "op": "callsub rekey",
      "stack_out": []
    },
    "63": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "64": {
      "op": "return",
      "stack_out": []
    },
    "65": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "67": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "70": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "72": {
      "op": "!",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "73": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "74": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "75": {
      "op": "return",
      "stack_out": []
    },
    "76": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.rekey",
      "params": {
        "rekeyTo#0": "bytes"
      },
      "block": "rekey",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "79": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "81": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "83": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "84": {
      "error": "only the creator can rekey an escrow contract",
      "op": "assert // only the creator can rekey an escrow contract",
      "stack_out": []
    },
    "85": {
      "op": "itxn_begin"
    },
    "86": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "88": {
      "op": "frame_dig -1",
      "defined_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "rekeyTo#0 (copy)"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0",
        "rekeyTo#0 (copy)"
      ]
    },
    "90": {
      "op": "itxn_field RekeyTo",
      "stack_out": [
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "92": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "94": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "95": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "97": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "98": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "100": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "101": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "103": {
      "op": "itxn_submit"
    },
    "104": {
      "retsub": true,
      "op": "retsub"
    },
    "105": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.delete",
      "params": {},
      "block": "delete",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "107": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "109": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "110": {
      "error": "only the factory can delete an escrow contract",
      "op": "assert // only the factory can delete an escrow contract",
      "stack_out": []
    },
    "111": {
      "op": "itxn_begin"
    },
    "112": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%0%%param_CloseRemainderTo_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_CloseRemainderTo_idx_0#0"
      ]
    },
    "114": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": []
    },
    "116": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "117": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "119": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "120": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "122": {
      "op": "itxn_submit"
    },
    "123": {
      "retsub": true,
      "op": "retsub"
    }
  }
}