#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 2 32 400 8900 100000
    bytecblock 0x151f7c75 "" 0x0000
    // smart_contracts/escrow/factory.algo.ts:15
    // export class EscrowFactory extends Contract {
    txn NumAppArgs
    bz main_bare_routing@13
    pushbytess 0xb551d5ff 0xd85cf184 0x8a39e79f 0x4c9fb656 0x3c1a6f33 0x2b5602a3 0x13dc508a 0x475d3773 // method "newCost()uint64", method "new(pay)uint64", method "delete(uint64)void", method "exists(address)bool", method "get(address)byte[]", method "mustGet(address)byte[]", method "getList(address[])byte[][]", method "mustGetList(address[])byte[][]"
    txna ApplicationArgs 0
    match main_newCost_route@3 main_new_route@4 main_delete_route@5 main_exists_route@6 main_get_route@7 main_mustGet_route@8 main_getList_route@9 main_mustGetList_route@10

main_after_if_else@17:
    // smart_contracts/escrow/factory.algo.ts:15
    // export class EscrowFactory extends Contract {
    intc_0 // 0
    return

main_mustGetList_route@10:
    // smart_contracts/escrow/factory.algo.ts:145
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/escrow/factory.algo.ts:15
    // export class EscrowFactory extends Contract {
    txna ApplicationArgs 1
    // smart_contracts/escrow/factory.algo.ts:145
    // @abimethod({ readonly: true })
    callsub mustGetList
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getList_route@9:
    // smart_contracts/escrow/factory.algo.ts:130
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/escrow/factory.algo.ts:15
    // export class EscrowFactory extends Contract {
    txna ApplicationArgs 1
    // smart_contracts/escrow/factory.algo.ts:130
    // @abimethod({ readonly: true })
    callsub getList
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_mustGet_route@8:
    // smart_contracts/escrow/factory.algo.ts:123
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/escrow/factory.algo.ts:15
    // export class EscrowFactory extends Contract {
    txna ApplicationArgs 1
    // smart_contracts/escrow/factory.algo.ts:123
    // @abimethod({ readonly: true })
    callsub mustGet
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_get_route@7:
    // smart_contracts/escrow/factory.algo.ts:114
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/escrow/factory.algo.ts:15
    // export class EscrowFactory extends Contract {
    txna ApplicationArgs 1
    // smart_contracts/escrow/factory.algo.ts:114
    // @abimethod({ readonly: true })
    callsub get
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_exists_route@6:
    // smart_contracts/escrow/factory.algo.ts:108
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/escrow/factory.algo.ts:15
    // export class EscrowFactory extends Contract {
    txna ApplicationArgs 1
    // smart_contracts/escrow/factory.algo.ts:108
    // @abimethod({ readonly: true })
    callsub exists
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_delete_route@5:
    // smart_contracts/escrow/factory.algo.ts:78
    // delete(id: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/escrow/factory.algo.ts:15
    // export class EscrowFactory extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/escrow/factory.algo.ts:78
    // delete(id: uint64): void {
    callsub delete
    intc_1 // 1
    return

main_new_route@4:
    // smart_contracts/escrow/factory.algo.ts:33
    // new(payment: gtxn.PaymentTxn): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/escrow/factory.algo.ts:15
    // export class EscrowFactory extends Contract {
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/escrow/factory.algo.ts:33
    // new(payment: gtxn.PaymentTxn): uint64 {
    callsub new
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_newCost_route@3:
    // smart_contracts/escrow/factory.algo.ts:24
    // @abimethod({ readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub newCost
    itob
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@13:
    // smart_contracts/escrow/factory.algo.ts:15
    // export class EscrowFactory extends Contract {
    txn OnCompletion
    bnz main_after_if_else@17
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
dynamic_array_concat_byte_length_head:
    proto 3 1
    frame_dig -3
    intc_0 // 0
    extract_uint16
    dup
    frame_dig -1
    +
    swap
    intc_2 // 2
    *
    intc_2 // 2
    +
    dig 1
    itob
    extract 6 2
    cover 2
    frame_dig -3
    intc_2 // 2
    dig 2
    substring3
    frame_dig -1
    intc_2 // 2
    *
    bzero
    concat
    frame_dig -3
    len
    frame_dig -3
    uncover 3
    uncover 2
    substring3
    concat
    frame_dig -2
    concat
    swap
    intc_2 // 2
    *
    dup
    intc_0 // 0
    swap

dynamic_array_concat_byte_length_head_for_header@2:
    frame_dig 3
    frame_dig 2
    <
    bz dynamic_array_concat_byte_length_head_after_for@5
    frame_dig 4
    dup
    itob
    extract 6 2
    frame_dig 1
    frame_dig 3
    dup
    cover 4
    uncover 2
    replace3
    dup
    frame_bury 1
    dig 1
    extract_uint16
    intc_2 // 2
    +
    +
    frame_bury 4
    intc_2 // 2
    +
    frame_bury 3
    b dynamic_array_concat_byte_length_head_for_header@2

dynamic_array_concat_byte_length_head_after_for@5:
    frame_dig 0
    frame_dig 1
    concat
    frame_bury 0
    retsub


// smart_contracts/escrow/factory.algo.ts::bytes16(acc: bytes) -> bytes:
bytes16:
    // smart_contracts/escrow/factory.algo.ts:11
    // function bytes16(acc: Account): bytes<16> {
    proto 1 1
    // smart_contracts/escrow/factory.algo.ts:12
    // return acc.bytes.slice(0, 16).toFixed({ length: 16 })
    frame_dig -1
    len
    intc_0 // 0
    dig 1
    >=
    intc_0 // 0
    dig 2
    uncover 2
    select
    pushint 16 // 16
    dig 2
    >=
    pushint 16 // 16
    uncover 3
    uncover 2
    select
    frame_dig -1
    cover 2
    substring3
    dup
    len
    pushint 16 // 16
    ==
    assert // Length must be 16
    retsub


// smart_contracts/escrow/factory.algo.ts::EscrowFactory.newCost() -> uint64:
newCost:
    // smart_contracts/escrow/factory.algo.ts:26
    // const appCaller = Global.callerApplicationId === 0
    global CallerApplicationID
    // smart_contracts/escrow/factory.algo.ts:27-29
    // const creator = appCaller
    //   ? Bytes(bytes16(Txn.sender))
    //   : Bytes(itob(Global.callerApplicationId))
    bnz newCost_ternary_false@2
    // smart_contracts/escrow/factory.algo.ts:28
    // ? Bytes(bytes16(Txn.sender))
    txn Sender
    callsub bytes16

newCost_ternary_merge@3:
    // smart_contracts/escrow/factory.algo.ts:30
    // return (MinPages + this.mbr(creator.length) + Global.minBalance)
    len
    // smart_contracts/escrow/constants.ts:10
    // export const BoxCostPerByte: uint64 = 400;
    intc 4 // 400
    // smart_contracts/escrow/factory.algo.ts:21
    // return MinWalletIDsByAccountsMbr + (length * BoxCostPerByte)
    *
    // smart_contracts/escrow/constants.ts:8
    // export const MinWalletIDsByAccountsMbr: uint64 = 8_900;
    intc 5 // 8900
    // smart_contracts/escrow/factory.algo.ts:21
    // return MinWalletIDsByAccountsMbr + (length * BoxCostPerByte)
    +
    // smart_contracts/escrow/constants.ts:5
    // export const MinPages: uint64 = 100_000;
    intc 6 // 100000
    // smart_contracts/escrow/factory.algo.ts:30
    // return (MinPages + this.mbr(creator.length) + Global.minBalance)
    +
    global MinBalance
    +
    retsub

newCost_ternary_false@2:
    // smart_contracts/escrow/factory.algo.ts:29
    // : Bytes(itob(Global.callerApplicationId))
    global CallerApplicationID
    itob
    b newCost_ternary_merge@3


// smart_contracts/escrow/factory.algo.ts::EscrowFactory.new(payment: uint64) -> uint64:
new:
    // smart_contracts/escrow/factory.algo.ts:33
    // new(payment: gtxn.PaymentTxn): uint64 {
    proto 1 1
    intc_0 // 0
    bytec_1 // ""
    dup
    // smart_contracts/escrow/factory.algo.ts:34
    // const appCaller = Global.callerApplicationId === 0
    global CallerApplicationID
    dup
    // smart_contracts/escrow/factory.algo.ts:35-37
    // const creator = appCaller
    //   ? Bytes(bytes16(Txn.sender))
    //   : Bytes(itob(Global.callerApplicationId))
    bnz new_ternary_false@2
    // smart_contracts/escrow/factory.algo.ts:36
    // ? Bytes(bytes16(Txn.sender))
    txn Sender
    callsub bytes16
    frame_bury 0

new_ternary_merge@3:
    // smart_contracts/escrow/factory.algo.ts:41
    // const childAppMBR: uint64 = MinPages + this.mbr(creator.length)
    frame_dig 0
    len
    // smart_contracts/escrow/constants.ts:10
    // export const BoxCostPerByte: uint64 = 400;
    intc 4 // 400
    // smart_contracts/escrow/factory.algo.ts:21
    // return MinWalletIDsByAccountsMbr + (length * BoxCostPerByte)
    *
    // smart_contracts/escrow/constants.ts:8
    // export const MinWalletIDsByAccountsMbr: uint64 = 8_900;
    intc 5 // 8900
    // smart_contracts/escrow/factory.algo.ts:21
    // return MinWalletIDsByAccountsMbr + (length * BoxCostPerByte)
    +
    // smart_contracts/escrow/constants.ts:5
    // export const MinPages: uint64 = 100_000;
    intc 6 // 100000
    // smart_contracts/escrow/factory.algo.ts:41
    // const childAppMBR: uint64 = MinPages + this.mbr(creator.length)
    +
    frame_bury 1
    // smart_contracts/escrow/factory.algo.ts:43-50
    // assertMatch(
    //   payment,
    //   {
    //     receiver: Global.currentApplicationAddress,
    //     amount: childAppMBR + Global.minBalance,
    //   },
    //   ERR_INVALID_PAYMENT
    // )
    frame_dig -1
    gtxns Receiver
    // smart_contracts/escrow/factory.algo.ts:46
    // receiver: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/escrow/factory.algo.ts:43-50
    // assertMatch(
    //   payment,
    //   {
    //     receiver: Global.currentApplicationAddress,
    //     amount: childAppMBR + Global.minBalance,
    //   },
    //   ERR_INVALID_PAYMENT
    // )
    ==
    bz new_bool_false@6
    frame_dig -1
    gtxns Amount
    // smart_contracts/escrow/factory.algo.ts:47
    // amount: childAppMBR + Global.minBalance,
    frame_dig 1
    global MinBalance
    +
    // smart_contracts/escrow/factory.algo.ts:43-50
    // assertMatch(
    //   payment,
    //   {
    //     receiver: Global.currentApplicationAddress,
    //     amount: childAppMBR + Global.minBalance,
    //   },
    //   ERR_INVALID_PAYMENT
    // )
    ==
    bz new_bool_false@6
    intc_1 // 1

new_bool_merge@7:
    // smart_contracts/escrow/factory.algo.ts:43-50
    // assertMatch(
    //   payment,
    //   {
    //     receiver: Global.currentApplicationAddress,
    //     amount: childAppMBR + Global.minBalance,
    //   },
    //   ERR_INVALID_PAYMENT
    // )
    assert // invalid payment
    // smart_contracts/escrow/factory.algo.ts:52
    // const newEscrow = escrow.bareCreate({ fee }).createdApp
    itxn_begin
    // smart_contracts/escrow/factory.algo.ts:39
    // const escrow = compileArc4(Escrow);
    pushbytes base64(CoEBQw==)
    itxn_field ClearStateProgramPages
    pushbytes base64(CiACAQAxG0EAN4ICBAC4bK8EJDeNPDYaAI4CABAAAiNDMRmBBRJEMRhEiAA8IkMxGRREMRhENhoBF8AciAANIkMxGUD/2TEYFEQiQ4oBADEAMgkSRLEyCov/siCyByOyCCKyECOyAbOJMQAyCRJEsTIJsgkishAjsgGziQ==)
    itxn_field ApprovalProgramPages
    // smart_contracts/escrow/factory.algo.ts:52
    // const newEscrow = escrow.bareCreate({ fee }).createdApp
    intc_0 // 0
    itxn_field OnCompletion
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/utils/constants.ts:3
    // export const fee: uint64 = 0
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/escrow/factory.algo.ts:52
    // const newEscrow = escrow.bareCreate({ fee }).createdApp
    itxn_submit
    itxn CreatedApplicationID
    dup
    frame_bury 2
    // smart_contracts/escrow/factory.algo.ts:55
    // const spendAccount = bytes16(newEscrow.address)
    dup
    app_params_get AppAddress
    assert // application exists
    callsub bytes16
    // smart_contracts/escrow/factory.algo.ts:57
    // this.walletIDsByAccounts(spendAccount).value = creator
    dup
    box_del
    pop
    frame_dig 0
    box_put
    // smart_contracts/escrow/factory.algo.ts:59-65
    // itxn
    //   .payment({
    //     receiver: newEscrow.address,
    //     amount: Global.minBalance,
    //     fee,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/escrow/factory.algo.ts:61
    // receiver: newEscrow.address,
    app_params_get AppAddress
    assert // application exists
    // smart_contracts/escrow/factory.algo.ts:62
    // amount: Global.minBalance,
    global MinBalance
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/escrow/factory.algo.ts:59-64
    // itxn
    //   .payment({
    //     receiver: newEscrow.address,
    //     amount: Global.minBalance,
    //     fee,
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/utils/constants.ts:3
    // export const fee: uint64 = 0
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/escrow/factory.algo.ts:59-65
    // itxn
    //   .payment({
    //     receiver: newEscrow.address,
    //     amount: Global.minBalance,
    //     fee,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/escrow/factory.algo.ts:67-73
    // escrow.call.rekey({
    //   appId: id,
    //   args: [
    //     appCaller ? Global.callerApplicationAddress : Txn.sender
    //   ],
    //   fee
    // })
    itxn_begin
    // smart_contracts/escrow/factory.algo.ts:70
    // appCaller ? Global.callerApplicationAddress : Txn.sender
    frame_dig 3
    bnz new_ternary_false@11
    global CallerApplicationAddress

new_ternary_merge@12:
    itxn_field Accounts
    // smart_contracts/escrow/factory.algo.ts:67-73
    // escrow.call.rekey({
    //   appId: id,
    //   args: [
    //     appCaller ? Global.callerApplicationAddress : Txn.sender
    //   ],
    //   fee
    // })
    pushbytes 0x00b86caf // method "rekey(account)void"
    itxn_field ApplicationArgs
    pushbytes 0x01
    itxn_field ApplicationArgs
    // smart_contracts/escrow/factory.algo.ts:67-73
    // escrow.call.rekey({
    //   appId: id,
    //   args: [
    //     appCaller ? Global.callerApplicationAddress : Txn.sender
    //   ],
    //   fee
    // })
    intc_0 // 0
    itxn_field OnCompletion
    frame_dig 2
    dup
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/utils/constants.ts:3
    // export const fee: uint64 = 0
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/escrow/factory.algo.ts:67-73
    // escrow.call.rekey({
    //   appId: id,
    //   args: [
    //     appCaller ? Global.callerApplicationAddress : Txn.sender
    //   ],
    //   fee
    // })
    itxn_submit
    // smart_contracts/escrow/factory.algo.ts:75
    // return id
    frame_bury 0
    retsub

new_ternary_false@11:
    // smart_contracts/escrow/factory.algo.ts:70
    // appCaller ? Global.callerApplicationAddress : Txn.sender
    txn Sender
    b new_ternary_merge@12

new_bool_false@6:
    intc_0 // 0
    b new_bool_merge@7

new_ternary_false@2:
    // smart_contracts/escrow/factory.algo.ts:37
    // : Bytes(itob(Global.callerApplicationId))
    global CallerApplicationID
    itob
    frame_bury 0
    b new_ternary_merge@3


// smart_contracts/escrow/factory.algo.ts::EscrowFactory.delete(id: uint64) -> void:
delete:
    // smart_contracts/escrow/factory.algo.ts:78
    // delete(id: uint64): void {
    proto 1 0
    bytec_1 // ""
    // smart_contracts/escrow/factory.algo.ts:79
    // const caller = Global.callerApplicationId
    global CallerApplicationID
    // smart_contracts/escrow/factory.algo.ts:80
    // const key = bytes16(Application(id).address)
    frame_dig -1
    app_params_get AppAddress
    assert // application exists
    callsub bytes16
    dupn 2
    // smart_contracts/escrow/factory.algo.ts:81
    // assert(this.walletIDsByAccounts(key).exists, ERR_DOESNT_EXIST)
    box_len
    bury 1
    assert // does not exist
    // smart_contracts/escrow/factory.algo.ts:83
    // const creator = this.walletIDsByAccounts(key).value
    box_get
    swap
    dup
    uncover 2
    assert // Box must have value
    // smart_contracts/escrow/factory.algo.ts:84
    // if (creator.length === 8) {
    len
    dup
    cover 2
    pushint 8 // 8
    ==
    dup
    cover 2
    bz delete_else_body@2
    // smart_contracts/escrow/factory.algo.ts:85
    // assert(caller === btoi(creator), ERR_FORBIDDEN);
    btoi
    frame_dig 1
    ==
    assert // forbidden

delete_after_if_else@3:
    // smart_contracts/escrow/factory.algo.ts:92
    // const childAppMBR: uint64 = Global.minBalance + this.mbr(creator.length)
    global MinBalance
    // smart_contracts/escrow/factory.algo.ts:21
    // return MinWalletIDsByAccountsMbr + (length * BoxCostPerByte)
    frame_dig 3
    // smart_contracts/escrow/constants.ts:10
    // export const BoxCostPerByte: uint64 = 400;
    intc 4 // 400
    // smart_contracts/escrow/factory.algo.ts:21
    // return MinWalletIDsByAccountsMbr + (length * BoxCostPerByte)
    *
    // smart_contracts/escrow/constants.ts:8
    // export const MinWalletIDsByAccountsMbr: uint64 = 8_900;
    intc 5 // 8900
    // smart_contracts/escrow/factory.algo.ts:21
    // return MinWalletIDsByAccountsMbr + (length * BoxCostPerByte)
    +
    // smart_contracts/escrow/factory.algo.ts:92
    // const childAppMBR: uint64 = Global.minBalance + this.mbr(creator.length)
    +
    frame_bury 0
    // smart_contracts/escrow/factory.algo.ts:94
    // spendingAccount.call.delete({ appId: id, fee })
    itxn_begin
    pushbytes 0x24378d3c // method "delete()void"
    itxn_field ApplicationArgs
    pushint 5 // 5
    itxn_field OnCompletion
    frame_dig -1
    itxn_field ApplicationID
    pushint 6 // appl
    itxn_field TypeEnum
    // smart_contracts/utils/constants.ts:3
    // export const fee: uint64 = 0
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/escrow/factory.algo.ts:94
    // spendingAccount.call.delete({ appId: id, fee })
    itxn_submit
    // smart_contracts/escrow/factory.algo.ts:96
    // this.walletIDsByAccounts(key).delete()
    frame_dig 2
    box_del
    pop
    // smart_contracts/escrow/factory.algo.ts:98-104
    // itxn
    //   .payment({
    //     receiver: creator.length === 8 ? Global.callerApplicationAddress : Txn.sender,
    //     amount: childAppMBR,
    //     fee,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/escrow/factory.algo.ts:100
    // receiver: creator.length === 8 ? Global.callerApplicationAddress : Txn.sender,
    frame_dig 4
    bz delete_ternary_false@6
    global CallerApplicationAddress

delete_ternary_merge@7:
    frame_dig 0
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/escrow/factory.algo.ts:98-103
    // itxn
    //   .payment({
    //     receiver: creator.length === 8 ? Global.callerApplicationAddress : Txn.sender,
    //     amount: childAppMBR,
    //     fee,
    //   })
    intc_1 // 1
    itxn_field TypeEnum
    // smart_contracts/utils/constants.ts:3
    // export const fee: uint64 = 0
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/escrow/factory.algo.ts:98-104
    // itxn
    //   .payment({
    //     receiver: creator.length === 8 ? Global.callerApplicationAddress : Txn.sender,
    //     amount: childAppMBR,
    //     fee,
    //   })
    //   .submit()
    itxn_submit
    retsub

delete_ternary_false@6:
    // smart_contracts/escrow/factory.algo.ts:100
    // receiver: creator.length === 8 ? Global.callerApplicationAddress : Txn.sender,
    txn Sender
    b delete_ternary_merge@7

delete_else_body@2:
    // smart_contracts/escrow/factory.algo.ts:87
    // assert(Bytes(bytes16(Txn.sender)) === creator, ERR_FORBIDDEN);
    txn Sender
    callsub bytes16
    ==
    assert // forbidden
    b delete_after_if_else@3


// smart_contracts/escrow/factory.algo.ts::EscrowFactory.exists(address: bytes) -> uint64:
exists:
    // smart_contracts/escrow/factory.algo.ts:108-109
    // @abimethod({ readonly: true })
    // exists(address: Address): boolean {
    proto 1 1
    // smart_contracts/escrow/factory.algo.ts:110
    // return this.walletIDsByAccounts(bytes16(address.native)).exists
    frame_dig -1
    callsub bytes16
    box_len
    bury 1
    retsub


// smart_contracts/escrow/factory.algo.ts::EscrowFactory.get(address: bytes) -> bytes:
get:
    // smart_contracts/escrow/factory.algo.ts:114-115
    // @abimethod({ readonly: true })
    // get(address: Address): bytes {
    proto 1 1
    // smart_contracts/escrow/factory.algo.ts:116
    // if (!this.walletIDsByAccounts(bytes16(address.native)).exists) {
    frame_dig -1
    callsub bytes16
    box_len
    bury 1
    bnz get_after_if_else@2
    // smart_contracts/escrow/factory.algo.ts:117
    // return Bytes('')
    bytec_1 // ""
    retsub

get_after_if_else@2:
    // smart_contracts/escrow/factory.algo.ts:119
    // return this.walletIDsByAccounts(bytes16(address.native)).value
    frame_dig -1
    callsub bytes16
    box_get
    assert // Box must have value
    retsub


// smart_contracts/escrow/factory.algo.ts::EscrowFactory.mustGet(address: bytes) -> bytes:
mustGet:
    // smart_contracts/escrow/factory.algo.ts:123-124
    // @abimethod({ readonly: true })
    // mustGet(address: Address): bytes {
    proto 1 1
    // smart_contracts/escrow/factory.algo.ts:125
    // assert(this.walletIDsByAccounts(bytes16(address.native)).exists, 'Account not found')
    frame_dig -1
    callsub bytes16
    box_len
    bury 1
    assert // Account not found
    // smart_contracts/escrow/factory.algo.ts:126
    // return this.walletIDsByAccounts(bytes16(address.native)).value
    frame_dig -1
    callsub bytes16
    box_get
    assert // Box must have value
    retsub


// smart_contracts/escrow/factory.algo.ts::EscrowFactory.getList(addresses: bytes) -> bytes:
getList:
    // smart_contracts/escrow/factory.algo.ts:130-131
    // @abimethod({ readonly: true })
    // getList(addresses: DynamicArray<Address>): DynamicArray<DynamicBytes> {
    proto 1 1
    intc_0 // 0
    // smart_contracts/escrow/factory.algo.ts:132
    // const apps = new DynamicArray<DynamicBytes>()
    bytec_2 // 0x0000
    // smart_contracts/escrow/factory.algo.ts:133
    // for (let i: uint64 = 0; i < addresses.length; i++) {
    intc_0 // 0

getList_while_top@1:
    // smart_contracts/escrow/factory.algo.ts:133
    // for (let i: uint64 = 0; i < addresses.length; i++) {
    frame_dig -1
    intc_0 // 0
    extract_uint16
    frame_dig 2
    >
    bz getList_after_while@6
    // smart_contracts/escrow/factory.algo.ts:134
    // const address = addresses[i]
    frame_dig -1
    extract 2 0
    frame_dig 2
    intc_3 // 32
    *
    intc_3 // 32
    extract3 // on error: Index access is out of bounds
    dup
    frame_bury 0
    // smart_contracts/escrow/factory.algo.ts:135
    // if (this.walletIDsByAccounts(bytes16(address.native)).exists) {
    callsub bytes16
    box_len
    bury 1
    bz getList_else_body@4
    // smart_contracts/escrow/factory.algo.ts:136
    // apps.push(new DynamicBytes(this.walletIDsByAccounts(bytes16(address.native)).value))
    frame_dig 0
    callsub bytes16
    box_get
    assert // Box must have value
    dup
    len
    itob
    extract 6 2
    swap
    concat
    frame_dig 1
    swap
    intc_1 // 1
    callsub dynamic_array_concat_byte_length_head
    frame_bury 1

getList_after_if_else@5:
    // smart_contracts/escrow/factory.algo.ts:133
    // for (let i: uint64 = 0; i < addresses.length; i++) {
    frame_dig 2
    intc_1 // 1
    +
    frame_bury 2
    b getList_while_top@1

getList_else_body@4:
    // smart_contracts/escrow/factory.algo.ts:138
    // apps.push(new DynamicBytes(''))
    frame_dig 1
    bytec_2 // 0x0000
    intc_1 // 1
    callsub dynamic_array_concat_byte_length_head
    frame_bury 1
    b getList_after_if_else@5

getList_after_while@6:
    // smart_contracts/escrow/factory.algo.ts:141
    // return apps
    frame_dig 1
    frame_bury 0
    retsub


// smart_contracts/escrow/factory.algo.ts::EscrowFactory.mustGetList(addresses: bytes) -> bytes:
mustGetList:
    // smart_contracts/escrow/factory.algo.ts:145-146
    // @abimethod({ readonly: true })
    // mustGetList(addresses: DynamicArray<Address>): DynamicArray<DynamicBytes> {
    proto 1 1
    // smart_contracts/escrow/factory.algo.ts:147
    // const apps = new DynamicArray<DynamicBytes>()
    bytec_2 // 0x0000
    // smart_contracts/escrow/factory.algo.ts:148
    // for (let i: uint64 = 0; i < addresses.length; i++) {
    intc_0 // 0

mustGetList_while_top@1:
    // smart_contracts/escrow/factory.algo.ts:148
    // for (let i: uint64 = 0; i < addresses.length; i++) {
    frame_dig -1
    intc_0 // 0
    extract_uint16
    frame_dig 1
    >
    bz mustGetList_after_while@3
    // smart_contracts/escrow/factory.algo.ts:149
    // const address = addresses[i]
    frame_dig -1
    extract 2 0
    frame_dig 1
    dup
    cover 2
    intc_3 // 32
    *
    intc_3 // 32
    extract3 // on error: Index access is out of bounds
    // smart_contracts/escrow/factory.algo.ts:150
    // assert(this.walletIDsByAccounts(bytes16(address.native)).exists, 'Account not found')
    dup
    callsub bytes16
    box_len
    bury 1
    assert // Account not found
    // smart_contracts/escrow/factory.algo.ts:151
    // apps.push(new DynamicBytes(this.walletIDsByAccounts(bytes16(address.native)).value))
    callsub bytes16
    box_get
    assert // Box must have value
    dup
    len
    itob
    extract 6 2
    swap
    concat
    frame_dig 0
    swap
    intc_1 // 1
    callsub dynamic_array_concat_byte_length_head
    frame_bury 0
    // smart_contracts/escrow/factory.algo.ts:148
    // for (let i: uint64 = 0; i < addresses.length; i++) {
    intc_1 // 1
    +
    frame_bury 1
    b mustGetList_while_top@1

mustGetList_after_while@3:
    // smart_contracts/escrow/factory.algo.ts:153
    // return apps
    retsub
