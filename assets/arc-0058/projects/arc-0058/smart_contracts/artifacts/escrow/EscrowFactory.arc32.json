{
    "hints": {
        "new(pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "exists(address)bool": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get(address)byte[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "mustGet(address)byte[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getList(address[])byte[][]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "mustGetList(address[])byte[][]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "childMBR": {
                    "type": "uint64",
                    "key": "child_mbr"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "EscrowFactory",
        "methods": [
            {
                "name": "new",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "delete",
                "args": [
                    {
                        "type": "uint64",
                        "name": "id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "exists",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "get",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "mustGet",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[]"
                }
            },
            {
                "name": "getList",
                "args": [
                    {
                        "type": "address[]",
                        "name": "addresses"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[][]"
                }
            },
            {
                "name": "mustGetList",
                "args": [
                    {
                        "type": "address[]",
                        "name": "addresses"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[][]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}