{
    "hints": {
        "createApplication(address,address,application)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "arc58_changeAdmin(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_pluginChangeAdmin(uint64,address,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_getAdmin()address": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_verifyAuthAddr()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_rekeyTo(address,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_canCall(uint64,bool,address,byte[4])bool": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_removePlugin(uint64,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_removeNamedPlugin(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_newEscrow(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_reclaim(string,(uint64,uint64,bool)[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_optinEscrow(string,uint64[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc58_removeAllowances(string,uint64[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "mbr(uint64,string,string)(uint64,uint64,uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "AbstractAccountBoxMBRData",
                    "elements": [
                        [
                            "plugins",
                            "uint64"
                        ],
                        [
                            "namedPlugins",
                            "uint64"
                        ],
                        [
                            "escrows",
                            "uint64"
                        ],
                        [
                            "allowances",
                            "uint64"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 3
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin": {
                    "type": "bytes",
                    "key": "admin",
                    "descr": "The admin of the abstracted account. This address can add plugins and initiate rekeys"
                },
                "controlledAddress": {
                    "type": "bytes",
                    "key": "controlled_address",
                    "descr": "The address this app controls"
                },
                "escrowFactory": {
                    "type": "uint64",
                    "key": "escrow_factory",
                    "descr": "the escrow account factory to use for allowances"
                },
                "lastChange": {
                    "type": "uint64",
                    "key": "last_change",
                    "descr": "The last time state has changed on the abstracted account (not including lastCalled for cooldowns) in unix time"
                },
                "lastUserInteraction": {
                    "type": "uint64",
                    "key": "last_user_interaction",
                    "descr": "The last time the contract was interacted with in unix time"
                },
                "spendingAddress": {
                    "type": "bytes",
                    "key": "spending_address",
                    "descr": "The spending address for the currently active plugin"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AbstractedAccount",
        "methods": [
            {
                "name": "createApplication",
                "args": [
                    {
                        "type": "address",
                        "name": "controlledAddress",
                        "desc": "The address of the abstracted account. If zeroAddress, then the address of the contract account will be used"
                    },
                    {
                        "type": "address",
                        "name": "admin",
                        "desc": "The admin for this app"
                    },
                    {
                        "type": "application",
                        "name": "escrowFactory"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Create an abstracted account application.\nThis is not part of ARC58 and implementation specific."
            },
            {
                "name": "arc58_changeAdmin",
                "args": [
                    {
                        "type": "address",
                        "name": "newAdmin",
                        "desc": "The new admin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Attempt to change the admin for this app. Some implementations MAY not support this."
            },
            {
                "name": "arc58_pluginChangeAdmin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "plugin",
                        "desc": "The app calling the plugin"
                    },
                    {
                        "type": "address",
                        "name": "allowedCaller",
                        "desc": "The address that triggered the plugin"
                    },
                    {
                        "type": "address",
                        "name": "newAdmin",
                        "desc": "The new admin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Attempt to change the admin via plugin."
            },
            {
                "name": "arc58_getAdmin",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "address"
                },
                "desc": "Get the admin of this app. This method SHOULD always be used rather than reading directly from state\nbecause different implementations may have different ways of determining the admin."
            },
            {
                "name": "arc58_verifyAuthAddr",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Verify the abstracted account is rekeyed to this app"
            },
            {
                "name": "arc58_rekeyTo",
                "args": [
                    {
                        "type": "address",
                        "name": "address",
                        "desc": "The address to rekey to"
                    },
                    {
                        "type": "bool",
                        "name": "flash",
                        "desc": "Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA."
            },
            {
                "name": "arc58_canCall",
                "args": [
                    {
                        "type": "uint64",
                        "name": "plugin",
                        "desc": "the plugin to be rekeyed to"
                    },
                    {
                        "type": "bool",
                        "name": "global",
                        "desc": "whether this is callable globally"
                    },
                    {
                        "type": "address",
                        "name": "address",
                        "desc": "the address that will trigger the plugin"
                    },
                    {
                        "type": "byte[4]",
                        "name": "method",
                        "desc": "the method being called on the plugin, if applicable"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "bool",
                    "desc": "whether the plugin can be called with these parameters"
                },
                "desc": "check whether the plugin can be used"
            },
            {
                "name": "arc58_rekeyToPlugin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "plugin",
                        "desc": "The app to rekey to"
                    },
                    {
                        "type": "bool",
                        "name": "global",
                        "desc": "Whether the plugin is callable globally"
                    },
                    {
                        "type": "uint64[]",
                        "name": "methodOffsets",
                        "desc": "The indices of the methods being used in the group if the plugin has method restrictions these indices are required to match the methods used on each subsequent call to the plugin within the group"
                    },
                    {
                        "type": "(uint64,uint64)[]",
                        "name": "fundsRequest",
                        "desc": "If the plugin is using an escrow, this is the list of funds to transfer to the escrow for the plugin to be able to use during execution"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Temporarily rekey to an approved plugin app address"
            },
            {
                "name": "arc58_rekeyToNamedPlugin",
                "args": [
                    {
                        "type": "string",
                        "name": "name",
                        "desc": "The name of the plugin to rekey to"
                    },
                    {
                        "type": "bool",
                        "name": "global",
                        "desc": "Whether the plugin is callable globally"
                    },
                    {
                        "type": "uint64[]",
                        "name": "methodOffsets",
                        "desc": "The indices of the methods being used in the group if the plugin has method restrictions these indices are required to match the methods used on each subsequent call to the plugin within the group"
                    },
                    {
                        "type": "(uint64,uint64)[]",
                        "name": "fundsRequest",
                        "desc": "If the plugin is using an escrow, this is the list of funds to transfer to the escrow for the plugin to be able to use during execution"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Temporarily rekey to a named plugin app address"
            },
            {
                "name": "arc58_addPlugin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app",
                        "desc": "The app to add"
                    },
                    {
                        "type": "address",
                        "name": "allowedCaller",
                        "desc": "The address of that's allowed to call the app\nor the global zero address for any address"
                    },
                    {
                        "type": "bool",
                        "name": "admin",
                        "desc": "Whether the plugin has permissions to change the admin account"
                    },
                    {
                        "type": "uint8",
                        "name": "delegationType",
                        "desc": "the ownership of the delegation for last_interval updates"
                    },
                    {
                        "type": "string",
                        "name": "escrow",
                        "desc": "The escrow account to use for the plugin, if any. If empty, no escrow will be used, if the named escrow does not exist, it will be created"
                    },
                    {
                        "type": "uint64",
                        "name": "lastValid",
                        "desc": "The timestamp or round when the permission expires"
                    },
                    {
                        "type": "uint64",
                        "name": "cooldown",
                        "desc": "The number of seconds or rounds that must pass before the plugin can be called again"
                    },
                    {
                        "type": "(byte[4],uint64)[]",
                        "name": "methods",
                        "desc": "The methods that are allowed to be called for the plugin by the address"
                    },
                    {
                        "type": "bool",
                        "name": "useRounds",
                        "desc": "Whether the plugin uses rounds for cooldowns and lastValid, defaults to timestamp"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Add an app to the list of approved plugins"
            },
            {
                "name": "arc58_removePlugin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app",
                        "desc": "The app to remove"
                    },
                    {
                        "type": "address",
                        "name": "allowedCaller",
                        "desc": "The address that's allowed to call the app"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Remove an app from the list of approved plugins"
            },
            {
                "name": "arc58_addNamedPlugin",
                "args": [
                    {
                        "type": "string",
                        "name": "name",
                        "desc": "The plugin name"
                    },
                    {
                        "type": "uint64",
                        "name": "app",
                        "desc": "The app to add"
                    },
                    {
                        "type": "address",
                        "name": "allowedCaller",
                        "desc": "The address that's allowed to call the app\nor the global zero address for any address"
                    },
                    {
                        "type": "bool",
                        "name": "admin",
                        "desc": "Whether the plugin has permissions to change the admin account"
                    },
                    {
                        "type": "uint8",
                        "name": "delegationType",
                        "desc": "the ownership of the delegation for last_interval updates"
                    },
                    {
                        "type": "string",
                        "name": "escrow",
                        "desc": "The escrow account to use for the plugin, if any. If empty, no escrow will be used, if the named escrow does not exist, it will be created"
                    },
                    {
                        "type": "uint64",
                        "name": "lastValid",
                        "desc": "The timestamp or round when the permission expires"
                    },
                    {
                        "type": "uint64",
                        "name": "cooldown",
                        "desc": "The number of seconds or rounds that must pass before the plugin can be called again"
                    },
                    {
                        "type": "(byte[4],uint64)[]",
                        "name": "methods",
                        "desc": "The methods that are allowed to be called for the plugin by the address"
                    },
                    {
                        "type": "bool",
                        "name": "useRounds",
                        "desc": "Whether the plugin uses rounds for cooldowns and lastValid, defaults to timestamp"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Add a named plugin"
            },
            {
                "name": "arc58_removeNamedPlugin",
                "args": [
                    {
                        "type": "string",
                        "name": "name",
                        "desc": "The plugin name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Remove a named plugin"
            },
            {
                "name": "arc58_newEscrow",
                "args": [
                    {
                        "type": "string",
                        "name": "escrow",
                        "desc": "The name of the escrow to create"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Create a new escrow for the controlled address"
            },
            {
                "name": "arc58_reclaim",
                "args": [
                    {
                        "type": "string",
                        "name": "escrow",
                        "desc": "The escrow to reclaim funds from"
                    },
                    {
                        "type": "(uint64,uint64,bool)[]",
                        "name": "reclaims",
                        "desc": "The list of reclaims to make from the escrow"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Transfer funds from an escrow back to the controlled address."
            },
            {
                "name": "arc58_optinEscrow",
                "args": [
                    {
                        "type": "string",
                        "name": "escrow",
                        "desc": "The escrow to opt-in to"
                    },
                    {
                        "type": "uint64[]",
                        "name": "assets",
                        "desc": "The list of assets to opt-in to"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Opt-in an escrow account to assets"
            },
            {
                "name": "arc58_pluginOptinEscrow",
                "args": [
                    {
                        "type": "uint64",
                        "name": "app",
                        "desc": "The app related to the escrow optin"
                    },
                    {
                        "type": "address",
                        "name": "allowedCaller",
                        "desc": "The address allowed to call the plugin related to the escrow optin"
                    },
                    {
                        "type": "uint64[]",
                        "name": "assets",
                        "desc": "The list of assets to opt-in to"
                    },
                    {
                        "type": "pay",
                        "name": "mbrPayment",
                        "desc": "The payment txn that is used to pay for the asset opt-in"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Opt-in an escrow account to assets via a plugin / allowed caller"
            },
            {
                "name": "arc58_addAllowances",
                "args": [
                    {
                        "type": "string",
                        "name": "escrow",
                        "desc": "The escrow to add the allowance for"
                    },
                    {
                        "type": "(uint64,uint8,uint64,uint64,uint64,bool)[]",
                        "name": "allowances",
                        "desc": "The list of allowances to add"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Add an allowance for an escrow account"
            },
            {
                "name": "arc58_removeAllowances",
                "args": [
                    {
                        "type": "string",
                        "name": "escrow",
                        "desc": "The escrow to remove the allowance for"
                    },
                    {
                        "type": "uint64[]",
                        "name": "assets",
                        "desc": "The list of assets to remove the allowance for"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Remove an allowances for an escrow account"
            },
            {
                "name": "mbr",
                "args": [
                    {
                        "type": "uint64",
                        "name": "methodCount"
                    },
                    {
                        "type": "string",
                        "name": "pluginName"
                    },
                    {
                        "type": "string",
                        "name": "escrowName"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64)"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}