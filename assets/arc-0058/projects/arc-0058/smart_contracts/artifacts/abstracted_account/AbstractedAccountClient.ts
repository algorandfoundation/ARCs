/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AbstractedAccount","structs":{"arc4PluginInfo":[{"name":"admin","type":"bool"},{"name":"delegationType","type":"uint8"},{"name":"escrow","type":"uint64"},{"name":"lastValid","type":"uint64"},{"name":"cooldown","type":"uint64"},{"name":"methods","type":"(byte[4],uint64,uint64)[]"},{"name":"useRounds","type":"bool"},{"name":"lastCalled","type":"uint64"},{"name":"start","type":"uint64"}],"AllowanceInfo":[{"name":"type","type":"uint8"},{"name":"max","type":"uint64"},{"name":"allowed","type":"uint64"},{"name":"spent","type":"uint64"},{"name":"interval","type":"uint64"},{"name":"last","type":"uint64"},{"name":"start","type":"uint64"},{"name":"useRounds","type":"bool"}],"AllowanceKey":[{"name":"escrow","type":"uint64"},{"name":"asset","type":"uint64"}],"PluginKey":[{"name":"application","type":"uint64"},{"name":"allowedCaller","type":"address"}]},"methods":[{"name":"createApplication","args":[{"type":"address","name":"controlledAddress","desc":"The address of the abstracted account. If zeroAddress, then the address of the contract account will be used"},{"type":"address","name":"admin","desc":"The admin for this app"},{"type":"application","name":"escrowFactory"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Create an abstracted account application.\nThis is not part of ARC58 and implementation specific.","events":[],"recommendations":{}},{"name":"arc58_changeAdmin","args":[{"type":"address","name":"newAdmin","desc":"The new admin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Attempt to change the admin for this app. Some implementations MAY not support this.","events":[],"recommendations":{}},{"name":"arc58_pluginChangeAdmin","args":[{"type":"uint64","name":"plugin","desc":"The app calling the plugin"},{"type":"address","name":"allowedCaller","desc":"The address that triggered the plugin"},{"type":"address","name":"newAdmin","desc":"The new admin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Attempt to change the admin via plugin.","events":[],"recommendations":{}},{"name":"arc58_getAdmin","args":[],"returns":{"type":"address"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get the admin of this app. This method SHOULD always be used rather than reading directly from state\nbecause different implementations may have different ways of determining the admin.","events":[],"recommendations":{}},{"name":"arc58_verifyAuthAddr","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Verify the abstracted account is rekeyed to this app","events":[],"recommendations":{}},{"name":"arc58_rekeyTo","args":[{"type":"address","name":"address","desc":"The address to rekey to"},{"type":"bool","name":"flash","desc":"Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.","events":[],"recommendations":{}},{"name":"arc58_canCall","args":[{"type":"uint64","name":"plugin","desc":"the plugin to be rekeyed to"},{"type":"bool","name":"global","desc":"whether this is callable globally"},{"type":"address","name":"address","desc":"the address that will trigger the plugin"},{"type":"byte[4]","name":"method","desc":"the method being called on the plugin, if applicable"}],"returns":{"type":"bool","desc":"whether the plugin can be called with these parameters"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"check whether the plugin can be used","events":[],"recommendations":{}},{"name":"arc58_rekeyToPlugin","args":[{"type":"uint64","name":"plugin","desc":"The app to rekey to"},{"type":"bool","name":"global","desc":"Whether the plugin is callable globally"},{"type":"uint64[]","name":"methodOffsets","desc":"The indices of the methods being used in the group if the plugin has method restrictions these indices are required to match the methods used on each subsequent call to the plugin within the group"},{"type":"(uint64,uint64)[]","name":"fundsRequest","desc":"If the plugin is using an escrow, this is the list of funds to transfer to the escrow for the plugin to be able to use during execution"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Temporarily rekey to an approved plugin app address","events":[],"recommendations":{}},{"name":"arc58_rekeyToNamedPlugin","args":[{"type":"string","name":"name","desc":"The name of the plugin to rekey to"},{"type":"bool","name":"global","desc":"Whether the plugin is callable globally"},{"type":"uint64[]","name":"methodOffsets","desc":"The indices of the methods being used in the group if the plugin has method restrictions these indices are required to match the methods used on each subsequent call to the plugin within the group"},{"type":"(uint64,uint64)[]","name":"fundsRequest","desc":"If the plugin is using an escrow, this is the list of funds to transfer to the escrow for the plugin to be able to use during execution"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Temporarily rekey to a named plugin app address","events":[],"recommendations":{}},{"name":"arc58_addPlugin","args":[{"type":"uint64","name":"app","desc":"The app to add"},{"type":"address","name":"allowedCaller","desc":"The address of that's allowed to call the app\nor the global zero address for any address"},{"type":"bool","name":"admin","desc":"Whether the plugin has permissions to change the admin account"},{"type":"uint8","name":"delegationType","desc":"the ownership of the delegation for last_interval updates"},{"type":"string","name":"escrow","desc":"The escrow account to use for the plugin, if any. If empty, no escrow will be used, if the named escrow does not exist, it will be created"},{"type":"uint64","name":"lastValid","desc":"The timestamp or round when the permission expires"},{"type":"uint64","name":"cooldown","desc":"The number of seconds or rounds that must pass before the plugin can be called again"},{"type":"(byte[4],uint64)[]","name":"methods","desc":"The methods that are allowed to be called for the plugin by the address"},{"type":"bool","name":"useRounds","desc":"Whether the plugin uses rounds for cooldowns and lastValid, defaults to timestamp"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Add an app to the list of approved plugins","events":[],"recommendations":{}},{"name":"arc58_removePlugin","args":[{"type":"uint64","name":"app","desc":"The app to remove"},{"type":"address","name":"allowedCaller","desc":"The address that's allowed to call the app"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Remove an app from the list of approved plugins","events":[],"recommendations":{}},{"name":"arc58_addNamedPlugin","args":[{"type":"string","name":"name","desc":"The plugin name"},{"type":"uint64","name":"app","desc":"The app to add"},{"type":"address","name":"allowedCaller","desc":"The address that's allowed to call the app\nor the global zero address for any address"},{"type":"bool","name":"admin","desc":"Whether the plugin has permissions to change the admin account"},{"type":"uint8","name":"delegationType","desc":"the ownership of the delegation for last_interval updates"},{"type":"string","name":"escrow","desc":"The escrow account to use for the plugin, if any. If empty, no escrow will be used, if the named escrow does not exist, it will be created"},{"type":"uint64","name":"lastValid","desc":"The timestamp or round when the permission expires"},{"type":"uint64","name":"cooldown","desc":"The number of seconds or rounds that must pass before the plugin can be called again"},{"type":"(byte[4],uint64)[]","name":"methods","desc":"The methods that are allowed to be called for the plugin by the address"},{"type":"bool","name":"useRounds","desc":"Whether the plugin uses rounds for cooldowns and lastValid, defaults to timestamp"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Add a named plugin","events":[],"recommendations":{}},{"name":"arc58_removeNamedPlugin","args":[{"type":"string","name":"name","desc":"The plugin name"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Remove a named plugin","events":[],"recommendations":{}},{"name":"arc58_newEscrow","args":[{"type":"string","name":"escrow","desc":"The name of the escrow to create"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new escrow for the controlled address","events":[],"recommendations":{}},{"name":"arc58_reclaim","args":[{"type":"string","name":"escrow","desc":"The escrow to reclaim funds from"},{"type":"(uint64,uint64,bool)[]","name":"reclaims","desc":"The list of reclaims to make from the escrow"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Transfer funds from an escrow back to the controlled address.","events":[],"recommendations":{}},{"name":"arc58_optinEscrow","args":[{"type":"string","name":"escrow","desc":"The escrow to opt-in to"},{"type":"uint64[]","name":"assets","desc":"The list of assets to opt-in to"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Opt-in an escrow account to assets","events":[],"recommendations":{}},{"name":"arc58_pluginOptinEscrow","args":[{"type":"uint64","name":"app","desc":"The app related to the escrow optin"},{"type":"address","name":"allowedCaller","desc":"The address allowed to call the plugin related to the escrow optin"},{"type":"uint64[]","name":"assets","desc":"The list of assets to opt-in to"},{"type":"pay","name":"mbrPayment","desc":"The payment txn that is used to pay for the asset opt-in"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Opt-in an escrow account to assets via a plugin / allowed caller","events":[],"recommendations":{}},{"name":"arc58_addAllowances","args":[{"type":"string","name":"escrow","desc":"The escrow to add the allowance for"},{"type":"(uint64,uint8,uint64,uint64,uint64,bool)[]","name":"allowances","desc":"The list of allowances to add"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Add an allowance for an escrow account","events":[],"recommendations":{}},{"name":"arc58_removeAllowances","args":[{"type":"string","name":"escrow","desc":"The escrow to remove the allowance for"},{"type":"uint64[]","name":"assets","desc":"The list of assets to remove the allowance for"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Remove an allowances for an escrow account","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":3,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"address","key":"YWRtaW4=","desc":"The admin of the abstracted account. This address can add plugins and initiate rekeys"},"controlledAddress":{"keyType":"AVMString","valueType":"address","key":"Y29udHJvbGxlZF9hZGRyZXNz","desc":"The address this app controls"},"lastUserInteraction":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdF91c2VyX2ludGVyYWN0aW9u","desc":"The last time the contract was interacted with in unix time"},"lastChange":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdF9jaGFuZ2U=","desc":"The last time state has changed on the abstracted account (not including lastCalled for cooldowns) in unix time"},"escrowFactory":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZXNjcm93X2ZhY3Rvcnk=","desc":"the escrow account factory to use for allowances"},"spendingAddress":{"keyType":"AVMString","valueType":"address","key":"c3BlbmRpbmdfYWRkcmVzcw==","desc":"The spending address for the currently active plugin"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"plugins":{"keyType":"PluginKey","valueType":"arc4PluginInfo","desc":"Plugins that add functionality to the controlledAddress and the account that has permission to use it.","prefix":"cA=="},"namedPlugins":{"keyType":"AVMString","valueType":"PluginKey","desc":"Plugins that have been given a name for discoverability","prefix":"bg=="},"escrows":{"keyType":"AVMString","valueType":"uint64","desc":"the escrows that this wallet has created for specific callers with allowances","prefix":"ZQ=="},"allowances":{"keyType":"AllowanceKey","valueType":"AllowanceInfo","desc":"The Allowances for plugins installed on the smart contract with useAllowance set to true","prefix":"YQ=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[809,978,1035,1238,1512,1534,1796,1870,1880,1907,1955,2047,2250,2357,2514,2667,2771,2846,2974,3126,3412,3737,3760,3893,4106,4155,4235,4551,4716],"errorMessage":"Box must have value"},{"pc":[935],"errorMessage":"Bytes has valid prefix"},{"pc":[1019,1020,1535,1923,1957,2049,2252,2359,2516,2668,2873,2914,2959,2985,2990,2995,3000,3015,3020,3209,3211,3539,3541,3742,3921,4501,4507],"errorMessage":"Index access is out of bounds"},{"pc":[302,323,344,376,397,418,436,454,509,528,577,606,633,670,690,702,719,741,756],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1526],"errorMessage":"This plugin does not have admin privileges"},{"pc":[1491],"errorMessage":"This plugin is not in control of the account"},{"pc":[1484,1578],"errorMessage":"account funded"},{"pc":[1626,3152,3394,3484,3724,3845,4428,4656],"errorMessage":"admin only"},{"pc":[4569],"errorMessage":"allowance already exists"},{"pc":[1953,4184,4376,4745],"errorMessage":"allowance does not exist"},{"pc":[2039,2243,2349,2505],"errorMessage":"allowance exceeded"},{"pc":[884,1475,1489,1886,2623,3897,4114,4247,4277],"errorMessage":"application exists"},{"pc":[760],"errorMessage":"can only call when creating"},{"pc":[305,326,347,379,400,421,439,457,512,531,580,609,636,673,693,705,722,744],"errorMessage":"can only call when not creating"},{"pc":[2712],"errorMessage":"cannot call other apps during rekey"},{"pc":[827,838,868,880,1122,1448,1481,1562,1571,1582,1590,1624,1631,2143,2148,2181,2186,2618,2686,3150,3254,3265,3392,3427,3438,3482,3575,3586,3722,3779,3790,3843,3879,3952,3971,4021,4040,4091,4119,4285,4311,4426,4442,4453,4654,4670,4681],"errorMessage":"check GlobalState exists"},{"pc":[3171],"errorMessage":"delegation type must not be self for global plugins"},{"pc":[3855],"errorMessage":"escrow already exists"},{"pc":[3891,4104,4438,4666],"errorMessage":"escrow does not exist"},{"pc":[3881,4093,4269],"errorMessage":"forbidden"},{"pc":[2842],"errorMessage":"invalid method signature length"},{"pc":[2717],"errorMessage":"invalid oncomplete must be no op"},{"pc":[4306],"errorMessage":"invalid payment"},{"pc":[2756],"errorMessage":"invalid plugin call"},{"pc":[2731],"errorMessage":"invalid sender app id"},{"pc":[2723],"errorMessage":"invalid sender must be this app id"},{"pc":[2817],"errorMessage":"malformed method offsets"},{"pc":[2753],"errorMessage":"method on cooldown"},{"pc":[1715,1866],"errorMessage":"missing rekey back"},{"pc":[4240],"errorMessage":"not using escrow for this plugin"},{"pc":[1450],"errorMessage":"only admin can change the admin account"},{"pc":[1794,1828,3409,3734,3757,4233],"errorMessage":"plugin does not exist"},{"pc":[1830],"errorMessage":"plugin expired"},{"pc":[1832],"errorMessage":"plugin on cooldown"},{"pc":[1477],"errorMessage":"sender must be admin plugin"},{"pc":[1386],"errorMessage":"sender must be either controlledAddress or admin"},{"pc":[367],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"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","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":9,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Arc4PluginInfo = {
  admin: boolean,
  delegationType: number,
  escrow: bigint,
  lastValid: bigint,
  cooldown: bigint,
  methods: [Uint8Array, bigint, bigint][],
  useRounds: boolean,
  lastCalled: bigint,
  start: bigint
}


/**
 * Converts the ABI tuple representation of a arc4PluginInfo to the struct representation
 */
export function Arc4PluginInfoFromTuple(abiTuple: [boolean, number, bigint, bigint, bigint, [Uint8Array, bigint, bigint][], boolean, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.arc4PluginInfo, APP_SPEC.structs) as Arc4PluginInfo
}

export type AllowanceInfo = {
  type: number,
  max: bigint,
  allowed: bigint,
  spent: bigint,
  interval: bigint,
  last: bigint,
  start: bigint,
  useRounds: boolean
}


/**
 * Converts the ABI tuple representation of a AllowanceInfo to the struct representation
 */
export function AllowanceInfoFromTuple(abiTuple: [number, bigint, bigint, bigint, bigint, bigint, bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AllowanceInfo, APP_SPEC.structs) as AllowanceInfo
}

export type AllowanceKey = {
  escrow: bigint,
  asset: bigint
}


/**
 * Converts the ABI tuple representation of a AllowanceKey to the struct representation
 */
export function AllowanceKeyFromTuple(abiTuple: [bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AllowanceKey, APP_SPEC.structs) as AllowanceKey
}

export type PluginKey = {
  application: bigint,
  allowedCaller: string
}


/**
 * Converts the ABI tuple representation of a PluginKey to the struct representation
 */
export function PluginKeyFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.PluginKey, APP_SPEC.structs) as PluginKey
}

/**
 * The argument types for the AbstractedAccount contract
 */
export type AbstractedAccountArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address,address,application)void': {
      /**
       * The address of the abstracted account. If zeroAddress, then the address of the contract account will be used
       */
      controlledAddress: string
      /**
       * The admin for this app
       */
      admin: string
      escrowFactory: bigint
    }
    'arc58_changeAdmin(address)void': {
      /**
       * The new admin
       */
      newAdmin: string
    }
    'arc58_pluginChangeAdmin(uint64,address,address)void': {
      /**
       * The app calling the plugin
       */
      plugin: bigint | number
      /**
       * The address that triggered the plugin
       */
      allowedCaller: string
      /**
       * The new admin
       */
      newAdmin: string
    }
    'arc58_getAdmin()address': Record<string, never>
    'arc58_verifyAuthAddr()void': Record<string, never>
    'arc58_rekeyTo(address,bool)void': {
      /**
       * The address to rekey to
       */
      address: string
      /**
       * Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call
       */
      flash: boolean
    }
    'arc58_canCall(uint64,bool,address,byte[4])bool': {
      /**
       * the plugin to be rekeyed to
       */
      plugin: bigint | number
      /**
       * whether this is callable globally
       */
      global: boolean
      /**
       * the address that will trigger the plugin
       */
      address: string
      /**
       * the method being called on the plugin, if applicable
       */
      method: Uint8Array
    }
    'arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void': {
      /**
       * The app to rekey to
       */
      plugin: bigint | number
      /**
       * Whether the plugin is callable globally
       */
      global: boolean
      /**
       * The indices of the methods being used in the group if the plugin has method restrictions these indices are required to match the methods used on each subsequent call to the plugin within the group
       */
      methodOffsets: bigint[] | number[]
      /**
       * If the plugin is using an escrow, this is the list of funds to transfer to the escrow for the plugin to be able to use during execution
       */
      fundsRequest: [bigint | number, bigint | number][]
    }
    'arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void': {
      /**
       * The name of the plugin to rekey to
       */
      name: string
      /**
       * Whether the plugin is callable globally
       */
      global: boolean
      /**
       * The indices of the methods being used in the group if the plugin has method restrictions these indices are required to match the methods used on each subsequent call to the plugin within the group
       */
      methodOffsets: bigint[] | number[]
      /**
       * If the plugin is using an escrow, this is the list of funds to transfer to the escrow for the plugin to be able to use during execution
       */
      fundsRequest: [bigint | number, bigint | number][]
    }
    'arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void': {
      /**
       * The app to add
       */
      app: bigint | number
      /**
      * The address of that's allowed to call the app
      or the global zero address for any address

       */
      allowedCaller: string
      /**
       * Whether the plugin has permissions to change the admin account
       */
      admin: boolean
      /**
       * the ownership of the delegation for last_interval updates
       */
      delegationType: bigint | number
      /**
       * The escrow account to use for the plugin, if any. If empty, no escrow will be used, if the named escrow does not exist, it will be created
       */
      escrow: string
      /**
       * The timestamp or round when the permission expires
       */
      lastValid: bigint | number
      /**
       * The number of seconds or rounds that must pass before the plugin can be called again
       */
      cooldown: bigint | number
      /**
       * The methods that are allowed to be called for the plugin by the address
       */
      methods: [Uint8Array, bigint | number][]
      /**
       * Whether the plugin uses rounds for cooldowns and lastValid, defaults to timestamp
       */
      useRounds: boolean
    }
    'arc58_removePlugin(uint64,address)void': {
      /**
       * The app to remove
       */
      app: bigint | number
      /**
       * The address that's allowed to call the app
       */
      allowedCaller: string
    }
    'arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void': {
      /**
       * The plugin name
       */
      name: string
      /**
       * The app to add
       */
      app: bigint | number
      /**
      * The address that's allowed to call the app
      or the global zero address for any address

       */
      allowedCaller: string
      /**
       * Whether the plugin has permissions to change the admin account
       */
      admin: boolean
      /**
       * the ownership of the delegation for last_interval updates
       */
      delegationType: bigint | number
      /**
       * The escrow account to use for the plugin, if any. If empty, no escrow will be used, if the named escrow does not exist, it will be created
       */
      escrow: string
      /**
       * The timestamp or round when the permission expires
       */
      lastValid: bigint | number
      /**
       * The number of seconds or rounds that must pass before the plugin can be called again
       */
      cooldown: bigint | number
      /**
       * The methods that are allowed to be called for the plugin by the address
       */
      methods: [Uint8Array, bigint | number][]
      /**
       * Whether the plugin uses rounds for cooldowns and lastValid, defaults to timestamp
       */
      useRounds: boolean
    }
    'arc58_removeNamedPlugin(string)void': {
      /**
       * The plugin name
       */
      name: string
    }
    'arc58_newEscrow(string)void': {
      /**
       * The name of the escrow to create
       */
      escrow: string
    }
    'arc58_reclaim(string,(uint64,uint64,bool)[])void': {
      /**
       * The escrow to reclaim funds from
       */
      escrow: string
      /**
       * The list of reclaims to make from the escrow
       */
      reclaims: [bigint | number, bigint | number, boolean][]
    }
    'arc58_optinEscrow(string,uint64[])void': {
      /**
       * The escrow to opt-in to
       */
      escrow: string
      /**
       * The list of assets to opt-in to
       */
      assets: bigint[] | number[]
    }
    'arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void': {
      /**
       * The app related to the escrow optin
       */
      app: bigint | number
      /**
       * The address allowed to call the plugin related to the escrow optin
       */
      allowedCaller: string
      /**
       * The list of assets to opt-in to
       */
      assets: bigint[] | number[]
      /**
       * The payment txn that is used to pay for the asset opt-in
       */
      mbrPayment: AppMethodCallTransactionArgument
    }
    'arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void': {
      /**
       * The escrow to add the allowance for
       */
      escrow: string
      /**
       * The list of allowances to add
       */
      allowances: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, boolean][]
    }
    'arc58_removeAllowances(string,uint64[])void': {
      /**
       * The escrow to remove the allowance for
       */
      escrow: string
      /**
       * The list of assets to remove the allowance for
       */
      assets: bigint[] | number[]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address,address,application)void': [controlledAddress: string, admin: string, escrowFactory: bigint]
    'arc58_changeAdmin(address)void': [newAdmin: string]
    'arc58_pluginChangeAdmin(uint64,address,address)void': [plugin: bigint | number, allowedCaller: string, newAdmin: string]
    'arc58_getAdmin()address': []
    'arc58_verifyAuthAddr()void': []
    'arc58_rekeyTo(address,bool)void': [address: string, flash: boolean]
    'arc58_canCall(uint64,bool,address,byte[4])bool': [plugin: bigint | number, global: boolean, address: string, method: Uint8Array]
    'arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void': [plugin: bigint | number, global: boolean, methodOffsets: bigint[] | number[], fundsRequest: [bigint | number, bigint | number][]]
    'arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void': [name: string, global: boolean, methodOffsets: bigint[] | number[], fundsRequest: [bigint | number, bigint | number][]]
    'arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void': [app: bigint | number, allowedCaller: string, admin: boolean, delegationType: bigint | number, escrow: string, lastValid: bigint | number, cooldown: bigint | number, methods: [Uint8Array, bigint | number][], useRounds: boolean]
    'arc58_removePlugin(uint64,address)void': [app: bigint | number, allowedCaller: string]
    'arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void': [name: string, app: bigint | number, allowedCaller: string, admin: boolean, delegationType: bigint | number, escrow: string, lastValid: bigint | number, cooldown: bigint | number, methods: [Uint8Array, bigint | number][], useRounds: boolean]
    'arc58_removeNamedPlugin(string)void': [name: string]
    'arc58_newEscrow(string)void': [escrow: string]
    'arc58_reclaim(string,(uint64,uint64,bool)[])void': [escrow: string, reclaims: [bigint | number, bigint | number, boolean][]]
    'arc58_optinEscrow(string,uint64[])void': [escrow: string, assets: bigint[] | number[]]
    'arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void': [app: bigint | number, allowedCaller: string, assets: bigint[] | number[], mbrPayment: AppMethodCallTransactionArgument]
    'arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void': [escrow: string, allowances: [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number, boolean][]]
    'arc58_removeAllowances(string,uint64[])void': [escrow: string, assets: bigint[] | number[]]
  }
}

/**
 * The return type for each method
 */
export type AbstractedAccountReturns = {
  'createApplication(address,address,application)void': void
  'arc58_changeAdmin(address)void': void
  'arc58_pluginChangeAdmin(uint64,address,address)void': void
  'arc58_getAdmin()address': string
  'arc58_verifyAuthAddr()void': void
  'arc58_rekeyTo(address,bool)void': void
  'arc58_canCall(uint64,bool,address,byte[4])bool': boolean
  'arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void': void
  'arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void': void
  'arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void': void
  'arc58_removePlugin(uint64,address)void': void
  'arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void': void
  'arc58_removeNamedPlugin(string)void': void
  'arc58_newEscrow(string)void': void
  'arc58_reclaim(string,(uint64,uint64,bool)[])void': void
  'arc58_optinEscrow(string,uint64[])void': void
  'arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void': void
  'arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void': void
  'arc58_removeAllowances(string,uint64[])void': void
}

/**
 * Defines the types of available calls and state of the AbstractedAccount smart contract.
 */
export type AbstractedAccountTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,address,application)void' | 'createApplication', {
      argsObj: AbstractedAccountArgs['obj']['createApplication(address,address,application)void']
      argsTuple: AbstractedAccountArgs['tuple']['createApplication(address,address,application)void']
      returns: AbstractedAccountReturns['createApplication(address,address,application)void']
    }>
    & Record<'arc58_changeAdmin(address)void' | 'arc58_changeAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']
      returns: AbstractedAccountReturns['arc58_changeAdmin(address)void']
    }>
    & Record<'arc58_pluginChangeAdmin(uint64,address,address)void' | 'arc58_pluginChangeAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']
      returns: AbstractedAccountReturns['arc58_pluginChangeAdmin(uint64,address,address)void']
    }>
    & Record<'arc58_getAdmin()address' | 'arc58_getAdmin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_getAdmin()address']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_getAdmin()address']
      returns: AbstractedAccountReturns['arc58_getAdmin()address']
    }>
    & Record<'arc58_verifyAuthAddr()void' | 'arc58_verifyAuthAddr', {
      argsObj: AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']
      returns: AbstractedAccountReturns['arc58_verifyAuthAddr()void']
    }>
    & Record<'arc58_rekeyTo(address,bool)void' | 'arc58_rekeyTo', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']
      returns: AbstractedAccountReturns['arc58_rekeyTo(address,bool)void']
    }>
    & Record<'arc58_canCall(uint64,bool,address,byte[4])bool' | 'arc58_canCall', {
      argsObj: AbstractedAccountArgs['obj']['arc58_canCall(uint64,bool,address,byte[4])bool']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_canCall(uint64,bool,address,byte[4])bool']
      /**
       * whether the plugin can be called with these parameters
       */
      returns: AbstractedAccountReturns['arc58_canCall(uint64,bool,address,byte[4])bool']
    }>
    & Record<'arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void' | 'arc58_rekeyToPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void']
      returns: AbstractedAccountReturns['arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void']
    }>
    & Record<'arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void' | 'arc58_rekeyToNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void']
      returns: AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void']
    }>
    & Record<'arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void' | 'arc58_addPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']
      returns: AbstractedAccountReturns['arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']
    }>
    & Record<'arc58_removePlugin(uint64,address)void' | 'arc58_removePlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']
      returns: AbstractedAccountReturns['arc58_removePlugin(uint64,address)void']
    }>
    & Record<'arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void' | 'arc58_addNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']
      returns: AbstractedAccountReturns['arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']
    }>
    & Record<'arc58_removeNamedPlugin(string)void' | 'arc58_removeNamedPlugin', {
      argsObj: AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']
      returns: AbstractedAccountReturns['arc58_removeNamedPlugin(string)void']
    }>
    & Record<'arc58_newEscrow(string)void' | 'arc58_newEscrow', {
      argsObj: AbstractedAccountArgs['obj']['arc58_newEscrow(string)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_newEscrow(string)void']
      returns: AbstractedAccountReturns['arc58_newEscrow(string)void']
    }>
    & Record<'arc58_reclaim(string,(uint64,uint64,bool)[])void' | 'arc58_reclaim', {
      argsObj: AbstractedAccountArgs['obj']['arc58_reclaim(string,(uint64,uint64,bool)[])void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_reclaim(string,(uint64,uint64,bool)[])void']
      returns: AbstractedAccountReturns['arc58_reclaim(string,(uint64,uint64,bool)[])void']
    }>
    & Record<'arc58_optinEscrow(string,uint64[])void' | 'arc58_optinEscrow', {
      argsObj: AbstractedAccountArgs['obj']['arc58_optinEscrow(string,uint64[])void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_optinEscrow(string,uint64[])void']
      returns: AbstractedAccountReturns['arc58_optinEscrow(string,uint64[])void']
    }>
    & Record<'arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void' | 'arc58_pluginOptinEscrow', {
      argsObj: AbstractedAccountArgs['obj']['arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void']
      returns: AbstractedAccountReturns['arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void']
    }>
    & Record<'arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void' | 'arc58_addAllowances', {
      argsObj: AbstractedAccountArgs['obj']['arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void']
      returns: AbstractedAccountReturns['arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void']
    }>
    & Record<'arc58_removeAllowances(string,uint64[])void' | 'arc58_removeAllowances', {
      argsObj: AbstractedAccountArgs['obj']['arc58_removeAllowances(string,uint64[])void']
      argsTuple: AbstractedAccountArgs['tuple']['arc58_removeAllowances(string,uint64[])void']
      returns: AbstractedAccountReturns['arc58_removeAllowances(string,uint64[])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        /**
         * The admin of the abstracted account. This address can add plugins and initiate rekeys
         */
        admin: string
        /**
         * The address this app controls
         */
        controlledAddress: string
        /**
         * The last time the contract was interacted with in unix time
         */
        lastUserInteraction: bigint
        /**
         * The last time state has changed on the abstracted account (not including lastCalled for cooldowns) in unix time
         */
        lastChange: bigint
        /**
         * the escrow account factory to use for allowances
         */
        escrowFactory: bigint
        /**
         * The spending address for the currently active plugin
         */
        spendingAddress: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        /**
         * Plugins that add functionality to the controlledAddress and the account that has permission to use it.
         */
        plugins: Map<PluginKey, Arc4PluginInfo>
        /**
         * Plugins that have been given a name for discoverability
         */
        namedPlugins: Map<string, PluginKey>
        /**
         * the escrows that this wallet has created for specific callers with allowances
         */
        escrows: Map<string, bigint>
        /**
         * The Allowances for plugins installed on the smart contract with useAllowance set to true
         */
        allowances: Map<AllowanceKey, AllowanceInfo>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AbstractedAccountSignatures = keyof AbstractedAccountTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AbstractedAccountNonVoidMethodSignatures = keyof AbstractedAccountTypes['methods'] extends infer T ? T extends keyof AbstractedAccountTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AbstractedAccountSignatures> = AbstractedAccountTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AbstractedAccount smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AbstractedAccountSignatures> = AbstractedAccountTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AbstractedAccountTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AbstractedAccountTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AbstractedAccountCreateCallParams =
  | Expand<CallParams<AbstractedAccountArgs['obj']['createApplication(address,address,application)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address,application)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AbstractedAccountArgs['obj']['createApplication(address,address,application)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address,application)void']> & {method: 'createApplication(address,address,application)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AbstractedAccountDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AbstractedAccountCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AbstractedAccount smart contract
 */
export abstract class AbstractedAccountParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AbstractedAccountCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address,address,application)void':
            return AbstractedAccountParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AbstractedAccount smart contract using the createApplication(address,address,application)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AbstractedAccountArgs['obj']['createApplication(address,address,application)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address,application)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address,address,application)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.controlledAddress, params.args.admin, params.args.escrowFactory],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc58_changeAdmin(address)void ABI method
   *
   * Attempt to change the admin for this app. Some implementations MAY not support this.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58ChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_changeAdmin(address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the arc58_pluginChangeAdmin(uint64,address,address)void ABI method
   *
   * Attempt to change the admin via plugin.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58PluginChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_pluginChangeAdmin(uint64,address,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.plugin, params.args.allowedCaller, params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the arc58_getAdmin()address ABI method
   *
  * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
  because different implementations may have different ways of determining the admin.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58GetAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_getAdmin()address' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc58_verifyAuthAddr()void ABI method
   *
   * Verify the abstracted account is rekeyed to this app
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58VerifyAuthAddr(params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_verifyAuthAddr()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyTo(address,bool)void ABI method
   *
   * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyTo(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyTo(address,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.address, params.args.flash],
    }
  }
  /**
   * Constructs a no op call for the arc58_canCall(uint64,bool,address,byte[4])bool ABI method
   *
   * check whether the plugin can be used
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58CanCall(params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,bool,address,byte[4])bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,bool,address,byte[4])bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_canCall(uint64,bool,address,byte[4])bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.plugin, params.args.global, params.args.address, params.args.method],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void ABI method
   *
   * Temporarily rekey to an approved plugin app address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyToPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.plugin, params.args.global, params.args.methodOffsets, params.args.fundsRequest],
    }
  }
  /**
   * Constructs a no op call for the arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void ABI method
   *
   * Temporarily rekey to a named plugin app address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RekeyToNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.global, params.args.methodOffsets, params.args.fundsRequest],
    }
  }
  /**
   * Constructs a no op call for the arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void ABI method
   *
   * Add an app to the list of approved plugins
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58AddPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.allowedCaller, params.args.admin, params.args.delegationType, params.args.escrow, params.args.lastValid, params.args.cooldown, params.args.methods, params.args.useRounds],
    }
  }
  /**
   * Constructs a no op call for the arc58_removePlugin(uint64,address)void ABI method
   *
   * Remove an app from the list of approved plugins
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RemovePlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_removePlugin(uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.allowedCaller],
    }
  }
  /**
   * Constructs a no op call for the arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void ABI method
   *
   * Add a named plugin
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58AddNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.app, params.args.allowedCaller, params.args.admin, params.args.delegationType, params.args.escrow, params.args.lastValid, params.args.cooldown, params.args.methods, params.args.useRounds],
    }
  }
  /**
   * Constructs a no op call for the arc58_removeNamedPlugin(string)void ABI method
   *
   * Remove a named plugin
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RemoveNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_removeNamedPlugin(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the arc58_newEscrow(string)void ABI method
   *
   * Create a new escrow for the controlled address
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58NewEscrow(params: CallParams<AbstractedAccountArgs['obj']['arc58_newEscrow(string)void'] | AbstractedAccountArgs['tuple']['arc58_newEscrow(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_newEscrow(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.escrow],
    }
  }
  /**
   * Constructs a no op call for the arc58_reclaim(string,(uint64,uint64,bool)[])void ABI method
   *
   * Transfer funds from an escrow back to the controlled address.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58Reclaim(params: CallParams<AbstractedAccountArgs['obj']['arc58_reclaim(string,(uint64,uint64,bool)[])void'] | AbstractedAccountArgs['tuple']['arc58_reclaim(string,(uint64,uint64,bool)[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_reclaim(string,(uint64,uint64,bool)[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.escrow, params.args.reclaims],
    }
  }
  /**
   * Constructs a no op call for the arc58_optinEscrow(string,uint64[])void ABI method
   *
   * Opt-in an escrow account to assets
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58OptinEscrow(params: CallParams<AbstractedAccountArgs['obj']['arc58_optinEscrow(string,uint64[])void'] | AbstractedAccountArgs['tuple']['arc58_optinEscrow(string,uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_optinEscrow(string,uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.escrow, params.args.assets],
    }
  }
  /**
   * Constructs a no op call for the arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void ABI method
   *
   * Opt-in an escrow account to assets via a plugin / allowed caller
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58PluginOptinEscrow(params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void'] | AbstractedAccountArgs['tuple']['arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.allowedCaller, params.args.assets, params.args.mbrPayment],
    }
  }
  /**
   * Constructs a no op call for the arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void ABI method
   *
   * Add an allowance for an escrow account
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58AddAllowances(params: CallParams<AbstractedAccountArgs['obj']['arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void'] | AbstractedAccountArgs['tuple']['arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.escrow, params.args.allowances],
    }
  }
  /**
   * Constructs a no op call for the arc58_removeAllowances(string,uint64[])void ABI method
   *
   * Remove an allowances for an escrow account
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc58RemoveAllowances(params: CallParams<AbstractedAccountArgs['obj']['arc58_removeAllowances(string,uint64[])void'] | AbstractedAccountArgs['tuple']['arc58_removeAllowances(string,uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc58_removeAllowances(string,uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.escrow, params.args.assets],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AbstractedAccount smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AbstractedAccountFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AbstractedAccountFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AbstractedAccountClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AbstractedAccountClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AbstractedAccount smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AbstractedAccountDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AbstractedAccountParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (AbstractedAccountCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AbstractedAccountClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using the createApplication(address,address,application)void ABI method.
       *
      * Create an abstracted account application.
      This is not part of ARC58 and implementation specific.

       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AbstractedAccountArgs['obj']['createApplication(address,address,application)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address,application)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(AbstractedAccountParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using the createApplication(address,address,application)void ABI method.
       *
      * Create an abstracted account application.
      This is not part of ARC58 and implementation specific.

       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AbstractedAccountArgs['obj']['createApplication(address,address,application)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address,application)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(AbstractedAccountParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AbstractedAccount smart contract using an ABI method call using the createApplication(address,address,application)void ABI method.
       *
      * Create an abstracted account application.
      This is not part of ARC58 and implementation specific.

       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AbstractedAccountArgs['obj']['createApplication(address,address,application)void'] | AbstractedAccountArgs['tuple']['createApplication(address,address,application)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(AbstractedAccountParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | AbstractedAccountReturns['createApplication(address,address,application)void']) }, appClient: new AbstractedAccountClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AbstractedAccount smart contract
 */
export class AbstractedAccountClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AbstractedAccountClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AbstractedAccount app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AbstractedAccountClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AbstractedAccountNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AbstractedAccountClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AbstractedAccountClient> {
    return new AbstractedAccountClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AbstractedAccountClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AbstractedAccountClient> {
    return new AbstractedAccountClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(address)void` ABI method.
     *
     * Attempt to change the admin for this app. Some implementations MAY not support this.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58ChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(uint64,address,address)void` ABI method.
     *
     * Attempt to change the admin via plugin.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58PluginChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
    because different implementations may have different ways of determining the admin.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58GetAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * Verify the abstracted account is rekeyed to this app
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58VerifyAuthAddr: (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(address,bool)void` ABI method.
     *
     * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyTo: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_canCall(uint64,bool,address,byte[4])bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * check whether the plugin can be used
     *
     * @param params The params for the smart contract call
     * @returns The call params: whether the plugin can be called with these parameters
     */
    arc58CanCall: (params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,bool,address,byte[4])bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,bool,address,byte[4])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58CanCall(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void` ABI method.
     *
     * Temporarily rekey to an approved plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyToPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void` ABI method.
     *
     * Temporarily rekey to a named plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RekeyToNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void` ABI method.
     *
     * Add an app to the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58AddPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(uint64,address)void` ABI method.
     *
     * Remove an app from the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RemovePlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void` ABI method.
     *
     * Add a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58AddNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * Remove a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RemoveNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_newEscrow(string)void` ABI method.
     *
     * Create a new escrow for the controlled address
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58NewEscrow: (params: CallParams<AbstractedAccountArgs['obj']['arc58_newEscrow(string)void'] | AbstractedAccountArgs['tuple']['arc58_newEscrow(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58NewEscrow(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_reclaim(string,(uint64,uint64,bool)[])void` ABI method.
     *
     * Transfer funds from an escrow back to the controlled address.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58Reclaim: (params: CallParams<AbstractedAccountArgs['obj']['arc58_reclaim(string,(uint64,uint64,bool)[])void'] | AbstractedAccountArgs['tuple']['arc58_reclaim(string,(uint64,uint64,bool)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58Reclaim(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_optinEscrow(string,uint64[])void` ABI method.
     *
     * Opt-in an escrow account to assets
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58OptinEscrow: (params: CallParams<AbstractedAccountArgs['obj']['arc58_optinEscrow(string,uint64[])void'] | AbstractedAccountArgs['tuple']['arc58_optinEscrow(string,uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58OptinEscrow(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void` ABI method.
     *
     * Opt-in an escrow account to assets via a plugin / allowed caller
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58PluginOptinEscrow: (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void'] | AbstractedAccountArgs['tuple']['arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58PluginOptinEscrow(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void` ABI method.
     *
     * Add an allowance for an escrow account
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58AddAllowances: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void'] | AbstractedAccountArgs['tuple']['arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58AddAllowances(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeAllowances(string,uint64[])void` ABI method.
     *
     * Remove an allowances for an escrow account
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc58RemoveAllowances: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeAllowances(string,uint64[])void'] | AbstractedAccountArgs['tuple']['arc58_removeAllowances(string,uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AbstractedAccountParamsFactory.arc58RemoveAllowances(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(address)void` ABI method.
     *
     * Attempt to change the admin for this app. Some implementations MAY not support this.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58ChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(uint64,address,address)void` ABI method.
     *
     * Attempt to change the admin via plugin.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58PluginChangeAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
    because different implementations may have different ways of determining the admin.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58GetAdmin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * Verify the abstracted account is rekeyed to this app
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58VerifyAuthAddr: (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(address,bool)void` ABI method.
     *
     * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyTo: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_canCall(uint64,bool,address,byte[4])bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * check whether the plugin can be used
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: whether the plugin can be called with these parameters
     */
    arc58CanCall: (params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,bool,address,byte[4])bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,bool,address,byte[4])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58CanCall(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void` ABI method.
     *
     * Temporarily rekey to an approved plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyToPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void` ABI method.
     *
     * Temporarily rekey to a named plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RekeyToNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void` ABI method.
     *
     * Add an app to the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58AddPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(uint64,address)void` ABI method.
     *
     * Remove an app from the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RemovePlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void` ABI method.
     *
     * Add a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58AddNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * Remove a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RemoveNamedPlugin: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_newEscrow(string)void` ABI method.
     *
     * Create a new escrow for the controlled address
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58NewEscrow: (params: CallParams<AbstractedAccountArgs['obj']['arc58_newEscrow(string)void'] | AbstractedAccountArgs['tuple']['arc58_newEscrow(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58NewEscrow(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_reclaim(string,(uint64,uint64,bool)[])void` ABI method.
     *
     * Transfer funds from an escrow back to the controlled address.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58Reclaim: (params: CallParams<AbstractedAccountArgs['obj']['arc58_reclaim(string,(uint64,uint64,bool)[])void'] | AbstractedAccountArgs['tuple']['arc58_reclaim(string,(uint64,uint64,bool)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58Reclaim(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_optinEscrow(string,uint64[])void` ABI method.
     *
     * Opt-in an escrow account to assets
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58OptinEscrow: (params: CallParams<AbstractedAccountArgs['obj']['arc58_optinEscrow(string,uint64[])void'] | AbstractedAccountArgs['tuple']['arc58_optinEscrow(string,uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58OptinEscrow(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void` ABI method.
     *
     * Opt-in an escrow account to assets via a plugin / allowed caller
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58PluginOptinEscrow: (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void'] | AbstractedAccountArgs['tuple']['arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58PluginOptinEscrow(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void` ABI method.
     *
     * Add an allowance for an escrow account
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58AddAllowances: (params: CallParams<AbstractedAccountArgs['obj']['arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void'] | AbstractedAccountArgs['tuple']['arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58AddAllowances(params))
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeAllowances(string,uint64[])void` ABI method.
     *
     * Remove an allowances for an escrow account
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc58RemoveAllowances: (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeAllowances(string,uint64[])void'] | AbstractedAccountArgs['tuple']['arc58_removeAllowances(string,uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AbstractedAccountParamsFactory.arc58RemoveAllowances(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_changeAdmin(address)void` ABI method.
     *
     * Attempt to change the admin for this app. Some implementations MAY not support this.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58ChangeAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58ChangeAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_changeAdmin(address)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginChangeAdmin(uint64,address,address)void` ABI method.
     *
     * Attempt to change the admin via plugin.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58PluginChangeAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58PluginChangeAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_pluginChangeAdmin(uint64,address,address)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
    because different implementations may have different ways of determining the admin.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58GetAdmin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_getAdmin()address'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_verifyAuthAddr()void` ABI method.
     *
     * Verify the abstracted account is rekeyed to this app
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58VerifyAuthAddr: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58VerifyAuthAddr(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_verifyAuthAddr()void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyTo(address,bool)void` ABI method.
     *
     * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyTo: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyTo(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_rekeyTo(address,bool)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_canCall(uint64,bool,address,byte[4])bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * check whether the plugin can be used
     *
     * @param params The params for the smart contract call
     * @returns The call result: whether the plugin can be called with these parameters
     */
    arc58CanCall: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,bool,address,byte[4])bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,bool,address,byte[4])bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58CanCall(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_canCall(uint64,bool,address,byte[4])bool'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void` ABI method.
     *
     * Temporarily rekey to an approved plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyToPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyToPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void` ABI method.
     *
     * Temporarily rekey to a named plugin app address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RekeyToNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RekeyToNamedPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void` ABI method.
     *
     * Add an app to the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58AddPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58AddPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removePlugin(uint64,address)void` ABI method.
     *
     * Remove an app from the list of approved plugins
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RemovePlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RemovePlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_removePlugin(uint64,address)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void` ABI method.
     *
     * Add a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58AddNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58AddNamedPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeNamedPlugin(string)void` ABI method.
     *
     * Remove a named plugin
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RemoveNamedPlugin: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RemoveNamedPlugin(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_removeNamedPlugin(string)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_newEscrow(string)void` ABI method.
     *
     * Create a new escrow for the controlled address
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58NewEscrow: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_newEscrow(string)void'] | AbstractedAccountArgs['tuple']['arc58_newEscrow(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58NewEscrow(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_newEscrow(string)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_reclaim(string,(uint64,uint64,bool)[])void` ABI method.
     *
     * Transfer funds from an escrow back to the controlled address.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58Reclaim: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_reclaim(string,(uint64,uint64,bool)[])void'] | AbstractedAccountArgs['tuple']['arc58_reclaim(string,(uint64,uint64,bool)[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58Reclaim(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_reclaim(string,(uint64,uint64,bool)[])void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_optinEscrow(string,uint64[])void` ABI method.
     *
     * Opt-in an escrow account to assets
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58OptinEscrow: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_optinEscrow(string,uint64[])void'] | AbstractedAccountArgs['tuple']['arc58_optinEscrow(string,uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58OptinEscrow(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_optinEscrow(string,uint64[])void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void` ABI method.
     *
     * Opt-in an escrow account to assets via a plugin / allowed caller
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58PluginOptinEscrow: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void'] | AbstractedAccountArgs['tuple']['arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58PluginOptinEscrow(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void` ABI method.
     *
     * Add an allowance for an escrow account
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58AddAllowances: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void'] | AbstractedAccountArgs['tuple']['arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58AddAllowances(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void'])}
    },

    /**
     * Makes a call to the AbstractedAccount smart contract using the `arc58_removeAllowances(string,uint64[])void` ABI method.
     *
     * Remove an allowances for an escrow account
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc58RemoveAllowances: async (params: CallParams<AbstractedAccountArgs['obj']['arc58_removeAllowances(string,uint64[])void'] | AbstractedAccountArgs['tuple']['arc58_removeAllowances(string,uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58RemoveAllowances(params))
      return {...result, return: result.return as unknown as (undefined | AbstractedAccountReturns['arc58_removeAllowances(string,uint64[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AbstractedAccountClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the AbstractedAccount smart contract using the `arc58_getAdmin()address` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
  because different implementations may have different ways of determining the admin.

   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async arc58GetAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> = {args: []}) {
    const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58GetAdmin(params))
    return result.return as unknown as AbstractedAccountReturns['arc58_getAdmin()address']
  }

  /**
   * Makes a readonly (simulated) call to the AbstractedAccount smart contract using the `arc58_canCall(uint64,bool,address,byte[4])bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * check whether the plugin can be used
   *
   * @param params The params for the smart contract call
   * @returns The call result: whether the plugin can be called with these parameters
   */
  async arc58CanCall(params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,bool,address,byte[4])bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,bool,address,byte[4])bool']>) {
    const result = await this.appClient.send.call(AbstractedAccountParamsFactory.arc58CanCall(params))
    return result.return as unknown as AbstractedAccountReturns['arc58_canCall(uint64,bool,address,byte[4])bool']
  }

  /**
   * Methods to access state for the current AbstractedAccount app
   */
  state = {
    /**
     * Methods to access global state for the current AbstractedAccount app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: result.admin,
          controlledAddress: result.controlledAddress,
          lastUserInteraction: result.lastUserInteraction,
          lastChange: result.lastChange,
          escrowFactory: result.escrowFactory,
          spendingAddress: result.spendingAddress,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
      /**
       * Get the current value of the controlledAddress key in global state
       */
      controlledAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("controlledAddress")) as string | undefined },
      /**
       * Get the current value of the lastUserInteraction key in global state
       */
      lastUserInteraction: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastUserInteraction")) as bigint | undefined },
      /**
       * Get the current value of the lastChange key in global state
       */
      lastChange: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastChange")) as bigint | undefined },
      /**
       * Get the current value of the escrowFactory key in global state
       */
      escrowFactory: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("escrowFactory")) as bigint | undefined },
      /**
       * Get the current value of the spendingAddress key in global state
       */
      spendingAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("spendingAddress")) as string | undefined },
    },
    /**
     * Methods to access box state for the current AbstractedAccount app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the plugins map in box state
       */
      plugins: {
        /**
         * Get all current values of the plugins map in box state
         */
        getMap: async (): Promise<Map<PluginKey, Arc4PluginInfo>> => { return (await this.appClient.state.box.getMap("plugins")) as Map<PluginKey, Arc4PluginInfo> },
        /**
         * Get a current value of the plugins map by key from box state
         */
        value: async (key: PluginKey): Promise<Arc4PluginInfo | undefined> => { return await this.appClient.state.box.getMapValue("plugins", key) as Arc4PluginInfo | undefined },
      },
      /**
       * Get values from the namedPlugins map in box state
       */
      namedPlugins: {
        /**
         * Get all current values of the namedPlugins map in box state
         */
        getMap: async (): Promise<Map<string, PluginKey>> => { return (await this.appClient.state.box.getMap("namedPlugins")) as Map<string, PluginKey> },
        /**
         * Get a current value of the namedPlugins map by key from box state
         */
        value: async (key: string): Promise<PluginKey | undefined> => { return await this.appClient.state.box.getMapValue("namedPlugins", key) as PluginKey | undefined },
      },
      /**
       * Get values from the escrows map in box state
       */
      escrows: {
        /**
         * Get all current values of the escrows map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("escrows")) as Map<string, bigint> },
        /**
         * Get a current value of the escrows map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("escrows", key) as bigint | undefined },
      },
      /**
       * Get values from the allowances map in box state
       */
      allowances: {
        /**
         * Get all current values of the allowances map in box state
         */
        getMap: async (): Promise<Map<AllowanceKey, AllowanceInfo>> => { return (await this.appClient.state.box.getMap("allowances")) as Map<AllowanceKey, AllowanceInfo> },
        /**
         * Get a current value of the allowances map by key from box state
         */
        value: async (key: AllowanceKey): Promise<AllowanceInfo | undefined> => { return await this.appClient.state.box.getMapValue("allowances", key) as AllowanceInfo | undefined },
      },
    },
  }

  public newGroup(): AbstractedAccountComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc58_changeAdmin(address)void method call against the AbstractedAccount contract
       */
      arc58ChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58ChangeAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_pluginChangeAdmin(uint64,address,address)void method call against the AbstractedAccount contract
       */
      arc58PluginChangeAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58PluginChangeAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_getAdmin()address method call against the AbstractedAccount contract
       */
      arc58GetAdmin(params: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58GetAdmin(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc58_getAdmin()address', v))
        return this
      },
      /**
       * Add a arc58_verifyAuthAddr()void method call against the AbstractedAccount contract
       */
      arc58VerifyAuthAddr(params: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58VerifyAuthAddr(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_rekeyTo(address,bool)void method call against the AbstractedAccount contract
       */
      arc58RekeyTo(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyTo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_canCall(uint64,bool,address,byte[4])bool method call against the AbstractedAccount contract
       */
      arc58CanCall(params: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,bool,address,byte[4])bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,bool,address,byte[4])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58CanCall(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc58_canCall(uint64,bool,address,byte[4])bool', v))
        return this
      },
      /**
       * Add a arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void method call against the AbstractedAccount contract
       */
      arc58RekeyToPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyToPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void method call against the AbstractedAccount contract
       */
      arc58RekeyToNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RekeyToNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void method call against the AbstractedAccount contract
       */
      arc58AddPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58AddPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_removePlugin(uint64,address)void method call against the AbstractedAccount contract
       */
      arc58RemovePlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RemovePlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void method call against the AbstractedAccount contract
       */
      arc58AddNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58AddNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_removeNamedPlugin(string)void method call against the AbstractedAccount contract
       */
      arc58RemoveNamedPlugin(params: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RemoveNamedPlugin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_newEscrow(string)void method call against the AbstractedAccount contract
       */
      arc58NewEscrow(params: CallParams<AbstractedAccountArgs['obj']['arc58_newEscrow(string)void'] | AbstractedAccountArgs['tuple']['arc58_newEscrow(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58NewEscrow(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_reclaim(string,(uint64,uint64,bool)[])void method call against the AbstractedAccount contract
       */
      arc58Reclaim(params: CallParams<AbstractedAccountArgs['obj']['arc58_reclaim(string,(uint64,uint64,bool)[])void'] | AbstractedAccountArgs['tuple']['arc58_reclaim(string,(uint64,uint64,bool)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58Reclaim(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_optinEscrow(string,uint64[])void method call against the AbstractedAccount contract
       */
      arc58OptinEscrow(params: CallParams<AbstractedAccountArgs['obj']['arc58_optinEscrow(string,uint64[])void'] | AbstractedAccountArgs['tuple']['arc58_optinEscrow(string,uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58OptinEscrow(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void method call against the AbstractedAccount contract
       */
      arc58PluginOptinEscrow(params: CallParams<AbstractedAccountArgs['obj']['arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void'] | AbstractedAccountArgs['tuple']['arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58PluginOptinEscrow(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void method call against the AbstractedAccount contract
       */
      arc58AddAllowances(params: CallParams<AbstractedAccountArgs['obj']['arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void'] | AbstractedAccountArgs['tuple']['arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58AddAllowances(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc58_removeAllowances(string,uint64[])void method call against the AbstractedAccount contract
       */
      arc58RemoveAllowances(params: CallParams<AbstractedAccountArgs['obj']['arc58_removeAllowances(string,uint64[])void'] | AbstractedAccountArgs['tuple']['arc58_removeAllowances(string,uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc58RemoveAllowances(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the AbstractedAccount contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AbstractedAccountComposer
  }
}
export type AbstractedAccountComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc58_changeAdmin(address)void ABI method.
   *
   * Attempt to change the admin for this app. Some implementations MAY not support this.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58ChangeAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_changeAdmin(address)void'] | AbstractedAccountArgs['tuple']['arc58_changeAdmin(address)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_changeAdmin(address)void'] | undefined]>

  /**
   * Calls the arc58_pluginChangeAdmin(uint64,address,address)void ABI method.
   *
   * Attempt to change the admin via plugin.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58PluginChangeAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_pluginChangeAdmin(uint64,address,address)void'] | AbstractedAccountArgs['tuple']['arc58_pluginChangeAdmin(uint64,address,address)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_pluginChangeAdmin(uint64,address,address)void'] | undefined]>

  /**
   * Calls the arc58_getAdmin()address ABI method.
   *
  * Get the admin of this app. This method SHOULD always be used rather than reading directly from state
  because different implementations may have different ways of determining the admin.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58GetAdmin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_getAdmin()address'] | AbstractedAccountArgs['tuple']['arc58_getAdmin()address']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_getAdmin()address'] | undefined]>

  /**
   * Calls the arc58_verifyAuthAddr()void ABI method.
   *
   * Verify the abstracted account is rekeyed to this app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58VerifyAuthAddr(params?: CallParams<AbstractedAccountArgs['obj']['arc58_verifyAuthAddr()void'] | AbstractedAccountArgs['tuple']['arc58_verifyAuthAddr()void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_verifyAuthAddr()void'] | undefined]>

  /**
   * Calls the arc58_rekeyTo(address,bool)void ABI method.
   *
   * Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyTo(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyTo(address,bool)void'] | AbstractedAccountArgs['tuple']['arc58_rekeyTo(address,bool)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyTo(address,bool)void'] | undefined]>

  /**
   * Calls the arc58_canCall(uint64,bool,address,byte[4])bool ABI method.
   *
   * check whether the plugin can be used
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58CanCall(params?: CallParams<AbstractedAccountArgs['obj']['arc58_canCall(uint64,bool,address,byte[4])bool'] | AbstractedAccountArgs['tuple']['arc58_canCall(uint64,bool,address,byte[4])bool']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_canCall(uint64,bool,address,byte[4])bool'] | undefined]>

  /**
   * Calls the arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void ABI method.
   *
   * Temporarily rekey to an approved plugin app address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyToPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyToPlugin(uint64,bool,uint64[],(uint64,uint64)[])void'] | undefined]>

  /**
   * Calls the arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void ABI method.
   *
   * Temporarily rekey to a named plugin app address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RekeyToNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void'] | AbstractedAccountArgs['tuple']['arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_rekeyToNamedPlugin(string,bool,uint64[],(uint64,uint64)[])void'] | undefined]>

  /**
   * Calls the arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void ABI method.
   *
   * Add an app to the list of approved plugins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58AddPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void'] | AbstractedAccountArgs['tuple']['arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_addPlugin(uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void'] | undefined]>

  /**
   * Calls the arc58_removePlugin(uint64,address)void ABI method.
   *
   * Remove an app from the list of approved plugins
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RemovePlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_removePlugin(uint64,address)void'] | AbstractedAccountArgs['tuple']['arc58_removePlugin(uint64,address)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_removePlugin(uint64,address)void'] | undefined]>

  /**
   * Calls the arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void ABI method.
   *
   * Add a named plugin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58AddNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void'] | AbstractedAccountArgs['tuple']['arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_addNamedPlugin(string,uint64,address,bool,uint8,string,uint64,uint64,(byte[4],uint64)[],bool)void'] | undefined]>

  /**
   * Calls the arc58_removeNamedPlugin(string)void ABI method.
   *
   * Remove a named plugin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RemoveNamedPlugin(params?: CallParams<AbstractedAccountArgs['obj']['arc58_removeNamedPlugin(string)void'] | AbstractedAccountArgs['tuple']['arc58_removeNamedPlugin(string)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_removeNamedPlugin(string)void'] | undefined]>

  /**
   * Calls the arc58_newEscrow(string)void ABI method.
   *
   * Create a new escrow for the controlled address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58NewEscrow(params?: CallParams<AbstractedAccountArgs['obj']['arc58_newEscrow(string)void'] | AbstractedAccountArgs['tuple']['arc58_newEscrow(string)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_newEscrow(string)void'] | undefined]>

  /**
   * Calls the arc58_reclaim(string,(uint64,uint64,bool)[])void ABI method.
   *
   * Transfer funds from an escrow back to the controlled address.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58Reclaim(params?: CallParams<AbstractedAccountArgs['obj']['arc58_reclaim(string,(uint64,uint64,bool)[])void'] | AbstractedAccountArgs['tuple']['arc58_reclaim(string,(uint64,uint64,bool)[])void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_reclaim(string,(uint64,uint64,bool)[])void'] | undefined]>

  /**
   * Calls the arc58_optinEscrow(string,uint64[])void ABI method.
   *
   * Opt-in an escrow account to assets
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58OptinEscrow(params?: CallParams<AbstractedAccountArgs['obj']['arc58_optinEscrow(string,uint64[])void'] | AbstractedAccountArgs['tuple']['arc58_optinEscrow(string,uint64[])void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_optinEscrow(string,uint64[])void'] | undefined]>

  /**
   * Calls the arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void ABI method.
   *
   * Opt-in an escrow account to assets via a plugin / allowed caller
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58PluginOptinEscrow(params?: CallParams<AbstractedAccountArgs['obj']['arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void'] | AbstractedAccountArgs['tuple']['arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_pluginOptinEscrow(uint64,address,uint64[],pay)void'] | undefined]>

  /**
   * Calls the arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void ABI method.
   *
   * Add an allowance for an escrow account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58AddAllowances(params?: CallParams<AbstractedAccountArgs['obj']['arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void'] | AbstractedAccountArgs['tuple']['arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_addAllowances(string,(uint64,uint8,uint64,uint64,uint64,bool)[])void'] | undefined]>

  /**
   * Calls the arc58_removeAllowances(string,uint64[])void ABI method.
   *
   * Remove an allowances for an escrow account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc58RemoveAllowances(params?: CallParams<AbstractedAccountArgs['obj']['arc58_removeAllowances(string,uint64[])void'] | AbstractedAccountArgs['tuple']['arc58_removeAllowances(string,uint64[])void']>): AbstractedAccountComposer<[...TReturns, AbstractedAccountReturns['arc58_removeAllowances(string,uint64[])void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AbstractedAccount smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AbstractedAccountComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AbstractedAccountComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AbstractedAccountComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AbstractedAccountComposerResults<TReturns>>
}
export type AbstractedAccountComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

