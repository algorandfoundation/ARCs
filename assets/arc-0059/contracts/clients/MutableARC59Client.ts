/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"MutableARC59","desc":"","structs":{},"methods":[{"name":"createApplication","desc":"Deploy ARC59 contract","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"arc59_optRouterIn","desc":"Opt the ARC59 router into the ASA. This is required before this app can be used to send the ASA to anyone.","args":[{"name":"asa","type":"uint64","desc":"The ASA to opt into"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"arc59_getOrCreateInbox","desc":"Gets the existing inbox for the receiver or creates a new one if it does not exist","args":[{"name":"receiver","type":"address","desc":"The address to get or create the inbox for"}],"returns":{"type":"address","desc":"The inbox address"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"arc59_getSendAssetInfo","args":[{"name":"receiver","type":"address","desc":"The address to send the asset to"},{"name":"asset","type":"uint64","desc":"The asset to send"}],"returns":{"type":"(uint64,uint64,bool,bool,uint64,uint64)","desc":"Returns the following information for sending an asset:The number of itxns required, the MBR required, whether the router is opted in, whether the receiver is opted in,and how much ALGO the receiver would need to claim the asset"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"arc59_sendAsset","desc":"Send an asset to the receiver","args":[{"name":"axfer","type":"axfer","desc":"The asset transfer to this app"},{"name":"receiver","type":"address","desc":"The address to send the asset to"},{"name":"additionalReceiverFunds","type":"uint64","desc":"The amount of ALGO to send to the receiver/inbox in addition to the MBR"}],"returns":{"type":"address","desc":"The address that the asset was sent to (either the receiver or their inbox)"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"arc59_claim","desc":"Claim an ASA from the inbox","args":[{"name":"asa","type":"uint64","desc":"The ASA to claim"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"arc59_reject","desc":"Reject the ASA by closing it out to the ASA creator. Always sends two inner transactions.All non-MBR ALGO balance in the inbox will be sent to the caller.","args":[{"name":"asa","type":"uint64","desc":"The ASA to reject"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"arc59_getInbox","desc":"Get the inbox address for the given receiver","args":[{"name":"receiver","type":"address","desc":"The receiver to get the inbox for"}],"returns":{"type":"address","desc":"Zero address if the receiver does not yet have an inbox, otherwise the inbox address"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"arc59_claimAlgo","desc":"Claim any extra algo from the inbox","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"updateApplication","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["UpdateApplication"]}}],"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"bareActions":{"create":[],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the MutableArc59 contract
 */
export type MutableArc59Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'arc59_optRouterIn(uint64)void': {
      /**
       * The ASA to opt into
       */
      asa: bigint | number
    }
    'arc59_getOrCreateInbox(address)address': {
      /**
       * The address to get or create the inbox for
       */
      receiver: string
    }
    'arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)': {
      /**
       * The address to send the asset to
       */
      receiver: string
      /**
       * The asset to send
       */
      asset: bigint | number
    }
    'arc59_sendAsset(axfer,address,uint64)address': {
      /**
       * The asset transfer to this app
       */
      axfer: AppMethodCallTransactionArgument
      /**
       * The address to send the asset to
       */
      receiver: string
      /**
       * The amount of ALGO to send to the receiver/inbox in addition to the MBR
       */
      additionalReceiverFunds: bigint | number
    }
    'arc59_claim(uint64)void': {
      /**
       * The ASA to claim
       */
      asa: bigint | number
    }
    'arc59_reject(uint64)void': {
      /**
       * The ASA to reject
       */
      asa: bigint | number
    }
    'arc59_getInbox(address)address': {
      /**
       * The receiver to get the inbox for
       */
      receiver: string
    }
    'arc59_claimAlgo()void': Record<string, never>
    'updateApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'arc59_optRouterIn(uint64)void': [asa: bigint | number]
    'arc59_getOrCreateInbox(address)address': [receiver: string]
    'arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)': [receiver: string, asset: bigint | number]
    'arc59_sendAsset(axfer,address,uint64)address': [axfer: AppMethodCallTransactionArgument, receiver: string, additionalReceiverFunds: bigint | number]
    'arc59_claim(uint64)void': [asa: bigint | number]
    'arc59_reject(uint64)void': [asa: bigint | number]
    'arc59_getInbox(address)address': [receiver: string]
    'arc59_claimAlgo()void': []
    'updateApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type MutableArc59Returns = {
  'createApplication()void': void
  'arc59_optRouterIn(uint64)void': void
  'arc59_getOrCreateInbox(address)address': string
  'arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)': [bigint, bigint, boolean, boolean, bigint, bigint]
  'arc59_sendAsset(axfer,address,uint64)address': string
  'arc59_claim(uint64)void': void
  'arc59_reject(uint64)void': void
  'arc59_getInbox(address)address': string
  'arc59_claimAlgo()void': void
  'updateApplication()void': void
}

/**
 * Defines the types of available calls and state of the MutableArc59 smart contract.
 */
export type MutableArc59Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: MutableArc59Args['obj']['createApplication()void']
      argsTuple: MutableArc59Args['tuple']['createApplication()void']
      returns: MutableArc59Returns['createApplication()void']
    }>
    & Record<'arc59_optRouterIn(uint64)void' | 'arc59_optRouterIn', {
      argsObj: MutableArc59Args['obj']['arc59_optRouterIn(uint64)void']
      argsTuple: MutableArc59Args['tuple']['arc59_optRouterIn(uint64)void']
      returns: MutableArc59Returns['arc59_optRouterIn(uint64)void']
    }>
    & Record<'arc59_getOrCreateInbox(address)address' | 'arc59_getOrCreateInbox', {
      argsObj: MutableArc59Args['obj']['arc59_getOrCreateInbox(address)address']
      argsTuple: MutableArc59Args['tuple']['arc59_getOrCreateInbox(address)address']
      /**
       * The inbox address
       */
      returns: MutableArc59Returns['arc59_getOrCreateInbox(address)address']
    }>
    & Record<'arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)' | 'arc59_getSendAssetInfo', {
      argsObj: MutableArc59Args['obj']['arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)']
      argsTuple: MutableArc59Args['tuple']['arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)']
      /**
       * Returns the following information for sending an asset:The number of itxns required, the MBR required, whether the router is opted in, whether the receiver is opted in,and how much ALGO the receiver would need to claim the asset
       */
      returns: MutableArc59Returns['arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)']
    }>
    & Record<'arc59_sendAsset(axfer,address,uint64)address' | 'arc59_sendAsset', {
      argsObj: MutableArc59Args['obj']['arc59_sendAsset(axfer,address,uint64)address']
      argsTuple: MutableArc59Args['tuple']['arc59_sendAsset(axfer,address,uint64)address']
      /**
       * The address that the asset was sent to (either the receiver or their inbox)
       */
      returns: MutableArc59Returns['arc59_sendAsset(axfer,address,uint64)address']
    }>
    & Record<'arc59_claim(uint64)void' | 'arc59_claim', {
      argsObj: MutableArc59Args['obj']['arc59_claim(uint64)void']
      argsTuple: MutableArc59Args['tuple']['arc59_claim(uint64)void']
      returns: MutableArc59Returns['arc59_claim(uint64)void']
    }>
    & Record<'arc59_reject(uint64)void' | 'arc59_reject', {
      argsObj: MutableArc59Args['obj']['arc59_reject(uint64)void']
      argsTuple: MutableArc59Args['tuple']['arc59_reject(uint64)void']
      returns: MutableArc59Returns['arc59_reject(uint64)void']
    }>
    & Record<'arc59_getInbox(address)address' | 'arc59_getInbox', {
      argsObj: MutableArc59Args['obj']['arc59_getInbox(address)address']
      argsTuple: MutableArc59Args['tuple']['arc59_getInbox(address)address']
      /**
       * Zero address if the receiver does not yet have an inbox, otherwise the inbox address
       */
      returns: MutableArc59Returns['arc59_getInbox(address)address']
    }>
    & Record<'arc59_claimAlgo()void' | 'arc59_claimAlgo', {
      argsObj: MutableArc59Args['obj']['arc59_claimAlgo()void']
      argsTuple: MutableArc59Args['tuple']['arc59_claimAlgo()void']
      returns: MutableArc59Returns['arc59_claimAlgo()void']
    }>
    & Record<'updateApplication()void' | 'updateApplication', {
      argsObj: MutableArc59Args['obj']['updateApplication()void']
      argsTuple: MutableArc59Args['tuple']['updateApplication()void']
      returns: MutableArc59Returns['updateApplication()void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type MutableArc59Signatures = keyof MutableArc59Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type MutableArc59NonVoidMethodSignatures = keyof MutableArc59Types['methods'] extends infer T ? T extends keyof MutableArc59Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the MutableArc59 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends MutableArc59Signatures> = MutableArc59Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the MutableArc59 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MutableArc59Signatures> = MutableArc59Types['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type MutableArc59CreateCallParams =
  | Expand<CallParams<MutableArc59Args['obj']['createApplication()void'] | MutableArc59Args['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<MutableArc59Args['obj']['createApplication()void'] | MutableArc59Args['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type MutableArc59UpdateCallParams =
  | Expand<CallParams<MutableArc59Args['obj']['updateApplication()void'] | MutableArc59Args['tuple']['updateApplication()void']> & {method: 'updateApplication'}>
  | Expand<CallParams<MutableArc59Args['obj']['updateApplication()void'] | MutableArc59Args['tuple']['updateApplication()void']> & {method: 'updateApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type MutableArc59DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: MutableArc59CreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: MutableArc59UpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the MutableArc59 smart contract
 */
export abstract class MutableArc59ParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends MutableArc59CreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return MutableArc59ParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the MutableARC59 smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<MutableArc59Args['obj']['createApplication()void'] | MutableArc59Args['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends MutableArc59UpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication()void':
            return MutableArc59ParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the MutableARC59 smart contract using the updateApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<MutableArc59Args['obj']['updateApplication()void'] | MutableArc59Args['tuple']['updateApplication()void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc59_optRouterIn(uint64)void ABI method
   *
   * Opt the ARC59 router into the ASA. This is required before this app can be used to send the ASA to anyone.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc59OptRouterIn(params: CallParams<MutableArc59Args['obj']['arc59_optRouterIn(uint64)void'] | MutableArc59Args['tuple']['arc59_optRouterIn(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc59_optRouterIn(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asa],
    }
  }
  /**
   * Constructs a no op call for the arc59_getOrCreateInbox(address)address ABI method
   *
   * Gets the existing inbox for the receiver or creates a new one if it does not exist
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc59GetOrCreateInbox(params: CallParams<MutableArc59Args['obj']['arc59_getOrCreateInbox(address)address'] | MutableArc59Args['tuple']['arc59_getOrCreateInbox(address)address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc59_getOrCreateInbox(address)address' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.receiver],
    }
  }
  /**
   * Constructs a no op call for the arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc59GetSendAssetInfo(params: CallParams<MutableArc59Args['obj']['arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)'] | MutableArc59Args['tuple']['arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.receiver, params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the arc59_sendAsset(axfer,address,uint64)address ABI method
   *
   * Send an asset to the receiver
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc59SendAsset(params: CallParams<MutableArc59Args['obj']['arc59_sendAsset(axfer,address,uint64)address'] | MutableArc59Args['tuple']['arc59_sendAsset(axfer,address,uint64)address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc59_sendAsset(axfer,address,uint64)address' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.axfer, params.args.receiver, params.args.additionalReceiverFunds],
    }
  }
  /**
   * Constructs a no op call for the arc59_claim(uint64)void ABI method
   *
   * Claim an ASA from the inbox
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc59Claim(params: CallParams<MutableArc59Args['obj']['arc59_claim(uint64)void'] | MutableArc59Args['tuple']['arc59_claim(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc59_claim(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asa],
    }
  }
  /**
   * Constructs a no op call for the arc59_reject(uint64)void ABI method
   *
   * Reject the ASA by closing it out to the ASA creator. Always sends two inner transactions.All non-MBR ALGO balance in the inbox will be sent to the caller.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc59Reject(params: CallParams<MutableArc59Args['obj']['arc59_reject(uint64)void'] | MutableArc59Args['tuple']['arc59_reject(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc59_reject(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asa],
    }
  }
  /**
   * Constructs a no op call for the arc59_getInbox(address)address ABI method
   *
   * Get the inbox address for the given receiver
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc59GetInbox(params: CallParams<MutableArc59Args['obj']['arc59_getInbox(address)address'] | MutableArc59Args['tuple']['arc59_getInbox(address)address']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc59_getInbox(address)address' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.receiver],
    }
  }
  /**
   * Constructs a no op call for the arc59_claimAlgo()void ABI method
   *
   * Claim any extra algo from the inbox
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc59ClaimAlgo(params: CallParams<MutableArc59Args['obj']['arc59_claimAlgo()void'] | MutableArc59Args['tuple']['arc59_claimAlgo()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc59_claimAlgo()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the MutableARC59 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class MutableArc59Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `MutableArc59Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new MutableArc59Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new MutableArc59Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the MutableARC59 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: MutableArc59DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? MutableArc59ParamsFactory.create._resolveByMethod(params.createParams) : params.createParams,
      updateParams: params.updateParams?.method ? MutableArc59ParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams,
    })
    return { result: result.result, appClient: new MutableArc59Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MutableARC59 smart contract using the createApplication()void ABI method.
       *
       * Deploy ARC59 contract
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<MutableArc59Args['obj']['createApplication()void'] | MutableArc59Args['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(MutableArc59ParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the MutableARC59 smart contract using the updateApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<MutableArc59Args['obj']['updateApplication()void'] | MutableArc59Args['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appFactory.params.deployUpdate(MutableArc59ParamsFactory.update.updateApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MutableARC59 smart contract using the createApplication()void ABI method.
       *
       * Deploy ARC59 contract
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<MutableArc59Args['obj']['createApplication()void'] | MutableArc59Args['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(MutableArc59ParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MutableARC59 smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * Deploy ARC59 contract
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<MutableArc59Args['obj']['createApplication()void'] | MutableArc59Args['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(MutableArc59ParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as undefined | MutableArc59Returns['createApplication()void'] }, appClient: new MutableArc59Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the MutableARC59 smart contract
 */
export class MutableArc59Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `MutableArc59Client`
   *
   * @param appClient An `AppClient` instance which has been created with the MutableArc59 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `MutableArc59Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends MutableArc59NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `MutableArc59Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<MutableArc59Client> {
    return new MutableArc59Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `MutableArc59Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<MutableArc59Client> {
    return new MutableArc59Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the MutableARC59 smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<MutableArc59Args['obj']['updateApplication()void'] | MutableArc59Args['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.params.update(MutableArc59ParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the MutableARC59 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_optRouterIn(uint64)void` ABI method.
     *
     * Opt the ARC59 router into the ASA. This is required before this app can be used to send the ASA to anyone.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc59OptRouterIn: (params: CallParams<MutableArc59Args['obj']['arc59_optRouterIn(uint64)void'] | MutableArc59Args['tuple']['arc59_optRouterIn(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MutableArc59ParamsFactory.arc59OptRouterIn(params))
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_getOrCreateInbox(address)address` ABI method.
     *
     * Gets the existing inbox for the receiver or creates a new one if it does not exist
     *
     * @param params The params for the smart contract call
     * @returns The call params: The inbox address
     */
    arc59GetOrCreateInbox: (params: CallParams<MutableArc59Args['obj']['arc59_getOrCreateInbox(address)address'] | MutableArc59Args['tuple']['arc59_getOrCreateInbox(address)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MutableArc59ParamsFactory.arc59GetOrCreateInbox(params))
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params: Returns the following information for sending an asset:The number of itxns required, the MBR required, whether the router is opted in, whether the receiver is opted in,and how much ALGO the receiver would need to claim the asset
     */
    arc59GetSendAssetInfo: (params: CallParams<MutableArc59Args['obj']['arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)'] | MutableArc59Args['tuple']['arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MutableArc59ParamsFactory.arc59GetSendAssetInfo(params))
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_sendAsset(axfer,address,uint64)address` ABI method.
     *
     * Send an asset to the receiver
     *
     * @param params The params for the smart contract call
     * @returns The call params: The address that the asset was sent to (either the receiver or their inbox)
     */
    arc59SendAsset: (params: CallParams<MutableArc59Args['obj']['arc59_sendAsset(axfer,address,uint64)address'] | MutableArc59Args['tuple']['arc59_sendAsset(axfer,address,uint64)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MutableArc59ParamsFactory.arc59SendAsset(params))
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_claim(uint64)void` ABI method.
     *
     * Claim an ASA from the inbox
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc59Claim: (params: CallParams<MutableArc59Args['obj']['arc59_claim(uint64)void'] | MutableArc59Args['tuple']['arc59_claim(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MutableArc59ParamsFactory.arc59Claim(params))
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_reject(uint64)void` ABI method.
     *
     * Reject the ASA by closing it out to the ASA creator. Always sends two inner transactions.All non-MBR ALGO balance in the inbox will be sent to the caller.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc59Reject: (params: CallParams<MutableArc59Args['obj']['arc59_reject(uint64)void'] | MutableArc59Args['tuple']['arc59_reject(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MutableArc59ParamsFactory.arc59Reject(params))
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_getInbox(address)address` ABI method.
     *
     * Get the inbox address for the given receiver
     *
     * @param params The params for the smart contract call
     * @returns The call params: Zero address if the receiver does not yet have an inbox, otherwise the inbox address
     */
    arc59GetInbox: (params: CallParams<MutableArc59Args['obj']['arc59_getInbox(address)address'] | MutableArc59Args['tuple']['arc59_getInbox(address)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MutableArc59ParamsFactory.arc59GetInbox(params))
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_claimAlgo()void` ABI method.
     *
     * Claim any extra algo from the inbox
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc59ClaimAlgo: (params: CallParams<MutableArc59Args['obj']['arc59_claimAlgo()void'] | MutableArc59Args['tuple']['arc59_claimAlgo()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(MutableArc59ParamsFactory.arc59ClaimAlgo(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the MutableARC59 smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<MutableArc59Args['obj']['updateApplication()void'] | MutableArc59Args['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.createTransaction.update(MutableArc59ParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the MutableARC59 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_optRouterIn(uint64)void` ABI method.
     *
     * Opt the ARC59 router into the ASA. This is required before this app can be used to send the ASA to anyone.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc59OptRouterIn: (params: CallParams<MutableArc59Args['obj']['arc59_optRouterIn(uint64)void'] | MutableArc59Args['tuple']['arc59_optRouterIn(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MutableArc59ParamsFactory.arc59OptRouterIn(params))
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_getOrCreateInbox(address)address` ABI method.
     *
     * Gets the existing inbox for the receiver or creates a new one if it does not exist
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The inbox address
     */
    arc59GetOrCreateInbox: (params: CallParams<MutableArc59Args['obj']['arc59_getOrCreateInbox(address)address'] | MutableArc59Args['tuple']['arc59_getOrCreateInbox(address)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MutableArc59ParamsFactory.arc59GetOrCreateInbox(params))
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Returns the following information for sending an asset:The number of itxns required, the MBR required, whether the router is opted in, whether the receiver is opted in,and how much ALGO the receiver would need to claim the asset
     */
    arc59GetSendAssetInfo: (params: CallParams<MutableArc59Args['obj']['arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)'] | MutableArc59Args['tuple']['arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MutableArc59ParamsFactory.arc59GetSendAssetInfo(params))
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_sendAsset(axfer,address,uint64)address` ABI method.
     *
     * Send an asset to the receiver
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The address that the asset was sent to (either the receiver or their inbox)
     */
    arc59SendAsset: (params: CallParams<MutableArc59Args['obj']['arc59_sendAsset(axfer,address,uint64)address'] | MutableArc59Args['tuple']['arc59_sendAsset(axfer,address,uint64)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MutableArc59ParamsFactory.arc59SendAsset(params))
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_claim(uint64)void` ABI method.
     *
     * Claim an ASA from the inbox
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc59Claim: (params: CallParams<MutableArc59Args['obj']['arc59_claim(uint64)void'] | MutableArc59Args['tuple']['arc59_claim(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MutableArc59ParamsFactory.arc59Claim(params))
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_reject(uint64)void` ABI method.
     *
     * Reject the ASA by closing it out to the ASA creator. Always sends two inner transactions.All non-MBR ALGO balance in the inbox will be sent to the caller.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc59Reject: (params: CallParams<MutableArc59Args['obj']['arc59_reject(uint64)void'] | MutableArc59Args['tuple']['arc59_reject(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MutableArc59ParamsFactory.arc59Reject(params))
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_getInbox(address)address` ABI method.
     *
     * Get the inbox address for the given receiver
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Zero address if the receiver does not yet have an inbox, otherwise the inbox address
     */
    arc59GetInbox: (params: CallParams<MutableArc59Args['obj']['arc59_getInbox(address)address'] | MutableArc59Args['tuple']['arc59_getInbox(address)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MutableArc59ParamsFactory.arc59GetInbox(params))
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_claimAlgo()void` ABI method.
     *
     * Claim any extra algo from the inbox
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc59ClaimAlgo: (params: CallParams<MutableArc59Args['obj']['arc59_claimAlgo()void'] | MutableArc59Args['tuple']['arc59_claimAlgo()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(MutableArc59ParamsFactory.arc59ClaimAlgo(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the MutableARC59 smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<MutableArc59Args['obj']['updateApplication()void'] | MutableArc59Args['tuple']['updateApplication()void']> & AppClientCompilationParams & SendParams = {args: []}) => {
        const result = await this.appClient.send.update(MutableArc59ParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as undefined | MutableArc59Returns['updateApplication()void']}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the MutableARC59 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_optRouterIn(uint64)void` ABI method.
     *
     * Opt the ARC59 router into the ASA. This is required before this app can be used to send the ASA to anyone.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc59OptRouterIn: async (params: CallParams<MutableArc59Args['obj']['arc59_optRouterIn(uint64)void'] | MutableArc59Args['tuple']['arc59_optRouterIn(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MutableArc59ParamsFactory.arc59OptRouterIn(params))
      return {...result, return: result.return as undefined | MutableArc59Returns['arc59_optRouterIn(uint64)void']}
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_getOrCreateInbox(address)address` ABI method.
     *
     * Gets the existing inbox for the receiver or creates a new one if it does not exist
     *
     * @param params The params for the smart contract call
     * @returns The call result: The inbox address
     */
    arc59GetOrCreateInbox: async (params: CallParams<MutableArc59Args['obj']['arc59_getOrCreateInbox(address)address'] | MutableArc59Args['tuple']['arc59_getOrCreateInbox(address)address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MutableArc59ParamsFactory.arc59GetOrCreateInbox(params))
      return {...result, return: result.return as undefined | MutableArc59Returns['arc59_getOrCreateInbox(address)address']}
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result: Returns the following information for sending an asset:The number of itxns required, the MBR required, whether the router is opted in, whether the receiver is opted in,and how much ALGO the receiver would need to claim the asset
     */
    arc59GetSendAssetInfo: async (params: CallParams<MutableArc59Args['obj']['arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)'] | MutableArc59Args['tuple']['arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MutableArc59ParamsFactory.arc59GetSendAssetInfo(params))
      return {...result, return: result.return as undefined | MutableArc59Returns['arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)']}
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_sendAsset(axfer,address,uint64)address` ABI method.
     *
     * Send an asset to the receiver
     *
     * @param params The params for the smart contract call
     * @returns The call result: The address that the asset was sent to (either the receiver or their inbox)
     */
    arc59SendAsset: async (params: CallParams<MutableArc59Args['obj']['arc59_sendAsset(axfer,address,uint64)address'] | MutableArc59Args['tuple']['arc59_sendAsset(axfer,address,uint64)address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MutableArc59ParamsFactory.arc59SendAsset(params))
      return {...result, return: result.return as undefined | MutableArc59Returns['arc59_sendAsset(axfer,address,uint64)address']}
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_claim(uint64)void` ABI method.
     *
     * Claim an ASA from the inbox
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc59Claim: async (params: CallParams<MutableArc59Args['obj']['arc59_claim(uint64)void'] | MutableArc59Args['tuple']['arc59_claim(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MutableArc59ParamsFactory.arc59Claim(params))
      return {...result, return: result.return as undefined | MutableArc59Returns['arc59_claim(uint64)void']}
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_reject(uint64)void` ABI method.
     *
     * Reject the ASA by closing it out to the ASA creator. Always sends two inner transactions.All non-MBR ALGO balance in the inbox will be sent to the caller.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc59Reject: async (params: CallParams<MutableArc59Args['obj']['arc59_reject(uint64)void'] | MutableArc59Args['tuple']['arc59_reject(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MutableArc59ParamsFactory.arc59Reject(params))
      return {...result, return: result.return as undefined | MutableArc59Returns['arc59_reject(uint64)void']}
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_getInbox(address)address` ABI method.
     *
     * Get the inbox address for the given receiver
     *
     * @param params The params for the smart contract call
     * @returns The call result: Zero address if the receiver does not yet have an inbox, otherwise the inbox address
     */
    arc59GetInbox: async (params: CallParams<MutableArc59Args['obj']['arc59_getInbox(address)address'] | MutableArc59Args['tuple']['arc59_getInbox(address)address']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MutableArc59ParamsFactory.arc59GetInbox(params))
      return {...result, return: result.return as undefined | MutableArc59Returns['arc59_getInbox(address)address']}
    },

    /**
     * Makes a call to the MutableARC59 smart contract using the `arc59_claimAlgo()void` ABI method.
     *
     * Claim any extra algo from the inbox
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc59ClaimAlgo: async (params: CallParams<MutableArc59Args['obj']['arc59_claimAlgo()void'] | MutableArc59Args['tuple']['arc59_claimAlgo()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(MutableArc59ParamsFactory.arc59ClaimAlgo(params))
      return {...result, return: result.return as undefined | MutableArc59Returns['arc59_claimAlgo()void']}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new MutableArc59Client(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current MutableARC59 app
   */
  state = {
  }

  public newGroup(): MutableArc59Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc59_optRouterIn(uint64)void method call against the MutableARC59 contract
       */
      arc59OptRouterIn(params: CallParams<MutableArc59Args['obj']['arc59_optRouterIn(uint64)void'] | MutableArc59Args['tuple']['arc59_optRouterIn(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc59OptRouterIn(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc59_getOrCreateInbox(address)address method call against the MutableARC59 contract
       */
      arc59GetOrCreateInbox(params: CallParams<MutableArc59Args['obj']['arc59_getOrCreateInbox(address)address'] | MutableArc59Args['tuple']['arc59_getOrCreateInbox(address)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc59GetOrCreateInbox(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc59_getOrCreateInbox(address)address', v))
        return this
      },
      /**
       * Add a arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64) method call against the MutableARC59 contract
       */
      arc59GetSendAssetInfo(params: CallParams<MutableArc59Args['obj']['arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)'] | MutableArc59Args['tuple']['arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc59GetSendAssetInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)', v))
        return this
      },
      /**
       * Add a arc59_sendAsset(axfer,address,uint64)address method call against the MutableARC59 contract
       */
      arc59SendAsset(params: CallParams<MutableArc59Args['obj']['arc59_sendAsset(axfer,address,uint64)address'] | MutableArc59Args['tuple']['arc59_sendAsset(axfer,address,uint64)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc59SendAsset(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc59_sendAsset(axfer,address,uint64)address', v))
        return this
      },
      /**
       * Add a arc59_claim(uint64)void method call against the MutableARC59 contract
       */
      arc59Claim(params: CallParams<MutableArc59Args['obj']['arc59_claim(uint64)void'] | MutableArc59Args['tuple']['arc59_claim(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc59Claim(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc59_reject(uint64)void method call against the MutableARC59 contract
       */
      arc59Reject(params: CallParams<MutableArc59Args['obj']['arc59_reject(uint64)void'] | MutableArc59Args['tuple']['arc59_reject(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc59Reject(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc59_getInbox(address)address method call against the MutableARC59 contract
       */
      arc59GetInbox(params: CallParams<MutableArc59Args['obj']['arc59_getInbox(address)address'] | MutableArc59Args['tuple']['arc59_getInbox(address)address']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc59GetInbox(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc59_getInbox(address)address', v))
        return this
      },
      /**
       * Add a arc59_claimAlgo()void method call against the MutableARC59 contract
       */
      arc59ClaimAlgo(params: CallParams<MutableArc59Args['obj']['arc59_claimAlgo()void'] | MutableArc59Args['tuple']['arc59_claimAlgo()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc59ClaimAlgo(params)))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<MutableArc59Args['obj']['updateApplication()void'] | MutableArc59Args['tuple']['updateApplication()void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the MutableARC59 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as MutableArc59Composer
  }
}
export type MutableArc59Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc59_optRouterIn(uint64)void ABI method.
   *
   * Opt the ARC59 router into the ASA. This is required before this app can be used to send the ASA to anyone.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc59OptRouterIn(params?: CallParams<MutableArc59Args['obj']['arc59_optRouterIn(uint64)void'] | MutableArc59Args['tuple']['arc59_optRouterIn(uint64)void']>): MutableArc59Composer<[...TReturns, MutableArc59Returns['arc59_optRouterIn(uint64)void'] | undefined]>

  /**
   * Calls the arc59_getOrCreateInbox(address)address ABI method.
   *
   * Gets the existing inbox for the receiver or creates a new one if it does not exist
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc59GetOrCreateInbox(params?: CallParams<MutableArc59Args['obj']['arc59_getOrCreateInbox(address)address'] | MutableArc59Args['tuple']['arc59_getOrCreateInbox(address)address']>): MutableArc59Composer<[...TReturns, MutableArc59Returns['arc59_getOrCreateInbox(address)address'] | undefined]>

  /**
   * Calls the arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc59GetSendAssetInfo(params?: CallParams<MutableArc59Args['obj']['arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)'] | MutableArc59Args['tuple']['arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)']>): MutableArc59Composer<[...TReturns, MutableArc59Returns['arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)'] | undefined]>

  /**
   * Calls the arc59_sendAsset(axfer,address,uint64)address ABI method.
   *
   * Send an asset to the receiver
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc59SendAsset(params?: CallParams<MutableArc59Args['obj']['arc59_sendAsset(axfer,address,uint64)address'] | MutableArc59Args['tuple']['arc59_sendAsset(axfer,address,uint64)address']>): MutableArc59Composer<[...TReturns, MutableArc59Returns['arc59_sendAsset(axfer,address,uint64)address'] | undefined]>

  /**
   * Calls the arc59_claim(uint64)void ABI method.
   *
   * Claim an ASA from the inbox
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc59Claim(params?: CallParams<MutableArc59Args['obj']['arc59_claim(uint64)void'] | MutableArc59Args['tuple']['arc59_claim(uint64)void']>): MutableArc59Composer<[...TReturns, MutableArc59Returns['arc59_claim(uint64)void'] | undefined]>

  /**
   * Calls the arc59_reject(uint64)void ABI method.
   *
   * Reject the ASA by closing it out to the ASA creator. Always sends two inner transactions.All non-MBR ALGO balance in the inbox will be sent to the caller.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc59Reject(params?: CallParams<MutableArc59Args['obj']['arc59_reject(uint64)void'] | MutableArc59Args['tuple']['arc59_reject(uint64)void']>): MutableArc59Composer<[...TReturns, MutableArc59Returns['arc59_reject(uint64)void'] | undefined]>

  /**
   * Calls the arc59_getInbox(address)address ABI method.
   *
   * Get the inbox address for the given receiver
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc59GetInbox(params?: CallParams<MutableArc59Args['obj']['arc59_getInbox(address)address'] | MutableArc59Args['tuple']['arc59_getInbox(address)address']>): MutableArc59Composer<[...TReturns, MutableArc59Returns['arc59_getInbox(address)address'] | undefined]>

  /**
   * Calls the arc59_claimAlgo()void ABI method.
   *
   * Claim any extra algo from the inbox
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc59ClaimAlgo(params?: CallParams<MutableArc59Args['obj']['arc59_claimAlgo()void'] | MutableArc59Args['tuple']['arc59_claimAlgo()void']>): MutableArc59Composer<[...TReturns, MutableArc59Returns['arc59_claimAlgo()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the MutableARC59 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): MutableArc59Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): MutableArc59Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<MutableArc59ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<MutableArc59ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<MutableArc59ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<MutableArc59ComposerResults<TReturns>>
}
export type MutableArc59ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

