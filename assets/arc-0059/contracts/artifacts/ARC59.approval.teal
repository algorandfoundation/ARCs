#pragma version 10

// This TEAL was generated by TEALScript v0.90.4
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
//
// Deploy ARC59 contract
createApplication:
	proto 0 0
	retsub

// arc59_optRouterIn(uint64)void
*abi_route_arc59_optRouterIn:
	// asa: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc59_optRouterIn(uint64)void
	callsub arc59_optRouterIn
	int 1
	return

// arc59_optRouterIn(asa: AssetID): void
//
// Opt the ARC59 router into the ASA. This is required before this app can be used to send the ASA to anyone.
//
// @param asa The ASA to opt into
arc59_optRouterIn:
	proto 1 0

	// contracts/arc59.algo.ts:50
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//       xferAsset: asa,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:51
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/arc59.algo.ts:52
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/arc59.algo.ts:53
	// xferAsset: asa
	frame_dig -1 // asa: AssetID
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// arc59_getOrCreateInbox(address)address
*abi_route_arc59_getOrCreateInbox:
	// The ABI return prefix
	byte 0x151f7c75

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc59_getOrCreateInbox(address)address
	callsub arc59_getOrCreateInbox
	concat
	log
	int 1
	return

// arc59_getOrCreateInbox(receiver: Address): Address
//
// Gets the existing inbox for the receiver or creates a new one if it does not exist
//
// @param receiver The address to get or create the inbox for
// @returns The inbox address
arc59_getOrCreateInbox:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// *if0_condition
	// contracts/arc59.algo.ts:64
	// this.inboxes(receiver).exists
	frame_dig -1 // receiver: Address
	box_len
	swap
	pop
	bz *if0_end

	// *if0_consequent
	// contracts/arc59.algo.ts:64
	// return this.inboxes(receiver).value;
	frame_dig -1 // receiver: Address
	box_get
	assert
	b *arc59_getOrCreateInbox*return

*if0_end:
	// contracts/arc59.algo.ts:66
	// inbox = sendMethodCall<typeof ControlledAddress.prototype.new>({
	//       onCompletion: OnCompletion.DeleteApplication,
	//       approvalProgram: ControlledAddress.approvalProgram(),
	//       clearStateProgram: ControlledAddress.clearProgram(),
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "new()address"
	itxn_field ApplicationArgs

	// contracts/arc59.algo.ts:67
	// onCompletion: OnCompletion.DeleteApplication
	int 5 // DeleteApplication
	itxn_field OnCompletion

	// contracts/arc59.algo.ts:68
	// approvalProgram: ControlledAddress.approvalProgram()
	byte b64 CiABATEYFIEGCzEZCI0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhAIAEFR98dYgABFCwIkOKAAGxIrIQMQCyIIEAsgGzMgqJgARWHS/qNhoAjgH/0wA=
	itxn_field ApprovalProgram

	// contracts/arc59.algo.ts:69
	// clearStateProgram: ControlledAddress.clearProgram()
	byte b64 Cg==
	itxn_field ClearStateProgram

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // inbox: address

	// contracts/arc59.algo.ts:72
	// this.inboxes(receiver).value = inbox
	frame_dig -1 // receiver: Address
	frame_dig 0 // inbox: address
	box_put

	// contracts/arc59.algo.ts:74
	// return inbox;
	frame_dig 0 // inbox: address

*arc59_getOrCreateInbox*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)
*abi_route_arc59_getSendAssetInfo:
	// The ABI return prefix
	byte 0x151f7c75

	// asset: uint64
	txna ApplicationArgs 2
	btoi

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)
	callsub arc59_getSendAssetInfo
	concat
	log
	int 1
	return

// arc59_getSendAssetInfo(receiver: Address, asset: AssetID): SendAssetInfo
//
//
// @param receiver The address to send the asset to
// @param asset The asset to send
//
// @returns Returns the following information for sending an asset:
// The number of itxns required, the MBR required, whether the router is opted in, whether the receiver is opted in,
// and how much ALGO the receiver would need to claim the asset
arc59_getSendAssetInfo:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 8

	// contracts/arc59.algo.ts:87
	// routerOptedIn = this.app.address.isOptedInToAsset(asset)
	global CurrentApplicationAddress
	frame_dig -2 // asset: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	frame_bury 0 // routerOptedIn: bool

	// contracts/arc59.algo.ts:88
	// receiverOptedIn = receiver.isOptedInToAsset(asset)
	frame_dig -1 // receiver: Address
	frame_dig -2 // asset: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	frame_bury 1 // receiverOptedIn: bool

	// contracts/arc59.algo.ts:89
	// info: SendAssetInfo = {
	//       itxns: 1,
	//       mbr: 0,
	//       routerOptedIn: routerOptedIn,
	//       receiverOptedIn: receiverOptedIn,
	//       receiverAlgoNeededForClaim: 0,
	//       receiverAlgoNeededForWorstCaseClaim: globals.minBalance + globals.assetOptInMinBalance + globals.minTxnFee,
	//     }
	byte 0x00000000000000010000000000000000
	byte 0x00
	int 0
	frame_dig 0 // routerOptedIn: bool
	setbit
	int 1
	frame_dig 1 // receiverOptedIn: bool
	setbit
	concat
	byte 0x0000000000000000
	concat
	global MinBalance
	global AssetOptInMinBalance
	+
	global MinTxnFee
	+
	itob
	concat
	frame_bury 2 // info: SendAssetInfo

	// *if1_condition
	// contracts/arc59.algo.ts:98
	// receiverOptedIn
	frame_dig 1 // receiverOptedIn: bool
	bz *if1_end

	// *if1_consequent
	// contracts/arc59.algo.ts:98
	// return info;
	frame_dig 2 // info: SendAssetInfo
	b *arc59_getSendAssetInfo*return

*if1_end:
	// contracts/arc59.algo.ts:100
	// algoNeededToClaim = receiver.minBalance + globals.assetOptInMinBalance + globals.minTxnFee
	frame_dig -1 // receiver: Address
	acct_params_get AcctMinBalance
	pop
	global AssetOptInMinBalance
	+
	global MinTxnFee
	+
	frame_bury 3 // algoNeededToClaim: uint64

	// *if2_condition
	// contracts/arc59.algo.ts:103
	// receiver.balance < algoNeededToClaim
	frame_dig -1 // receiver: Address
	acct_params_get AcctBalance
	pop
	frame_dig 3 // algoNeededToClaim: uint64
	<
	bz *if2_end

	// *if2_consequent
	// contracts/arc59.algo.ts:104
	// info.receiverAlgoNeededForClaim = algoNeededToClaim - receiver.balance
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	int 17
	frame_dig 3 // algoNeededToClaim: uint64
	frame_dig -1 // receiver: Address
	acct_params_get AcctBalance
	pop
	-
	itob
	replace3
	frame_bury 2 // info: SendAssetInfo

*if2_end:
	// *if3_condition
	// contracts/arc59.algo.ts:108
	// !routerOptedIn
	frame_dig 0 // routerOptedIn: bool
	!
	bz *if3_end

	// *if3_consequent
	// contracts/arc59.algo.ts:109
	// info.mbr += globals.assetOptInMinBalance
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	int 8
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	global AssetOptInMinBalance
	+
	itob
	replace3
	frame_bury 2 // info: SendAssetInfo

	// contracts/arc59.algo.ts:110
	// info.itxns += 1
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	int 0
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	int 1
	+
	itob
	replace3
	frame_bury 2 // info: SendAssetInfo

*if3_end:
	// *if4_condition
	// contracts/arc59.algo.ts:113
	// !this.inboxes(receiver).exists
	frame_dig -1 // receiver: Address
	box_len
	swap
	pop
	!
	bz *if4_end

	// *if4_consequent
	// contracts/arc59.algo.ts:117
	// info.itxns += 4
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	int 0
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	int 4
	+
	itob
	replace3
	frame_bury 2 // info: SendAssetInfo

	// contracts/arc59.algo.ts:120
	// preMBR = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 4 // preMBR: uint64

	// contracts/arc59.algo.ts:121
	// this.inboxes(receiver).value = globals.zeroAddress
	frame_dig -1 // receiver: Address
	global ZeroAddress
	box_put

	// contracts/arc59.algo.ts:122
	// boxMbrDelta = globals.currentApplicationAddress.minBalance - preMBR
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_dig 4 // preMBR: uint64
	-
	frame_bury 5 // boxMbrDelta: uint64

	// contracts/arc59.algo.ts:123
	// this.inboxes(receiver).delete()
	frame_dig -1 // receiver: Address
	box_del

	// contracts/arc59.algo.ts:126
	// info.mbr += boxMbrDelta + globals.minBalance + globals.assetOptInMinBalance
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	int 8
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	frame_dig 5 // boxMbrDelta: uint64
	global MinBalance
	+
	global AssetOptInMinBalance
	+
	+
	itob
	replace3
	frame_bury 2 // info: SendAssetInfo

	// contracts/arc59.algo.ts:128
	// return info;
	frame_dig 2 // info: SendAssetInfo
	b *arc59_getSendAssetInfo*return

*if4_end:
	// contracts/arc59.algo.ts:131
	// inbox = this.inboxes(receiver).value
	frame_dig -1 // receiver: Address
	box_get
	assert
	frame_bury 6 // inbox: address

	// *if5_condition
	// contracts/arc59.algo.ts:133
	// !inbox.isOptedInToAsset(asset)
	frame_dig 6 // inbox: address
	frame_dig -2 // asset: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	!
	bz *if5_end

	// *if5_consequent
	// contracts/arc59.algo.ts:135
	// info.itxns += 1
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	int 0
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	int 1
	+
	itob
	replace3
	frame_bury 2 // info: SendAssetInfo

	// *if6_condition
	// contracts/arc59.algo.ts:137
	// !(inbox.balance >= inbox.minBalance + globals.assetOptInMinBalance)
	frame_dig 6 // inbox: address
	acct_params_get AcctBalance
	pop
	frame_dig 6 // inbox: address
	acct_params_get AcctMinBalance
	pop
	global AssetOptInMinBalance
	+
	>=
	!
	bz *if6_end

	// *if6_consequent
	// contracts/arc59.algo.ts:139
	// info.itxns += 1
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	int 0
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	int 1
	+
	itob
	replace3
	frame_bury 2 // info: SendAssetInfo

	// contracts/arc59.algo.ts:142
	// info.mbr += globals.assetOptInMinBalance
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	int 8
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	global AssetOptInMinBalance
	+
	itob
	replace3
	frame_bury 2 // info: SendAssetInfo

*if6_end:

*if5_end:
	// *if7_condition
	// contracts/arc59.algo.ts:147
	// inbox.balance > inbox.minBalance && info.receiverAlgoNeededForClaim !== 0
	frame_dig 6 // inbox: address
	acct_params_get AcctBalance
	pop
	frame_dig 6 // inbox: address
	acct_params_get AcctMinBalance
	pop
	>
	dup
	bz *skip_and0
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	extract 17 8
	btoi
	int 0
	!=
	&&

*skip_and0:
	bz *if7_end

	// *if7_consequent
	// contracts/arc59.algo.ts:152
	// algoConsumedByClaim = globals.assetOptInMinBalance + (info.itxns + 4) * globals.minTxnFee
	global AssetOptInMinBalance
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	int 4
	+
	global MinTxnFee
	*
	+
	frame_bury 7 // algoConsumedByClaim: uint64

	// contracts/arc59.algo.ts:153
	// inboxAlgoAvailable = inbox.balance > inbox.minBalance ? inbox.balance - inbox.minBalance : 0
	frame_dig 6 // inbox: address
	acct_params_get AcctBalance
	pop
	frame_dig 6 // inbox: address
	acct_params_get AcctMinBalance
	pop
	>
	bz *ternary1_false
	frame_dig 6 // inbox: address
	acct_params_get AcctBalance
	pop
	frame_dig 6 // inbox: address
	acct_params_get AcctMinBalance
	pop
	-
	b *ternary1_end

*ternary1_false:
	int 0

*ternary1_end:
	frame_bury 8 // inboxAlgoAvailable: uint64

	// contracts/arc59.algo.ts:154
	// inboxAlgoAvailable = inboxAlgoAvailable > algoConsumedByClaim ? inboxAlgoAvailable - algoConsumedByClaim : 0
	frame_dig 8 // inboxAlgoAvailable: uint64
	frame_dig 7 // algoConsumedByClaim: uint64
	>
	bz *ternary2_false
	frame_dig 8 // inboxAlgoAvailable: uint64
	frame_dig 7 // algoConsumedByClaim: uint64
	-
	b *ternary2_end

*ternary2_false:
	int 0

*ternary2_end:
	frame_bury 8 // inboxAlgoAvailable: uint64

	// *if8_condition
	// contracts/arc59.algo.ts:156
	// inboxAlgoAvailable < info.receiverAlgoNeededForClaim
	frame_dig 8 // inboxAlgoAvailable: uint64
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	extract 17 8
	btoi
	<
	bz *if8_end

	// *if8_consequent
	// contracts/arc59.algo.ts:157
	// info.receiverAlgoNeededForClaim -= inboxAlgoAvailable
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	int 17
	frame_dig 2 // info: SendAssetInfo
	store 255 // full array
	load 255 // full array
	extract 17 8
	btoi
	frame_dig 8 // inboxAlgoAvailable: uint64
	-
	itob
	replace3
	frame_bury 2 // info: SendAssetInfo

*if8_end:

*if7_end:
	// contracts/arc59.algo.ts:161
	// return info;
	frame_dig 2 // info: SendAssetInfo

*arc59_getSendAssetInfo*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 8
	retsub

// arc59_sendAsset(axfer,address,uint64)address
*abi_route_arc59_sendAsset:
	// The ABI return prefix
	byte 0x151f7c75

	// additionalReceiverFunds: uint64
	txna ApplicationArgs 2
	btoi

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// axfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// execute arc59_sendAsset(axfer,address,uint64)address
	callsub arc59_sendAsset
	concat
	log
	int 1
	return

// arc59_sendAsset(axfer: AssetTransferTxn, receiver: Address, additionalReceiverFunds: uint64): Address
//
// Send an asset to the receiver
//
// @param receiver The address to send the asset to
// @param axfer The asset transfer to this app
// @param additionalReceiverFunds The amount of ALGO to send to the receiver/inbox in addition to the MBR
//
// @returns The address that the asset was sent to (either the receiver or their inbox)
arc59_sendAsset:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/arc59.algo.ts:174
	// verifyAssetTransferTxn(axfer, {
	//       assetReceiver: this.app.address,
	//     })
	// verify assetReceiver
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// *if9_condition
	// contracts/arc59.algo.ts:179
	// receiver.isOptedInToAsset(axfer.xferAsset)
	frame_dig -2 // receiver: Address
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	asset_holding_get AssetBalance
	swap
	pop
	bz *if9_end

	// *if9_consequent
	// contracts/arc59.algo.ts:180
	// sendAssetTransfer({
	//         assetReceiver: receiver,
	//         assetAmount: axfer.assetAmount,
	//         xferAsset: axfer.xferAsset,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:181
	// assetReceiver: receiver
	frame_dig -2 // receiver: Address
	itxn_field AssetReceiver

	// contracts/arc59.algo.ts:182
	// assetAmount: axfer.assetAmount
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetAmount
	itxn_field AssetAmount

	// contracts/arc59.algo.ts:183
	// xferAsset: axfer.xferAsset
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if10_condition
	// contracts/arc59.algo.ts:186
	// additionalReceiverFunds !== 0
	frame_dig -3 // additionalReceiverFunds: uint64
	int 0
	!=
	bz *if10_end

	// *if10_consequent
	// contracts/arc59.algo.ts:187
	// sendPayment({
	//           receiver: receiver,
	//           amount: additionalReceiverFunds,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:188
	// receiver: receiver
	frame_dig -2 // receiver: Address
	itxn_field Receiver

	// contracts/arc59.algo.ts:189
	// amount: additionalReceiverFunds
	frame_dig -3 // additionalReceiverFunds: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if10_end:
	// contracts/arc59.algo.ts:193
	// return receiver;
	frame_dig -2 // receiver: Address
	b *arc59_sendAsset*return

*if9_end:
	// contracts/arc59.algo.ts:196
	// inboxExisted = this.inboxes(receiver).exists
	frame_dig -2 // receiver: Address
	box_len
	swap
	pop
	frame_bury 0 // inboxExisted: bool

	// contracts/arc59.algo.ts:197
	// inbox = this.arc59_getOrCreateInbox(receiver)
	frame_dig -2 // receiver: Address
	callsub arc59_getOrCreateInbox
	frame_bury 1 // inbox: address

	// *if11_condition
	// contracts/arc59.algo.ts:199
	// !inbox.isOptedInToAsset(axfer.xferAsset)
	frame_dig 1 // inbox: address
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	asset_holding_get AssetBalance
	swap
	pop
	!
	bz *if11_end

	// *if11_consequent
	// contracts/arc59.algo.ts:200
	// inboxMbrDelta = globals.assetOptInMinBalance
	global AssetOptInMinBalance
	frame_bury 2 // inboxMbrDelta: uint64

	// *if12_condition
	// contracts/arc59.algo.ts:201
	// !inboxExisted
	frame_dig 0 // inboxExisted: bool
	!
	bz *if12_end

	// *if12_consequent
	// contracts/arc59.algo.ts:201
	// inboxMbrDelta += globals.minBalance
	frame_dig 2 // inboxMbrDelta: uint64
	global MinBalance
	+
	frame_bury 2 // inboxMbrDelta: uint64

*if12_end:
	// *if13_condition
	// contracts/arc59.algo.ts:204
	// inbox.balance < inbox.minBalance + inboxMbrDelta
	frame_dig 1 // inbox: address
	acct_params_get AcctBalance
	pop
	frame_dig 1 // inbox: address
	acct_params_get AcctMinBalance
	pop
	frame_dig 2 // inboxMbrDelta: uint64
	+
	<
	bz *if13_end

	// *if13_consequent
	// contracts/arc59.algo.ts:205
	// sendPayment({
	//           receiver: inbox,
	//           amount: inboxMbrDelta,
	//         })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:206
	// receiver: inbox
	frame_dig 1 // inbox: address
	itxn_field Receiver

	// contracts/arc59.algo.ts:207
	// amount: inboxMbrDelta
	frame_dig 2 // inboxMbrDelta: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if13_end:
	// contracts/arc59.algo.ts:212
	// sendAssetTransfer({
	//         sender: inbox,
	//         assetReceiver: inbox,
	//         assetAmount: 0,
	//         xferAsset: axfer.xferAsset,
	//       })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:213
	// sender: inbox
	frame_dig 1 // inbox: address
	itxn_field Sender

	// contracts/arc59.algo.ts:214
	// assetReceiver: inbox
	frame_dig 1 // inbox: address
	itxn_field AssetReceiver

	// contracts/arc59.algo.ts:215
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/arc59.algo.ts:216
	// xferAsset: axfer.xferAsset
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if11_end:
	// contracts/arc59.algo.ts:221
	// sendAssetTransfer({
	//       assetReceiver: inbox,
	//       assetAmount: axfer.assetAmount,
	//       xferAsset: axfer.xferAsset,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:222
	// assetReceiver: inbox
	frame_dig 1 // inbox: address
	itxn_field AssetReceiver

	// contracts/arc59.algo.ts:223
	// assetAmount: axfer.assetAmount
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetAmount
	itxn_field AssetAmount

	// contracts/arc59.algo.ts:224
	// xferAsset: axfer.xferAsset
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if14_condition
	// contracts/arc59.algo.ts:227
	// additionalReceiverFunds !== 0
	frame_dig -3 // additionalReceiverFunds: uint64
	int 0
	!=
	bz *if14_end

	// *if14_consequent
	// contracts/arc59.algo.ts:228
	// sendPayment({
	//         receiver: inbox,
	//         amount: additionalReceiverFunds,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:229
	// receiver: inbox
	frame_dig 1 // inbox: address
	itxn_field Receiver

	// contracts/arc59.algo.ts:230
	// amount: additionalReceiverFunds
	frame_dig -3 // additionalReceiverFunds: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if14_end:
	// contracts/arc59.algo.ts:234
	// return inbox;
	frame_dig 1 // inbox: address

*arc59_sendAsset*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// arc59_claim(uint64)void
*abi_route_arc59_claim:
	// asa: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc59_claim(uint64)void
	callsub arc59_claim
	int 1
	return

// arc59_claim(asa: AssetID): void
//
// Claim an ASA from the inbox
//
// @param asa The ASA to claim
arc59_claim:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/arc59.algo.ts:243
	// inbox = this.inboxes(this.txn.sender).value
	txn Sender
	box_get
	assert
	frame_bury 0 // inbox: address

	// contracts/arc59.algo.ts:245
	// sendAssetTransfer({
	//       sender: inbox,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: inbox.assetBalance(asa),
	//       xferAsset: asa,
	//       assetCloseTo: this.txn.sender,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:246
	// sender: inbox
	frame_dig 0 // inbox: address
	itxn_field Sender

	// contracts/arc59.algo.ts:247
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/arc59.algo.ts:248
	// assetAmount: inbox.assetBalance(asa)
	frame_dig 0 // inbox: address
	frame_dig -1 // asa: AssetID
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// contracts/arc59.algo.ts:249
	// xferAsset: asa
	frame_dig -1 // asa: AssetID
	itxn_field XferAsset

	// contracts/arc59.algo.ts:250
	// assetCloseTo: this.txn.sender
	txn Sender
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/arc59.algo.ts:253
	// sendPayment({
	//       sender: inbox,
	//       receiver: this.txn.sender,
	//       amount: inbox.balance - inbox.minBalance,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:254
	// sender: inbox
	frame_dig 0 // inbox: address
	itxn_field Sender

	// contracts/arc59.algo.ts:255
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/arc59.algo.ts:256
	// amount: inbox.balance - inbox.minBalance
	frame_dig 0 // inbox: address
	acct_params_get AcctBalance
	pop
	frame_dig 0 // inbox: address
	acct_params_get AcctMinBalance
	pop
	-
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// arc59_reject(uint64)void
*abi_route_arc59_reject:
	// asa: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc59_reject(uint64)void
	callsub arc59_reject
	int 1
	return

// arc59_reject(asa: AssetID): void
//
// Reject the ASA by closing it out to the ASA creator. Always sends two inner transactions.
// All non-MBR ALGO balance in the inbox will be sent to the caller.
//
// @param asa The ASA to reject
arc59_reject:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/arc59.algo.ts:267
	// inbox = this.inboxes(this.txn.sender).value
	txn Sender
	box_get
	assert
	frame_bury 0 // inbox: address

	// contracts/arc59.algo.ts:269
	// sendAssetTransfer({
	//       sender: inbox,
	//       assetReceiver: asa.creator,
	//       assetAmount: inbox.assetBalance(asa),
	//       xferAsset: asa,
	//       assetCloseTo: asa.creator,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:270
	// sender: inbox
	frame_dig 0 // inbox: address
	itxn_field Sender

	// contracts/arc59.algo.ts:271
	// assetReceiver: asa.creator
	frame_dig -1 // asa: AssetID
	asset_params_get AssetCreator
	pop
	itxn_field AssetReceiver

	// contracts/arc59.algo.ts:272
	// assetAmount: inbox.assetBalance(asa)
	frame_dig 0 // inbox: address
	frame_dig -1 // asa: AssetID
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// contracts/arc59.algo.ts:273
	// xferAsset: asa
	frame_dig -1 // asa: AssetID
	itxn_field XferAsset

	// contracts/arc59.algo.ts:274
	// assetCloseTo: asa.creator
	frame_dig -1 // asa: AssetID
	asset_params_get AssetCreator
	pop
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/arc59.algo.ts:277
	// sendPayment({
	//       sender: inbox,
	//       receiver: this.txn.sender,
	//       amount: inbox.balance - inbox.minBalance,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:278
	// sender: inbox
	frame_dig 0 // inbox: address
	itxn_field Sender

	// contracts/arc59.algo.ts:279
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/arc59.algo.ts:280
	// amount: inbox.balance - inbox.minBalance
	frame_dig 0 // inbox: address
	acct_params_get AcctBalance
	pop
	frame_dig 0 // inbox: address
	acct_params_get AcctMinBalance
	pop
	-
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// arc59_getInbox(address)address
*abi_route_arc59_getInbox:
	// The ABI return prefix
	byte 0x151f7c75

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc59_getInbox(address)address
	callsub arc59_getInbox
	concat
	log
	int 1
	return

// arc59_getInbox(receiver: Address): Address
//
// Get the inbox address for the given receiver
//
// @param receiver The receiver to get the inbox for
//
// @returns Zero address if the receiver does not yet have an inbox, otherwise the inbox address
arc59_getInbox:
	proto 1 1

	// contracts/arc59.algo.ts:292
	// return this.inboxes(receiver).exists ? this.inboxes(receiver).value : globals.zeroAddress;
	frame_dig -1 // receiver: Address
	box_len
	swap
	pop
	bz *ternary3_false
	frame_dig -1 // receiver: Address
	box_get
	assert
	b *ternary3_end

*ternary3_false:
	global ZeroAddress

*ternary3_end:
	retsub

// arc59_claimAlgo()void
*abi_route_arc59_claimAlgo:
	// execute arc59_claimAlgo()void
	callsub arc59_claimAlgo
	int 1
	return

// arc59_claimAlgo(): void
//
// Claim any extra algo from the inbox
arc59_claimAlgo:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/arc59.algo.ts:297
	// inbox = this.inboxes(this.txn.sender).value
	txn Sender
	box_get
	assert
	frame_bury 0 // inbox: address

	// contracts/arc59.algo.ts:299
	// assert(inbox.balance - inbox.minBalance !== 0)
	frame_dig 0 // inbox: address
	acct_params_get AcctBalance
	pop
	frame_dig 0 // inbox: address
	acct_params_get AcctMinBalance
	pop
	-
	int 0
	!=
	assert

	// contracts/arc59.algo.ts:301
	// sendPayment({
	//       sender: inbox,
	//       receiver: this.txn.sender,
	//       amount: inbox.balance - inbox.minBalance,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/arc59.algo.ts:302
	// sender: inbox
	frame_dig 0 // inbox: address
	itxn_field Sender

	// contracts/arc59.algo.ts:303
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts/arc59.algo.ts:304
	// amount: inbox.balance - inbox.minBalance
	frame_dig 0 // inbox: address
	acct_params_get AcctBalance
	pop
	frame_dig 0 // inbox: address
	acct_params_get AcctMinBalance
	pop
	-
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "arc59_optRouterIn(uint64)void"
	method "arc59_getOrCreateInbox(address)address"
	method "arc59_getSendAssetInfo(address,uint64)(uint64,uint64,bool,bool,uint64,uint64)"
	method "arc59_sendAsset(axfer,address,uint64)address"
	method "arc59_claim(uint64)void"
	method "arc59_reject(uint64)void"
	method "arc59_getInbox(address)address"
	method "arc59_claimAlgo()void"
	txna ApplicationArgs 0
	match *abi_route_arc59_optRouterIn *abi_route_arc59_getOrCreateInbox *abi_route_arc59_getSendAssetInfo *abi_route_arc59_sendAsset *abi_route_arc59_claim *abi_route_arc59_reject *abi_route_arc59_getInbox *abi_route_arc59_claimAlgo
	err